# Generated by default/object.tt
package Paws::LookoutVision::DetectAnomalyResult;
  use Moose;
  has Anomalies => (is => 'ro', isa => 'ArrayRef[Paws::LookoutVision::Anomaly]');
  has AnomalyMask => (is => 'ro', isa => 'Str');
  has Confidence => (is => 'ro', isa => 'Num');
  has IsAnomalous => (is => 'ro', isa => 'Bool');
  has Source => (is => 'ro', isa => 'Paws::LookoutVision::ImageSource');

1;

### main pod documentation begin ###

=head1 NAME

Paws::LookoutVision::DetectAnomalyResult

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::LookoutVision::DetectAnomalyResult object:

  $service_obj->Method(Att1 => { Anomalies => $value, ..., Source => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::LookoutVision::DetectAnomalyResult object:

  $result = $service_obj->Method(...);
  $result->Att1->Anomalies

=head1 DESCRIPTION

The prediction results from a call to DetectAnomalies.
C<DetectAnomalyResult> includes classification information for the
prediction (C<IsAnomalous> and C<Confidence>). If the model you use is
an image segementation model, C<DetectAnomalyResult> also includes
segmentation information (C<Anomalies> and C<AnomalyMask>).
Classification information is calculated separately from segmentation
information and you shouldn't assume a relationship between them.

=head1 ATTRIBUTES


=head2 Anomalies => ArrayRef[L<Paws::LookoutVision::Anomaly>]

If the model is an image segmentation model, C<Anomalies> contains a
list of anomaly types found in the image. There is one entry for each
type of anomaly found (even if multiple instances of an anomaly type
exist on the image). The first element in the list is always an anomaly
type representing the image background ('background') and shouldn't be
considered an anomaly. Amazon Lookout for Vision automatically add the
background anomaly type to the response, and you don't need to declare
a background anomaly type in your dataset.

If the list has one entry ('background'), no anomalies were found on
the image.

An image classification model doesn't return an C<Anomalies> list.


=head2 AnomalyMask => Str

If the model is an image segmentation model, C<AnomalyMask> contains
pixel masks that covers all anomaly types found on the image. Each
anomaly type has a different mask color. To map a color to an anomaly
type, see the C<color> field of the PixelAnomaly object.

An image classification model doesn't return an C<Anomalies> list.


=head2 Confidence => Num

The confidence that Lookout for Vision has in the accuracy of the
classification in C<IsAnomalous>.


=head2 IsAnomalous => Bool

True if Amazon Lookout for Vision classifies the image as containing an
anomaly, otherwise false.


=head2 Source => L<Paws::LookoutVision::ImageSource>

The source of the image that was analyzed. C<direct> means that the
images was supplied from the local computer. No other values are
supported.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::LookoutVision>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

