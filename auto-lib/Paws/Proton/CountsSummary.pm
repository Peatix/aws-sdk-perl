# Generated by default/object.tt
package Paws::Proton::CountsSummary;
  use Moose;
  has Components => (is => 'ro', isa => 'Paws::Proton::ResourceCountsSummary', request_name => 'components', traits => ['NameInRequest']);
  has Environments => (is => 'ro', isa => 'Paws::Proton::ResourceCountsSummary', request_name => 'environments', traits => ['NameInRequest']);
  has EnvironmentTemplates => (is => 'ro', isa => 'Paws::Proton::ResourceCountsSummary', request_name => 'environmentTemplates', traits => ['NameInRequest']);
  has Pipelines => (is => 'ro', isa => 'Paws::Proton::ResourceCountsSummary', request_name => 'pipelines', traits => ['NameInRequest']);
  has ServiceInstances => (is => 'ro', isa => 'Paws::Proton::ResourceCountsSummary', request_name => 'serviceInstances', traits => ['NameInRequest']);
  has Services => (is => 'ro', isa => 'Paws::Proton::ResourceCountsSummary', request_name => 'services', traits => ['NameInRequest']);
  has ServiceTemplates => (is => 'ro', isa => 'Paws::Proton::ResourceCountsSummary', request_name => 'serviceTemplates', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::Proton::CountsSummary

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Proton::CountsSummary object:

  $service_obj->Method(Att1 => { Components => $value, ..., ServiceTemplates => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Proton::CountsSummary object:

  $result = $service_obj->Method(...);
  $result->Att1->Components

=head1 DESCRIPTION

Summary counts of each Proton resource type.

=head1 ATTRIBUTES


=head2 Components => L<Paws::Proton::ResourceCountsSummary>

The total number of components in the Amazon Web Services account.

The semantics of the C<components> field are different from the
semantics of results for other infrastructure-provisioning resources.
That's because at this time components don't have associated templates,
therefore they don't have the concept of staleness. The C<components>
object will only contain C<total> and C<failed> members.


=head2 Environments => L<Paws::Proton::ResourceCountsSummary>

The staleness counts for Proton environments in the Amazon Web Services
account. The C<environments> object will only contain C<total> members.


=head2 EnvironmentTemplates => L<Paws::Proton::ResourceCountsSummary>

The total number of environment templates in the Amazon Web Services
account. The C<environmentTemplates> object will only contain C<total>
members.


=head2 Pipelines => L<Paws::Proton::ResourceCountsSummary>

The staleness counts for Proton pipelines in the Amazon Web Services
account.


=head2 ServiceInstances => L<Paws::Proton::ResourceCountsSummary>

The staleness counts for Proton service instances in the Amazon Web
Services account.


=head2 Services => L<Paws::Proton::ResourceCountsSummary>

The staleness counts for Proton services in the Amazon Web Services
account.


=head2 ServiceTemplates => L<Paws::Proton::ResourceCountsSummary>

The total number of service templates in the Amazon Web Services
account. The C<serviceTemplates> object will only contain C<total>
members.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Proton>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

