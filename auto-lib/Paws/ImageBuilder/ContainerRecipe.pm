# Generated by default/object.tt
package Paws::ImageBuilder::ContainerRecipe;
  use Moose;
  has Arn => (is => 'ro', isa => 'Str', request_name => 'arn', traits => ['NameInRequest']);
  has Components => (is => 'ro', isa => 'ArrayRef[Paws::ImageBuilder::ComponentConfiguration]', request_name => 'components', traits => ['NameInRequest']);
  has ContainerType => (is => 'ro', isa => 'Str', request_name => 'containerType', traits => ['NameInRequest']);
  has DateCreated => (is => 'ro', isa => 'Str', request_name => 'dateCreated', traits => ['NameInRequest']);
  has Description => (is => 'ro', isa => 'Str', request_name => 'description', traits => ['NameInRequest']);
  has DockerfileTemplateData => (is => 'ro', isa => 'Str', request_name => 'dockerfileTemplateData', traits => ['NameInRequest']);
  has Encrypted => (is => 'ro', isa => 'Bool', request_name => 'encrypted', traits => ['NameInRequest']);
  has InstanceConfiguration => (is => 'ro', isa => 'Paws::ImageBuilder::InstanceConfiguration', request_name => 'instanceConfiguration', traits => ['NameInRequest']);
  has KmsKeyId => (is => 'ro', isa => 'Str', request_name => 'kmsKeyId', traits => ['NameInRequest']);
  has Name => (is => 'ro', isa => 'Str', request_name => 'name', traits => ['NameInRequest']);
  has Owner => (is => 'ro', isa => 'Str', request_name => 'owner', traits => ['NameInRequest']);
  has ParentImage => (is => 'ro', isa => 'Str', request_name => 'parentImage', traits => ['NameInRequest']);
  has Platform => (is => 'ro', isa => 'Str', request_name => 'platform', traits => ['NameInRequest']);
  has Tags => (is => 'ro', isa => 'Paws::ImageBuilder::TagMap', request_name => 'tags', traits => ['NameInRequest']);
  has TargetRepository => (is => 'ro', isa => 'Paws::ImageBuilder::TargetContainerRepository', request_name => 'targetRepository', traits => ['NameInRequest']);
  has Version => (is => 'ro', isa => 'Str', request_name => 'version', traits => ['NameInRequest']);
  has WorkingDirectory => (is => 'ro', isa => 'Str', request_name => 'workingDirectory', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::ImageBuilder::ContainerRecipe

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::ImageBuilder::ContainerRecipe object:

  $service_obj->Method(Att1 => { Arn => $value, ..., WorkingDirectory => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::ImageBuilder::ContainerRecipe object:

  $result = $service_obj->Method(...);
  $result->Att1->Arn

=head1 DESCRIPTION

A container recipe.

=head1 ATTRIBUTES


=head2 Arn => Str

The Amazon Resource Name (ARN) of the container recipe.

Semantic versioning is included in each object's Amazon Resource Name
(ARN), at the level that applies to that object as follows:

=over

=item 1.

Versionless ARNs and Name ARNs do not include specific values in any of
the nodes. The nodes are either left off entirely, or they are
specified as wildcards, for example: x.x.x.

=item 2.

Version ARNs have only the first three nodes:
E<lt>majorE<gt>.E<lt>minorE<gt>.E<lt>patchE<gt>

=item 3.

Build version ARNs have all four nodes, and point to a specific build
for a specific version of an object.

=back



=head2 Components => ArrayRef[L<Paws::ImageBuilder::ComponentConfiguration>]

Build and test components that are included in the container recipe.
Recipes require a minimum of one build component, and can have a
maximum of 20 build and test components in any combination.


=head2 ContainerType => Str

Specifies the type of container, such as Docker.


=head2 DateCreated => Str

The date when this container recipe was created.


=head2 Description => Str

The description of the container recipe.


=head2 DockerfileTemplateData => Str

Dockerfiles are text documents that are used to build Docker
containers, and ensure that they contain all of the elements required
by the application running inside. The template data consists of
contextual variables where Image Builder places build information or
scripts, based on your container image recipe.


=head2 Encrypted => Bool

A flag that indicates if the target container is encrypted.


=head2 InstanceConfiguration => L<Paws::ImageBuilder::InstanceConfiguration>

A group of options that can be used to configure an instance for
building and testing container images.


=head2 KmsKeyId => Str

Identifies which KMS key is used to encrypt the container image for
distribution to the target Region.


=head2 Name => Str

The name of the container recipe.


=head2 Owner => Str

The owner of the container recipe.


=head2 ParentImage => Str

The base image for customizations specified in the container recipe.
This can contain an Image Builder image resource ARN or a container
image URI, for example C<amazonlinux:latest>.


=head2 Platform => Str

The system platform for the container, such as Windows or Linux.


=head2 Tags => L<Paws::ImageBuilder::TagMap>

Tags that are attached to the container recipe.


=head2 TargetRepository => L<Paws::ImageBuilder::TargetContainerRepository>

The destination repository for the container image.


=head2 Version => Str

The semantic version of the container recipe.

The semantic version has four nodes:
E<lt>majorE<gt>.E<lt>minorE<gt>.E<lt>patchE<gt>/E<lt>buildE<gt>. You
can assign values for the first three, and can filter on all of them.

B<Assignment:> For the first three nodes you can assign any positive
integer value, including zero, with an upper limit of 2^30-1, or
1073741823 for each node. Image Builder automatically assigns the build
number to the fourth node.

B<Patterns:> You can use any numeric pattern that adheres to the
assignment requirements for the nodes that you can assign. For example,
you might choose a software version pattern, such as 1.0.0, or a date,
such as 2021.01.01.

B<Filtering:> With semantic versioning, you have the flexibility to use
wildcards (x) to specify the most recent versions or nodes when
selecting the base image or components for your recipe. When you use a
wildcard in any node, all nodes to the right of the first wildcard must
also be wildcards.


=head2 WorkingDirectory => Str

The working directory for use during build and test workflows.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::ImageBuilder>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

