# Generated by default/object.tt
package Paws::MediaConvert::CmafGroupSettings;
  use Moose;
  has AdditionalManifests => (is => 'ro', isa => 'ArrayRef[Paws::MediaConvert::CmafAdditionalManifest]', request_name => 'additionalManifests', traits => ['NameInRequest']);
  has BaseUrl => (is => 'ro', isa => 'Str', request_name => 'baseUrl', traits => ['NameInRequest']);
  has ClientCache => (is => 'ro', isa => 'Str', request_name => 'clientCache', traits => ['NameInRequest']);
  has CodecSpecification => (is => 'ro', isa => 'Str', request_name => 'codecSpecification', traits => ['NameInRequest']);
  has DashIFrameTrickPlayNameModifier => (is => 'ro', isa => 'Str', request_name => 'dashIFrameTrickPlayNameModifier', traits => ['NameInRequest']);
  has DashManifestStyle => (is => 'ro', isa => 'Str', request_name => 'dashManifestStyle', traits => ['NameInRequest']);
  has Destination => (is => 'ro', isa => 'Str', request_name => 'destination', traits => ['NameInRequest']);
  has DestinationSettings => (is => 'ro', isa => 'Paws::MediaConvert::DestinationSettings', request_name => 'destinationSettings', traits => ['NameInRequest']);
  has Encryption => (is => 'ro', isa => 'Paws::MediaConvert::CmafEncryptionSettings', request_name => 'encryption', traits => ['NameInRequest']);
  has FragmentLength => (is => 'ro', isa => 'Int', request_name => 'fragmentLength', traits => ['NameInRequest']);
  has ImageBasedTrickPlay => (is => 'ro', isa => 'Str', request_name => 'imageBasedTrickPlay', traits => ['NameInRequest']);
  has ImageBasedTrickPlaySettings => (is => 'ro', isa => 'Paws::MediaConvert::CmafImageBasedTrickPlaySettings', request_name => 'imageBasedTrickPlaySettings', traits => ['NameInRequest']);
  has ManifestCompression => (is => 'ro', isa => 'Str', request_name => 'manifestCompression', traits => ['NameInRequest']);
  has ManifestDurationFormat => (is => 'ro', isa => 'Str', request_name => 'manifestDurationFormat', traits => ['NameInRequest']);
  has MinBufferTime => (is => 'ro', isa => 'Int', request_name => 'minBufferTime', traits => ['NameInRequest']);
  has MinFinalSegmentLength => (is => 'ro', isa => 'Num', request_name => 'minFinalSegmentLength', traits => ['NameInRequest']);
  has MpdManifestBandwidthType => (is => 'ro', isa => 'Str', request_name => 'mpdManifestBandwidthType', traits => ['NameInRequest']);
  has MpdProfile => (is => 'ro', isa => 'Str', request_name => 'mpdProfile', traits => ['NameInRequest']);
  has PtsOffsetHandlingForBFrames => (is => 'ro', isa => 'Str', request_name => 'ptsOffsetHandlingForBFrames', traits => ['NameInRequest']);
  has SegmentControl => (is => 'ro', isa => 'Str', request_name => 'segmentControl', traits => ['NameInRequest']);
  has SegmentLength => (is => 'ro', isa => 'Int', request_name => 'segmentLength', traits => ['NameInRequest']);
  has SegmentLengthControl => (is => 'ro', isa => 'Str', request_name => 'segmentLengthControl', traits => ['NameInRequest']);
  has StreamInfResolution => (is => 'ro', isa => 'Str', request_name => 'streamInfResolution', traits => ['NameInRequest']);
  has TargetDurationCompatibilityMode => (is => 'ro', isa => 'Str', request_name => 'targetDurationCompatibilityMode', traits => ['NameInRequest']);
  has VideoCompositionOffsets => (is => 'ro', isa => 'Str', request_name => 'videoCompositionOffsets', traits => ['NameInRequest']);
  has WriteDashManifest => (is => 'ro', isa => 'Str', request_name => 'writeDashManifest', traits => ['NameInRequest']);
  has WriteHlsManifest => (is => 'ro', isa => 'Str', request_name => 'writeHlsManifest', traits => ['NameInRequest']);
  has WriteSegmentTimelineInRepresentation => (is => 'ro', isa => 'Str', request_name => 'writeSegmentTimelineInRepresentation', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::MediaConvert::CmafGroupSettings

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::MediaConvert::CmafGroupSettings object:

  $service_obj->Method(Att1 => { AdditionalManifests => $value, ..., WriteSegmentTimelineInRepresentation => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::MediaConvert::CmafGroupSettings object:

  $result = $service_obj->Method(...);
  $result->Att1->AdditionalManifests

=head1 DESCRIPTION

Settings related to your CMAF output package. For more information, see
https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html.

=head1 ATTRIBUTES


=head2 AdditionalManifests => ArrayRef[L<Paws::MediaConvert::CmafAdditionalManifest>]

By default, the service creates one top-level .m3u8 HLS manifest and
one top -level .mpd DASH manifest for each CMAF output group in your
job. These default manifests reference every output in the output
group. To create additional top-level manifests that reference a subset
of the outputs in the output group, specify a list of them here. For
each additional manifest that you specify, the service creates one HLS
manifest and one DASH manifest.


=head2 BaseUrl => Str

A partial URI prefix that will be put in the manifest file at the top
level BaseURL element. Can be used if streams are delivered from a
different URL than the manifest file.


=head2 ClientCache => Str

Disable this setting only when your workflow requires the

and control caching in your video distribution set up. For example, use
the Cache-Control http header.


=head2 CodecSpecification => Str

Specification to use (RFC-6381 or the default RFC-4281) during m3u8
playlist generation.


=head2 DashIFrameTrickPlayNameModifier => Str

Specify whether MediaConvert generates I-frame only video segments for
DASH trick play, also known as trick mode. When specified, the I-frame
only video segments are included within an additional AdaptationSet in
your DASH output manifest. To generate I-frame only video segments:
Enter a name as a text string, up to 256 character long. This name is
appended to the end of this output group's base filename, that you
specify as part of your destination URI, and used for the I-frame only
video segment files. You may also include format identifiers. For more
information, see:
https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html#using-settings-variables-with-streaming-outputs
To not generate I-frame only video segments: Leave blank.


=head2 DashManifestStyle => Str

Specify how MediaConvert writes SegmentTimeline in your output DASH
manifest. To write a SegmentTimeline in each video Representation: Keep
the default value, Basic. To write a common SegmentTimeline in the
video AdaptationSet: Choose Compact. Note that MediaConvert will still
write a SegmentTimeline in any Representation that does not share a
common timeline. To write a video AdaptationSet for each different
output framerate, and a common SegmentTimeline in each AdaptationSet:
Choose Distinct.


=head2 Destination => Str

Use Destination to specify the S3 output location and the output
filename base. Destination accepts format identifiers. If you do not
specify the base filename in the URI, the service will use the filename
of the input file. If your job has multiple inputs, the service uses
the filename of the first input file.


=head2 DestinationSettings => L<Paws::MediaConvert::DestinationSettings>

Settings associated with the destination. Will vary based on the type
of destination


=head2 Encryption => L<Paws::MediaConvert::CmafEncryptionSettings>

DRM settings.


=head2 FragmentLength => Int

Specify the length, in whole seconds, of the mp4 fragments. When you
don't specify a value, MediaConvert defaults to 2. Related setting: Use
Fragment length control to specify whether the encoder enforces this
value strictly.


=head2 ImageBasedTrickPlay => Str

Specify whether MediaConvert generates images for trick play. Keep the
default value, None, to not generate any images. Choose Thumbnail to
generate tiled thumbnails. Choose Thumbnail and full frame to generate
tiled thumbnails and full-resolution images of single frames. When you
enable Write HLS manifest, MediaConvert creates a child manifest for
each set of images that you generate and adds corresponding entries to
the parent manifest. When you enable Write DASH manifest, MediaConvert
adds an entry in the .mpd manifest for each set of images that you
generate. A common application for these images is Roku trick mode. The
thumbnails and full-frame images that MediaConvert creates with this
feature are compatible with this Roku specification:
https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md


=head2 ImageBasedTrickPlaySettings => L<Paws::MediaConvert::CmafImageBasedTrickPlaySettings>

Tile and thumbnail settings applicable when imageBasedTrickPlay is
ADVANCED


=head2 ManifestCompression => Str

When set to GZIP, compresses HLS playlist.


=head2 ManifestDurationFormat => Str

Indicates whether the output manifest should use floating point values
for segment duration.


=head2 MinBufferTime => Int

Minimum time of initially buffered media that is needed to ensure
smooth playout.


=head2 MinFinalSegmentLength => Num

Keep this setting at the default value of 0, unless you are
troubleshooting a problem with how devices play back the end of your
video asset. If you know that player devices are hanging on the final
segment of your video because the length of your final segment is too
short, use this setting to specify a minimum final segment length, in
seconds. Choose a value that is greater than or equal to 1 and less
than your segment length. When you specify a value for this setting,
the encoder will combine any final segment that is shorter than the
length that you specify with the previous segment. For example, your
segment length is 3 seconds and your final segment is .5 seconds
without a minimum final segment length; when you set the minimum final
segment length to 1, your final segment is 3.5 seconds.


=head2 MpdManifestBandwidthType => Str

Specify how the value for bandwidth is determined for each video
Representation in your output MPD manifest. We recommend that you
choose a MPD manifest bandwidth type that is compatible with your
downstream player configuration. Max: Use the same value that you
specify for Max bitrate in the video output, in bits per second.
Average: Use the calculated average bitrate of the encoded video
output, in bits per second.


=head2 MpdProfile => Str

Specify whether your DASH profile is on-demand or main. When you choose
Main profile, the service signals urn:mpeg:dash:profile:isoff-main:2011
in your .mpd DASH manifest. When you choose On-demand, the service
signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When
you choose On-demand, you must also set the output group setting
Segment control to Single file.


=head2 PtsOffsetHandlingForBFrames => Str

Use this setting only when your output video stream has B-frames, which
causes the initial presentation time stamp (PTS) to be offset from the
initial decode time stamp (DTS). Specify how MediaConvert handles PTS
when writing time stamps in output DASH manifests. Choose Match initial
PTS when you want MediaConvert to use the initial PTS as the first time
stamp in the manifest. Choose Zero-based to have MediaConvert ignore
the initial PTS in the video stream and instead write the initial time
stamp as zero in the manifest. For outputs that don't have B-frames,
the time stamps in your DASH manifests start at zero regardless of your
choice here.


=head2 SegmentControl => Str

When set to SINGLE_FILE, a single output file is generated, which is
internally segmented using the Fragment Length and Segment Length. When
set to SEGMENTED_FILES, separate segment files will be created.


=head2 SegmentLength => Int

Specify the length, in whole seconds, of each segment. When you don't
specify a value, MediaConvert defaults to 10. Related settings: Use
Segment length control to specify whether the encoder enforces this
value strictly. Use Segment control to specify whether MediaConvert
creates separate segment files or one content file that has metadata to
mark the segment boundaries.


=head2 SegmentLengthControl => Str

Specify how you want MediaConvert to determine segment lengths in this
output group. To use the exact value that you specify under Segment
length: Choose Exact. Note that this might result in additional
I-frames in the output GOP. To create segment lengths that are a
multiple of the GOP: Choose Multiple of GOP. MediaConvert will round up
the segment lengths to match the next GOP boundary. To have
MediaConvert automatically determine a segment duration that is a
multiple of both the audio packets and the frame rates: Choose Match.
When you do, also specify a target segment duration under Segment
length. This is useful for some ad-insertion or segment replacement
workflows. Note that Match has the following requirements: - Output
containers: Include at least one video output and at least one audio
output. Audio-only outputs are not supported. - Output frame rate:
Follow source is not supported. - Multiple output frame rates: When you
specify multiple outputs, we recommend they share a similar frame rate
(as in X/3, X/2, X, or 2X). For example: 5, 15, 30 and 60. Or: 25 and
50. (Outputs must share an integer multiple.) - Output audio codec:
Specify Advanced Audio Coding (AAC). - Output sample rate: Choose
48kHz.


=head2 StreamInfResolution => Str

Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF
tag of variant manifest.


=head2 TargetDurationCompatibilityMode => Str

When set to LEGACY, the segment target duration is always rounded up to
the nearest integer value above its current value in seconds. When set
to SPEC\\_COMPLIANT, the segment target duration is rounded up to the
nearest integer value if fraction seconds are greater than or equal to
0.5 (E<gt>= 0.5) and rounded down if less than 0.5 (E<lt> 0.5). You may
need to use LEGACY if your client needs to ensure that the target
duration is always longer than the actual duration of the segment. Some
older players may experience interrupted playback when the actual
duration of a track in a segment is longer than the target duration.


=head2 VideoCompositionOffsets => Str

Specify the video sample composition time offset mode in the output
fMP4 TRUN box. For wider player compatibility, set Video composition
offsets to Unsigned or leave blank. The earliest presentation time may
be greater than zero, and sample composition time offsets will
increment using unsigned integers. For strict fMP4 video and audio
timing, set Video composition offsets to Signed. The earliest
presentation time will be equal to zero, and sample composition time
offsets will increment using signed integers.


=head2 WriteDashManifest => Str

When set to ENABLED, a DASH MPD manifest will be generated for this
output.


=head2 WriteHlsManifest => Str

When set to ENABLED, an Apple HLS manifest will be generated for this
output.


=head2 WriteSegmentTimelineInRepresentation => Str

When you enable Precise segment duration in DASH manifests, your DASH
manifest shows precise segment durations. The segment duration
information appears inside the SegmentTimeline element, inside
SegmentTemplate at the Representation level. When this feature isn't
enabled, the segment durations in your DASH manifest are approximate.
The segment duration information appears in the duration attribute of
the SegmentTemplate element.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::MediaConvert>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

