# Generated by default/object.tt
package Paws::MediaConvert::FileSourceSettings;
  use Moose;
  has ByteRateLimit => (is => 'ro', isa => 'Str', request_name => 'byteRateLimit', traits => ['NameInRequest']);
  has Convert608To708 => (is => 'ro', isa => 'Str', request_name => 'convert608To708', traits => ['NameInRequest']);
  has ConvertPaintToPop => (is => 'ro', isa => 'Str', request_name => 'convertPaintToPop', traits => ['NameInRequest']);
  has Framerate => (is => 'ro', isa => 'Paws::MediaConvert::CaptionSourceFramerate', request_name => 'framerate', traits => ['NameInRequest']);
  has SourceFile => (is => 'ro', isa => 'Str', request_name => 'sourceFile', traits => ['NameInRequest']);
  has TimeDelta => (is => 'ro', isa => 'Int', request_name => 'timeDelta', traits => ['NameInRequest']);
  has TimeDeltaUnits => (is => 'ro', isa => 'Str', request_name => 'timeDeltaUnits', traits => ['NameInRequest']);
  has UpconvertSTLToTeletext => (is => 'ro', isa => 'Str', request_name => 'upconvertSTLToTeletext', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::MediaConvert::FileSourceSettings

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::MediaConvert::FileSourceSettings object:

  $service_obj->Method(Att1 => { ByteRateLimit => $value, ..., UpconvertSTLToTeletext => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::MediaConvert::FileSourceSettings object:

  $result = $service_obj->Method(...);
  $result->Att1->ByteRateLimit

=head1 DESCRIPTION

If your input captions are SCC, SMI, SRT, STL, TTML, WebVTT, or IMSC
1.1 in an xml file, specify the URI of the input caption source file.
If your caption source is IMSC in an IMF package, use
TrackSourceSettings instead of FileSoureSettings.

=head1 ATTRIBUTES


=head2 ByteRateLimit => Str

Choose whether to limit the byte rate at which your SCC input captions
are inserted into your output. To not limit the caption rate: We
recommend that you keep the default value, Disabled. MediaConvert
inserts captions in your output according to the byte rates listed in
the EIA-608 specification, typically 2 or 3 caption bytes per frame
depending on your output frame rate. To limit your output caption rate:
Choose Enabled. Choose this option if your downstream systems require a
maximum of 2 caption bytes per frame. Note that this setting has no
effect when your output frame rate is 30 or 60.


=head2 Convert608To708 => Str

Specify whether this set of input captions appears in your outputs in
both 608 and 708 format. If you choose Upconvert, MediaConvert includes
the captions data in two ways: it passes the 608 data through using the
608 compatibility bytes fields of the 708 wrapper, and it also
translates the 608 data into 708.


=head2 ConvertPaintToPop => Str

Choose the presentation style of your input SCC captions. To use the
same presentation style as your input: Keep the default value,
Disabled. To convert paint-on captions to pop-on: Choose Enabled. We
also recommend that you choose Enabled if you notice additional
repeated lines in your output captions.


=head2 Framerate => L<Paws::MediaConvert::CaptionSourceFramerate>

Ignore this setting unless your input captions format is SCC. To have
the service compensate for differing frame rates between your input
captions and input video, specify the frame rate of the captions file.
Specify this value as a fraction. For example, you might specify 24 / 1
for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 /
1001 for 29.97 fps.


=head2 SourceFile => Str

External caption file used for loading captions. Accepted file
extensions are 'scc', 'ttml', 'dfxp', 'stl', 'srt', 'xml', 'smi',
'webvtt', and 'vtt'.


=head2 TimeDelta => Int

Optional. Use this setting when you need to adjust the sync between
your sidecar captions and your video. For more information, see
https://docs.aws.amazon.com/mediaconvert/latest/ug/time-delta-use-cases.html.
Enter a positive or negative number to modify the times in the captions
file. For example, type 15 to add 15 seconds to all the times in the
captions file. Type -5 to subtract 5 seconds from the times in the
captions file. You can optionally specify your time delta in
milliseconds instead of seconds. When you do so, set the related
setting, Time delta units to Milliseconds. Note that, when you specify
a time delta for timecode-based caption sources, such as SCC and STL,
and your time delta isn't a multiple of the input frame rate,
MediaConvert snaps the captions to the nearest frame. For example, when
your input video frame rate is 25 fps and you specify 1010ms for time
delta, MediaConvert delays your captions by 1000 ms.


=head2 TimeDeltaUnits => Str

When you use the setting Time delta to adjust the sync between your
sidecar captions and your video, use this setting to specify the units
for the delta that you specify. When you don't specify a value for Time
delta units, MediaConvert uses seconds by default.


=head2 UpconvertSTLToTeletext => Str

Specify whether this set of input captions appears in your outputs in
both STL and Teletext format. If you choose Upconvert, MediaConvert
includes the captions data in two ways: it passes the STL data through
using the Teletext compatibility bytes fields of the Teletext wrapper,
and it also translates the STL data into Teletext.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::MediaConvert>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

