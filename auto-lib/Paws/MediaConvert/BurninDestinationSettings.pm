# Generated by default/object.tt
package Paws::MediaConvert::BurninDestinationSettings;
  use Moose;
  has Alignment => (is => 'ro', isa => 'Str', request_name => 'alignment', traits => ['NameInRequest']);
  has ApplyFontColor => (is => 'ro', isa => 'Str', request_name => 'applyFontColor', traits => ['NameInRequest']);
  has BackgroundColor => (is => 'ro', isa => 'Str', request_name => 'backgroundColor', traits => ['NameInRequest']);
  has BackgroundOpacity => (is => 'ro', isa => 'Int', request_name => 'backgroundOpacity', traits => ['NameInRequest']);
  has FallbackFont => (is => 'ro', isa => 'Str', request_name => 'fallbackFont', traits => ['NameInRequest']);
  has FontColor => (is => 'ro', isa => 'Str', request_name => 'fontColor', traits => ['NameInRequest']);
  has FontFileBold => (is => 'ro', isa => 'Str', request_name => 'fontFileBold', traits => ['NameInRequest']);
  has FontFileBoldItalic => (is => 'ro', isa => 'Str', request_name => 'fontFileBoldItalic', traits => ['NameInRequest']);
  has FontFileItalic => (is => 'ro', isa => 'Str', request_name => 'fontFileItalic', traits => ['NameInRequest']);
  has FontFileRegular => (is => 'ro', isa => 'Str', request_name => 'fontFileRegular', traits => ['NameInRequest']);
  has FontOpacity => (is => 'ro', isa => 'Int', request_name => 'fontOpacity', traits => ['NameInRequest']);
  has FontResolution => (is => 'ro', isa => 'Int', request_name => 'fontResolution', traits => ['NameInRequest']);
  has FontScript => (is => 'ro', isa => 'Str', request_name => 'fontScript', traits => ['NameInRequest']);
  has FontSize => (is => 'ro', isa => 'Int', request_name => 'fontSize', traits => ['NameInRequest']);
  has HexFontColor => (is => 'ro', isa => 'Str', request_name => 'hexFontColor', traits => ['NameInRequest']);
  has OutlineColor => (is => 'ro', isa => 'Str', request_name => 'outlineColor', traits => ['NameInRequest']);
  has OutlineSize => (is => 'ro', isa => 'Int', request_name => 'outlineSize', traits => ['NameInRequest']);
  has RemoveRubyReserveAttributes => (is => 'ro', isa => 'Str', request_name => 'removeRubyReserveAttributes', traits => ['NameInRequest']);
  has ShadowColor => (is => 'ro', isa => 'Str', request_name => 'shadowColor', traits => ['NameInRequest']);
  has ShadowOpacity => (is => 'ro', isa => 'Int', request_name => 'shadowOpacity', traits => ['NameInRequest']);
  has ShadowXOffset => (is => 'ro', isa => 'Int', request_name => 'shadowXOffset', traits => ['NameInRequest']);
  has ShadowYOffset => (is => 'ro', isa => 'Int', request_name => 'shadowYOffset', traits => ['NameInRequest']);
  has StylePassthrough => (is => 'ro', isa => 'Str', request_name => 'stylePassthrough', traits => ['NameInRequest']);
  has TeletextSpacing => (is => 'ro', isa => 'Str', request_name => 'teletextSpacing', traits => ['NameInRequest']);
  has XPosition => (is => 'ro', isa => 'Int', request_name => 'xPosition', traits => ['NameInRequest']);
  has YPosition => (is => 'ro', isa => 'Int', request_name => 'yPosition', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::MediaConvert::BurninDestinationSettings

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::MediaConvert::BurninDestinationSettings object:

  $service_obj->Method(Att1 => { Alignment => $value, ..., YPosition => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::MediaConvert::BurninDestinationSettings object:

  $result = $service_obj->Method(...);
  $result->Att1->Alignment

=head1 DESCRIPTION

Burn-in is a captions delivery method, rather than a captions format.
Burn-in writes the captions directly on your video frames, replacing
pixels of video content with the captions. Set up burn-in captions in
the same output as your video. For more information, see
https://docs.aws.amazon.com/mediaconvert/latest/ug/burn-in-output-captions.html.

=head1 ATTRIBUTES


=head2 Alignment => Str

Specify the alignment of your captions. If no explicit x_position is
provided, setting alignment to centered will placethe captions at the
bottom center of the output. Similarly, setting a left alignment
willalign captions to the bottom left of the output. If x and y
positions are given in conjunction with the alignment parameter, the
font will be justified (either left or centered) relative to those
coordinates.


=head2 ApplyFontColor => Str

Ignore this setting unless Style passthrough is set to Enabled and Font
color set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font
color for additional font color controls. When you choose White text
only, or leave blank, your font color setting only applies to white
text in your input captions. For example, if your font color setting is
Yellow, and your input captions have red and white text, your output
captions will have red and yellow text. When you choose ALL_TEXT, your
font color setting applies to all of your output captions text.


=head2 BackgroundColor => Str

Specify the color of the rectangle behind the captions. Leave
background color blank and set Style passthrough to enabled to use the
background color data from your input captions, if present.


=head2 BackgroundOpacity => Int

Specify the opacity of the background rectangle. Enter a value from 0
to 255, where 0 is transparent and 255 is opaque. If Style passthrough
is set to enabled, leave blank to pass through the background style
information in your input captions to your output captions. If Style
passthrough is set to disabled, leave blank to use a value of 0 and
remove all backgrounds from your output captions.


=head2 FallbackFont => Str

Specify the font that you want the service to use for your burn in
captions when your input captions specify a font that MediaConvert
doesn't support. When you set Fallback font to best match, or leave
blank, MediaConvert uses a supported font that most closely matches the
font that your input captions specify. When there are multiple
unsupported fonts in your input captions, MediaConvert matches each
font with the supported font that matches best. When you explicitly
choose a replacement font, MediaConvert uses that font to replace all
unsupported fonts from your input.


=head2 FontColor => Str

Specify the color of the burned-in captions text. Leave Font color
blank and set Style passthrough to enabled to use the font color data
from your input captions, if present.


=head2 FontFileBold => Str

Specify a bold TrueType font file to use when rendering your output
captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also
separately specify a regular, an italic, and a bold italic font file.


=head2 FontFileBoldItalic => Str

Specify a bold italic TrueType font file to use when rendering your
output captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must
also separately specify a regular, a bold, and an italic font file.


=head2 FontFileItalic => Str

Specify an italic TrueType font file to use when rendering your output
captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also
separately specify a regular, a bold, and a bold italic font file.


=head2 FontFileRegular => Str

Specify a regular TrueType font file to use when rendering your output
captions. Enter an S3, HTTP, or HTTPS URL. When you do, you must also
separately specify a bold, an italic, and a bold italic font file.


=head2 FontOpacity => Int

Specify the opacity of the burned-in captions. 255 is opaque; 0 is
transparent.


=head2 FontResolution => Int

Specify the Font resolution in DPI (dots per inch).


=head2 FontScript => Str

Set Font script to Automatically determined, or leave blank, to
automatically determine the font script in your input captions.
Otherwise, set to Simplified Chinese (HANS) or Traditional Chinese
(HANT) if your input font script uses Simplified or Traditional
Chinese.


=head2 FontSize => Int

Specify the Font size in pixels. Must be a positive integer. Set to 0,
or leave blank, for automatic font size.


=head2 HexFontColor => Str

Ignore this setting unless your Font color is set to Hex. Enter either
six or eight hexidecimal digits, representing red, green, and blue,
with two optional extra digits for alpha. For example a value of
1122AABB is a red value of 0x11, a green value of 0x22, a blue value of
0xAA, and an alpha value of 0xBB.


=head2 OutlineColor => Str

Specify font outline color. Leave Outline color blank and set Style
passthrough to enabled to use the font outline color data from your
input captions, if present.


=head2 OutlineSize => Int

Specify the Outline size of the caption text, in pixels. Leave Outline
size blank and set Style passthrough to enabled to use the outline size
data from your input captions, if present.


=head2 RemoveRubyReserveAttributes => Str

Optionally remove any tts:rubyReserve attributes present in your input,
that do not have a tts:ruby attribute in the same element, from your
output. Use if your vertical Japanese output captions have alignment
issues. To remove ruby reserve attributes when present: Choose Enabled.
To not remove any ruby reserve attributes: Keep the default value,
Disabled.


=head2 ShadowColor => Str

Specify the color of the shadow cast by the captions. Leave Shadow
color blank and set Style passthrough to enabled to use the shadow
color data from your input captions, if present.


=head2 ShadowOpacity => Int

Specify the opacity of the shadow. Enter a value from 0 to 255, where 0
is transparent and 255 is opaque. If Style passthrough is set to
Enabled, leave Shadow opacity blank to pass through the shadow style
information in your input captions to your output captions. If Style
passthrough is set to disabled, leave blank to use a value of 0 and
remove all shadows from your output captions.


=head2 ShadowXOffset => Int

Specify the horizontal offset of the shadow, relative to the captions
in pixels. A value of -2 would result in a shadow offset 2 pixels to
the left.


=head2 ShadowYOffset => Int

Specify the vertical offset of the shadow relative to the captions in
pixels. A value of -2 would result in a shadow offset 2 pixels above
the text. Leave Shadow y-offset blank and set Style passthrough to
enabled to use the shadow y-offset data from your input captions, if
present.


=head2 StylePassthrough => Str

To use the available style, color, and position information from your
input captions: Set Style passthrough to Enabled. Note that
MediaConvert uses default settings for any missing style or position
information in your input captions To ignore the style and position
information from your input captions and use default settings: Leave
blank or keep the default value, Disabled. Default settings include
white text with black outlining, bottom-center positioning, and
automatic sizing. Whether you set Style passthrough to enabled or not,
you can also choose to manually override any of the individual style
and position settings. You can also override any fonts by manually
specifying custom font files.


=head2 TeletextSpacing => Str

Specify whether the text spacing in your captions is set by the
captions grid, or varies depending on letter width. Choose fixed grid
to conform to the spacing specified in the captions file more
accurately. Choose proportional to make the text easier to read for
closed captions.


=head2 XPosition => Int

Specify the horizontal position of the captions, relative to the left
side of the output in pixels. A value of 10 would result in the
captions starting 10 pixels from the left of the output. If no explicit
x_position is provided, the horizontal caption position will be
determined by the alignment parameter.


=head2 YPosition => Int

Specify the vertical position of the captions, relative to the top of
the output in pixels. A value of 10 would result in the captions
starting 10 pixels from the top of the output. If no explicit
y_position is provided, the caption will be positioned towards the
bottom of the output.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::MediaConvert>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

