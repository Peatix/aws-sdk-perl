# Generated by default/object.tt
package Paws::MediaConvert::InputTemplate;
  use Moose;
  has AdvancedInputFilter => (is => 'ro', isa => 'Str', request_name => 'advancedInputFilter', traits => ['NameInRequest']);
  has AdvancedInputFilterSettings => (is => 'ro', isa => 'Paws::MediaConvert::AdvancedInputFilterSettings', request_name => 'advancedInputFilterSettings', traits => ['NameInRequest']);
  has AudioSelectorGroups => (is => 'ro', isa => 'Paws::MediaConvert::__mapOfAudioSelectorGroup', request_name => 'audioSelectorGroups', traits => ['NameInRequest']);
  has AudioSelectors => (is => 'ro', isa => 'Paws::MediaConvert::__mapOfAudioSelector', request_name => 'audioSelectors', traits => ['NameInRequest']);
  has CaptionSelectors => (is => 'ro', isa => 'Paws::MediaConvert::__mapOfCaptionSelector', request_name => 'captionSelectors', traits => ['NameInRequest']);
  has Crop => (is => 'ro', isa => 'Paws::MediaConvert::Rectangle', request_name => 'crop', traits => ['NameInRequest']);
  has DeblockFilter => (is => 'ro', isa => 'Str', request_name => 'deblockFilter', traits => ['NameInRequest']);
  has DenoiseFilter => (is => 'ro', isa => 'Str', request_name => 'denoiseFilter', traits => ['NameInRequest']);
  has DolbyVisionMetadataXml => (is => 'ro', isa => 'Str', request_name => 'dolbyVisionMetadataXml', traits => ['NameInRequest']);
  has DynamicAudioSelectors => (is => 'ro', isa => 'Paws::MediaConvert::__mapOfDynamicAudioSelector', request_name => 'dynamicAudioSelectors', traits => ['NameInRequest']);
  has FilterEnable => (is => 'ro', isa => 'Str', request_name => 'filterEnable', traits => ['NameInRequest']);
  has FilterStrength => (is => 'ro', isa => 'Int', request_name => 'filterStrength', traits => ['NameInRequest']);
  has ImageInserter => (is => 'ro', isa => 'Paws::MediaConvert::ImageInserter', request_name => 'imageInserter', traits => ['NameInRequest']);
  has InputClippings => (is => 'ro', isa => 'ArrayRef[Paws::MediaConvert::InputClipping]', request_name => 'inputClippings', traits => ['NameInRequest']);
  has InputScanType => (is => 'ro', isa => 'Str', request_name => 'inputScanType', traits => ['NameInRequest']);
  has Position => (is => 'ro', isa => 'Paws::MediaConvert::Rectangle', request_name => 'position', traits => ['NameInRequest']);
  has ProgramNumber => (is => 'ro', isa => 'Int', request_name => 'programNumber', traits => ['NameInRequest']);
  has PsiControl => (is => 'ro', isa => 'Str', request_name => 'psiControl', traits => ['NameInRequest']);
  has TimecodeSource => (is => 'ro', isa => 'Str', request_name => 'timecodeSource', traits => ['NameInRequest']);
  has TimecodeStart => (is => 'ro', isa => 'Str', request_name => 'timecodeStart', traits => ['NameInRequest']);
  has VideoOverlays => (is => 'ro', isa => 'ArrayRef[Paws::MediaConvert::VideoOverlay]', request_name => 'videoOverlays', traits => ['NameInRequest']);
  has VideoSelector => (is => 'ro', isa => 'Paws::MediaConvert::VideoSelector', request_name => 'videoSelector', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::MediaConvert::InputTemplate

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::MediaConvert::InputTemplate object:

  $service_obj->Method(Att1 => { AdvancedInputFilter => $value, ..., VideoSelector => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::MediaConvert::InputTemplate object:

  $result = $service_obj->Method(...);
  $result->Att1->AdvancedInputFilter

=head1 DESCRIPTION

Specified video input in a template.

=head1 ATTRIBUTES


=head2 AdvancedInputFilter => Str

Use to remove noise, blocking, blurriness, or ringing from your input
as a pre-filter step before encoding. The Advanced input filter removes
more types of compression artifacts and is an improvement when compared
to basic Deblock and Denoise filters. To remove video compression
artifacts from your input and improve the video quality: Choose
Enabled. Additionally, this filter can help increase the video quality
of your output relative to its bitrate, since noisy inputs are more
complex and require more bits to encode. To help restore loss of detail
after applying the filter, you can optionally add texture or sharpening
as an additional step. Jobs that use this feature incur pro-tier
pricing. To not apply advanced input filtering: Choose Disabled. Note
that you can still apply basic filtering with Deblock and Denoise.


=head2 AdvancedInputFilterSettings => L<Paws::MediaConvert::AdvancedInputFilterSettings>

Optional settings for Advanced input filter when you set Advanced input
filter to Enabled.


=head2 AudioSelectorGroups => L<Paws::MediaConvert::__mapOfAudioSelectorGroup>

Use audio selector groups to combine multiple sidecar audio inputs so
that you can assign them to a single output audio tab. Note that, if
you're working with embedded audio, it's simpler to assign multiple
input tracks into a single audio selector rather than use an audio
selector group.


=head2 AudioSelectors => L<Paws::MediaConvert::__mapOfAudioSelector>

Use Audio selectors to specify a track or set of tracks from the input
that you will use in your outputs. You can use multiple Audio selectors
per input.


=head2 CaptionSelectors => L<Paws::MediaConvert::__mapOfCaptionSelector>

Use captions selectors to specify the captions data from your input
that you use in your outputs. You can use up to 100 captions selectors
per input.


=head2 Crop => L<Paws::MediaConvert::Rectangle>

Use Cropping selection to specify the video area that the service will
include in the output video frame. If you specify a value here, it will
override any value that you specify in the output setting Cropping
selection.


=head2 DeblockFilter => Str

Enable Deblock to produce smoother motion in the output. Default is
disabled. Only manually controllable for MPEG2 and uncompressed video
inputs.


=head2 DenoiseFilter => Str

Enable Denoise to filter noise from the input. Default is disabled.
Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.


=head2 DolbyVisionMetadataXml => Str

Use this setting only when your video source has Dolby Vision studio
mastering metadata that is carried in a separate XML file. Specify the
Amazon S3 location for the metadata XML file. MediaConvert uses this
file to provide global and frame-level metadata for Dolby Vision
preprocessing. When you specify a file here and your input also has
interleaved global and frame level metadata, MediaConvert ignores the
interleaved metadata and uses only the the metadata from this external
XML file. Note that your IAM service role must grant MediaConvert read
permissions to this file. For more information, see
https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.


=head2 DynamicAudioSelectors => L<Paws::MediaConvert::__mapOfDynamicAudioSelector>

Use Dynamic audio selectors when you do not know the track layout of
your source when you submit your job, but want to select multiple audio
tracks. When you include an audio track in your output and specify this
Dynamic audio selector as the Audio source, MediaConvert creates an
output audio track for each dynamically selected track. Note that when
you include a Dynamic audio selector for two or more inputs, each input
must have the same number of audio tracks and audio channels.


=head2 FilterEnable => Str

Specify whether to apply input filtering to improve the video quality
of your input. To apply filtering depending on your input type and
quality: Choose Auto. To apply no filtering: Choose Disable. To apply
filtering regardless of your input type and quality: Choose Force. When
you do, you must also specify a value for Filter strength.


=head2 FilterStrength => Int

Specify the strength of the input filter. To apply an automatic amount
of filtering based the compression artifacts measured in your input: We
recommend that you leave Filter strength blank and set Filter enable to
Auto. To manually apply filtering: Enter a value from 1 to 5, where 1
is the least amount of filtering and 5 is the most. The value that you
enter applies to the strength of the Deblock or Denoise filters, or to
the strength of the Advanced input filter.


=head2 ImageInserter => L<Paws::MediaConvert::ImageInserter>

Enable the image inserter feature to include a graphic overlay on your
video. Enable or disable this feature for each input individually. This
setting is disabled by default.


=head2 InputClippings => ArrayRef[L<Paws::MediaConvert::InputClipping>]

Contains sets of start and end times that together specify a portion of
the input to be used in the outputs. If you provide only a start time,
the clip will be the entire input from that point to the end. If you
provide only an end time, it will be the entire input up to that point.
When you specify more than one input clip, the transcoding service
creates the job outputs by stringing the clips together in the order
you specify them.


=head2 InputScanType => Str

When you have a progressive segmented frame (PsF) input, use this
setting to flag the input as PsF. MediaConvert doesn't automatically
detect PsF. Therefore, flagging your input as PsF results in better
preservation of video quality when you do deinterlacing and frame rate
conversion. If you don't specify, the default value is Auto. Auto is
the correct setting for all inputs that are not PsF. Don't set this
value to PsF when your input is interlaced. Doing so creates horizontal
interlacing artifacts.


=head2 Position => L<Paws::MediaConvert::Rectangle>

Use Selection placement to define the video area in your output frame.
The area outside of the rectangle that you specify here is black. If
you specify a value here, it will override any value that you specify
in the output setting Selection placement. If you specify a value here,
this will override any AFD values in your input, even if you set
Respond to AFD to Respond. If you specify a value here, this will
ignore anything that you specify for the setting Scaling Behavior.


=head2 ProgramNumber => Int

Use Program to select a specific program from within a multi-program
transport stream. Note that Quad 4K is not currently supported. Default
is the first program within the transport stream. If the program you
specify doesn't exist, the transcoding service will use this default.


=head2 PsiControl => Str

Set PSI control for transport stream inputs to specify which data the
demux process to scans. * Ignore PSI - Scan all PIDs for audio and
video. * Use PSI - Scan only PSI data.


=head2 TimecodeSource => Str

Use this Timecode source setting, located under the input settings, to
specify how the service counts input video frames. This input frame
count affects only the behavior of features that apply to a single
input at a time, such as input clipping and synchronizing some captions
formats. Choose Embedded to use the timecodes in your input video.
Choose Start at zero to start the first frame at zero. Choose Specified
start to start the first frame at the timecode that you specify in the
setting Start timecode. If you don't specify a value for Timecode
source, the service will use Embedded by default. For more information
about timecodes, see
https://docs.aws.amazon.com/console/mediaconvert/timecode.


=head2 TimecodeStart => Str

Specify the timecode that you want the service to use for this input's
initial frame. To use this setting, you must set the Timecode source
setting, located under the input settings, to Specified start. For more
information about timecodes, see
https://docs.aws.amazon.com/console/mediaconvert/timecode.


=head2 VideoOverlays => ArrayRef[L<Paws::MediaConvert::VideoOverlay>]

Contains an array of video overlays.


=head2 VideoSelector => L<Paws::MediaConvert::VideoSelector>

Input video selectors contain the video settings for the input. Each of
your inputs can have up to one video selector.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::MediaConvert>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

