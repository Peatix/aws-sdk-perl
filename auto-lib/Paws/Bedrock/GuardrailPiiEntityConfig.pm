# Generated by default/object.tt
package Paws::Bedrock::GuardrailPiiEntityConfig;
  use Moose;
  has Action => (is => 'ro', isa => 'Str', request_name => 'action', traits => ['NameInRequest'], required => 1);
  has InputAction => (is => 'ro', isa => 'Str', request_name => 'inputAction', traits => ['NameInRequest']);
  has InputEnabled => (is => 'ro', isa => 'Bool', request_name => 'inputEnabled', traits => ['NameInRequest']);
  has OutputAction => (is => 'ro', isa => 'Str', request_name => 'outputAction', traits => ['NameInRequest']);
  has OutputEnabled => (is => 'ro', isa => 'Bool', request_name => 'outputEnabled', traits => ['NameInRequest']);
  has Type => (is => 'ro', isa => 'Str', request_name => 'type', traits => ['NameInRequest'], required => 1);

1;

### main pod documentation begin ###

=head1 NAME

Paws::Bedrock::GuardrailPiiEntityConfig

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Bedrock::GuardrailPiiEntityConfig object:

  $service_obj->Method(Att1 => { Action => $value, ..., Type => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Bedrock::GuardrailPiiEntityConfig object:

  $result = $service_obj->Method(...);
  $result->Att1->Action

=head1 DESCRIPTION

The PII entity to configure for the guardrail.

=head1 ATTRIBUTES


=head2 B<REQUIRED> Action => Str

Configure guardrail action when the PII entity is detected.


=head2 InputAction => Str

Specifies the action to take when harmful content is detected in the
input. Supported values include:

=over

=item *

C<BLOCK> E<ndash> Block the content and replace it with blocked
messaging.

=item *

C<ANONYMIZE> E<ndash> Mask the content and replace it with identifier
tags.

=item *

C<NONE> E<ndash> Take no action but return detection information in the
trace response.

=back



=head2 InputEnabled => Bool

Specifies whether to enable guardrail evaluation on the input. When
disabled, you aren't charged for the evaluation. The evaluation doesn't
appear in the response.


=head2 OutputAction => Str

Specifies the action to take when harmful content is detected in the
output. Supported values include:

=over

=item *

C<BLOCK> E<ndash> Block the content and replace it with blocked
messaging.

=item *

C<ANONYMIZE> E<ndash> Mask the content and replace it with identifier
tags.

=item *

C<NONE> E<ndash> Take no action but return detection information in the
trace response.

=back



=head2 OutputEnabled => Bool

Specifies whether to enable guardrail evaluation on the output. When
disabled, you aren't charged for the evaluation. The evaluation doesn't
appear in the response.


=head2 B<REQUIRED> Type => Str

Configure guardrail type when the PII entity is detected.

The following PIIs are used to block or mask sensitive information:

=over

=item *

B<General>

=over

=item *

B<ADDRESS>

A physical address, such as "100 Main Street, Anytown, USA" or "Suite

street, building, location, city, state, country, county, zip code,
precinct, and neighborhood.

=item *

B<AGE>

An individual's age, including the quantity and unit of time. For
example, in the phrase "I am 40 years old," Guardrails recognizes "40
years" as an age.

=item *

B<NAME>

An individual's name. This entity type does not include titles, such as
Dr., Mr., Mrs., or Miss. guardrails doesn't apply this entity type to
names that are part of organizations or addresses. For example,
guardrails recognizes the "John Doe Organization" as an organization,
and it recognizes "Jane Doe Street" as an address.

=item *

B<EMAIL>

An email address, such as I<marymajor@email.com>.

=item *

B<PHONE>

A phone number. This entity type also includes fax and pager numbers.

=item *

B<USERNAME>

A user name that identifies an account, such as a login name, screen
name, nick name, or handle.

=item *

B<PASSWORD>

An alphanumeric string that is used as a password, such as
"*I<very20special#pass*>".

=item *

B<DRIVER_ID>

The number assigned to a driver's license, which is an official
document permitting an individual to operate one or more motorized
vehicles on a public road. A driver's license number consists of
alphanumeric characters.

=item *

B<LICENSE_PLATE>

A license plate for a vehicle is issued by the state or country where
the vehicle is registered. The format for passenger vehicles is
typically five to eight digits, consisting of upper-case letters and
numbers. The format varies depending on the location of the issuing
state or country.

=item *

B<VEHICLE_IDENTIFICATION_NUMBER>

A Vehicle Identification Number (VIN) uniquely identifies a vehicle.
VIN content and format are defined in the I<ISO 3779> specification.
Each country has specific codes and formats for VINs.

=back

=item *

B<Finance>

=over

=item *

B<CREDIT_DEBIT_CARD_CVV>

A three-digit card verification code (CVV) that is present on VISA,
MasterCard, and Discover credit and debit cards. For American Express
credit or debit cards, the CVV is a four-digit numeric code.

=item *

B<CREDIT_DEBIT_CARD_EXPIRY>

The expiration date for a credit or debit card. This number is usually
four digits long and is often formatted as I<month/year> or I<MM/YY>.
Guardrails recognizes expiration dates such as I<01/21>, I<01/2021>,
and I<Jan 2021>.

=item *

B<CREDIT_DEBIT_CARD_NUMBER>

The number for a credit or debit card. These numbers can vary from 13
to 16 digits in length. However, Amazon Comprehend also recognizes
credit or debit card numbers when only the last four digits are
present.

=item *

B<PIN>

A four-digit personal identification number (PIN) with which you can
access your bank account.

=item *

B<INTERNATIONAL_BANK_ACCOUNT_NUMBER>

An International Bank Account Number has specific formats in each
country. For more information, see www.iban.com/structure
(https://www.iban.com/structure).

=item *

B<SWIFT_CODE>

A SWIFT code is a standard format of Bank Identifier Code (BIC) used to
specify a particular bank or branch. Banks use these codes for money
transfers such as international wire transfers.

SWIFT codes consist of eight or 11 characters. The 11-digit codes refer
to specific branches, while eight-digit codes (or 11-digit codes ending
in 'XXX') refer to the head or primary office.

=back

=item *

B<IT>

=over

=item *

B<IP_ADDRESS>

An IPv4 address, such as I<198.51.100.0>.

=item *

B<MAC_ADDRESS>

A I<media access control> (MAC) address is a unique identifier assigned
to a network interface controller (NIC).

=item *

B<URL>

A web address, such as I<www.example.com>.

=item *

B<AWS_ACCESS_KEY>

A unique identifier that's associated with a secret access key; you use
the access key ID and secret access key to sign programmatic Amazon Web
Services requests cryptographically.

=item *

B<AWS_SECRET_KEY>

A unique identifier that's associated with an access key. You use the
access key ID and secret access key to sign programmatic Amazon Web
Services requests cryptographically.

=back

=item *

B<USA specific>

=over

=item *

B<US_BANK_ACCOUNT_NUMBER>

A US bank account number, which is typically 10 to 12 digits long.

=item *

B<US_BANK_ROUTING_NUMBER>

A US bank account routing number. These are typically nine digits long,

=item *

B<US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER>

A US Individual Taxpayer Identification Number (ITIN) is a nine-digit
number that starts with a "9" and contain a "7" or "8" as the fourth
digit. An ITIN can be formatted with a space or a dash after the third
and forth digits.

=item *

B<US_PASSPORT_NUMBER>

A US passport number. Passport numbers range from six to nine
alphanumeric characters.

=item *

B<US_SOCIAL_SECURITY_NUMBER>

A US Social Security Number (SSN) is a nine-digit number that is issued
to US citizens, permanent residents, and temporary working residents.

=back

=item *

B<Canada specific>

=over

=item *

B<CA_HEALTH_NUMBER>

A Canadian Health Service Number is a 10-digit unique identifier,
required for individuals to access healthcare benefits.

=item *

B<CA_SOCIAL_INSURANCE_NUMBER>

A Canadian Social Insurance Number (SIN) is a nine-digit unique
identifier, required for individuals to access government programs and
benefits.

The SIN is formatted as three groups of three digits, such as
I<123-456-789>. A SIN can be validated through a simple check-digit
process called the Luhn algorithm
(https://www.wikipedia.org/wiki/Luhn_algorithm).

=back

=item *

B<UK Specific>

=over

=item *

B<UK_NATIONAL_HEALTH_SERVICE_NUMBER>

A UK National Health Service Number is a 10-17 digit number, such as
I<485 777 3456>. The current system formats the 10-digit number with
spaces after the third and sixth digits. The final digit is an
error-detecting checksum.

=item *

B<UK_NATIONAL_INSURANCE_NUMBER>

A UK National Insurance Number (NINO) provides individuals with access
to National Insurance (social security) benefits. It is also used for
some purposes in the UK tax system.

The number is nine digits long and starts with two letters, followed by
six numbers and one letter. A NINO can be formatted with a space or a
dash after the two letters and after the second, forth, and sixth
digits.

=item *

B<UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER>

A UK Unique Taxpayer Reference (UTR) is a 10-digit number that
identifies a taxpayer or a business.

=back

=item *

B<Custom>

=over

=item *

B<Regex filter> - You can use a regular expressions to define patterns
for a guardrail to recognize and act upon such as serial number,
booking ID etc..

=back

=back




=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Bedrock>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

