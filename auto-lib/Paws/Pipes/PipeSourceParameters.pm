# Generated by default/object.tt
package Paws::Pipes::PipeSourceParameters;
  use Moose;
  has ActiveMQBrokerParameters => (is => 'ro', isa => 'Paws::Pipes::PipeSourceActiveMQBrokerParameters');
  has DynamoDBStreamParameters => (is => 'ro', isa => 'Paws::Pipes::PipeSourceDynamoDBStreamParameters');
  has FilterCriteria => (is => 'ro', isa => 'Paws::Pipes::FilterCriteria');
  has KinesisStreamParameters => (is => 'ro', isa => 'Paws::Pipes::PipeSourceKinesisStreamParameters');
  has ManagedStreamingKafkaParameters => (is => 'ro', isa => 'Paws::Pipes::PipeSourceManagedStreamingKafkaParameters');
  has RabbitMQBrokerParameters => (is => 'ro', isa => 'Paws::Pipes::PipeSourceRabbitMQBrokerParameters');
  has SelfManagedKafkaParameters => (is => 'ro', isa => 'Paws::Pipes::PipeSourceSelfManagedKafkaParameters');
  has SqsQueueParameters => (is => 'ro', isa => 'Paws::Pipes::PipeSourceSqsQueueParameters');

1;

### main pod documentation begin ###

=head1 NAME

Paws::Pipes::PipeSourceParameters

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Pipes::PipeSourceParameters object:

  $service_obj->Method(Att1 => { ActiveMQBrokerParameters => $value, ..., SqsQueueParameters => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Pipes::PipeSourceParameters object:

  $result = $service_obj->Method(...);
  $result->Att1->ActiveMQBrokerParameters

=head1 DESCRIPTION

The parameters required to set up a source for your pipe.

=head1 ATTRIBUTES


=head2 ActiveMQBrokerParameters => L<Paws::Pipes::PipeSourceActiveMQBrokerParameters>

The parameters for using an Active MQ broker as a source.


=head2 DynamoDBStreamParameters => L<Paws::Pipes::PipeSourceDynamoDBStreamParameters>

The parameters for using a DynamoDB stream as a source.


=head2 FilterCriteria => L<Paws::Pipes::FilterCriteria>

The collection of event patterns used to filter events.

To remove a filter, specify a C<FilterCriteria> object with an empty
array of C<Filter> objects.

For more information, see Events and Event Patterns
(https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html)
in the I<Amazon EventBridge User Guide>.


=head2 KinesisStreamParameters => L<Paws::Pipes::PipeSourceKinesisStreamParameters>

The parameters for using a Kinesis stream as a source.


=head2 ManagedStreamingKafkaParameters => L<Paws::Pipes::PipeSourceManagedStreamingKafkaParameters>

The parameters for using an MSK stream as a source.


=head2 RabbitMQBrokerParameters => L<Paws::Pipes::PipeSourceRabbitMQBrokerParameters>

The parameters for using a Rabbit MQ broker as a source.


=head2 SelfManagedKafkaParameters => L<Paws::Pipes::PipeSourceSelfManagedKafkaParameters>

The parameters for using a self-managed Apache Kafka stream as a
source.

A I<self managed> cluster refers to any Apache Kafka cluster not hosted
by Amazon Web Services. This includes both clusters you manage
yourself, as well as those hosted by a third-party provider, such as
Confluent Cloud (https://www.confluent.io/), CloudKarafka
(https://www.cloudkarafka.com/), or Redpanda (https://redpanda.com/).
For more information, see Apache Kafka streams as a source
(https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-kafka.html)
in the I<Amazon EventBridge User Guide>.


=head2 SqsQueueParameters => L<Paws::Pipes::PipeSourceSqsQueueParameters>

The parameters for using a Amazon SQS stream as a source.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Pipes>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

