# Generated by default/object.tt
package Paws::SupplyChain::DataLakeDatasetSchema;
  use Moose;
  has Fields => (is => 'ro', isa => 'ArrayRef[Paws::SupplyChain::DataLakeDatasetSchemaField]', request_name => 'fields', traits => ['NameInRequest'], required => 1);
  has Name => (is => 'ro', isa => 'Str', request_name => 'name', traits => ['NameInRequest'], required => 1);
  has PrimaryKeys => (is => 'ro', isa => 'ArrayRef[Paws::SupplyChain::DataLakeDatasetPrimaryKeyField]', request_name => 'primaryKeys', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::SupplyChain::DataLakeDatasetSchema

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::SupplyChain::DataLakeDatasetSchema object:

  $service_obj->Method(Att1 => { Fields => $value, ..., PrimaryKeys => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::SupplyChain::DataLakeDatasetSchema object:

  $result = $service_obj->Method(...);
  $result->Att1->Fields

=head1 DESCRIPTION

The schema details of the dataset. Note that for AWS Supply Chain
dataset under B<asc> namespace, it may have internal fields like
connection_id that will be auto populated by data ingestion methods.

=head1 ATTRIBUTES


=head2 B<REQUIRED> Fields => ArrayRef[L<Paws::SupplyChain::DataLakeDatasetSchemaField>]

The list of field details of the dataset schema.


=head2 B<REQUIRED> Name => Str

The name of the dataset schema.


=head2 PrimaryKeys => ArrayRef[L<Paws::SupplyChain::DataLakeDatasetPrimaryKeyField>]

The list of primary key fields for the dataset. Primary keys defined
can help data ingestion methods to ensure data uniqueness:
CreateDataIntegrationFlow's dedupe strategy will leverage primary keys
to perform records deduplication before write to dataset;
SendDataIntegrationEvent's UPSERT and DELETE can only work with dataset
with primary keys. For more details, refer to those data ingestion
documentations.

Note that defining primary keys does not necessarily mean the dataset
cannot have duplicate records, duplicate records can still be ingested
if CreateDataIntegrationFlow's dedupe disabled or through
SendDataIntegrationEvent's APPEND operation.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::SupplyChain>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

