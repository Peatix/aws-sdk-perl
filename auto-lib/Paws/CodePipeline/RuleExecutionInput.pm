# Generated by default/object.tt
package Paws::CodePipeline::RuleExecutionInput;
  use Moose;
  has Configuration => (is => 'ro', isa => 'Paws::CodePipeline::RuleConfigurationMap', request_name => 'configuration', traits => ['NameInRequest']);
  has InputArtifacts => (is => 'ro', isa => 'ArrayRef[Paws::CodePipeline::ArtifactDetail]', request_name => 'inputArtifacts', traits => ['NameInRequest']);
  has Region => (is => 'ro', isa => 'Str', request_name => 'region', traits => ['NameInRequest']);
  has ResolvedConfiguration => (is => 'ro', isa => 'Paws::CodePipeline::ResolvedRuleConfigurationMap', request_name => 'resolvedConfiguration', traits => ['NameInRequest']);
  has RoleArn => (is => 'ro', isa => 'Str', request_name => 'roleArn', traits => ['NameInRequest']);
  has RuleTypeId => (is => 'ro', isa => 'Paws::CodePipeline::RuleTypeId', request_name => 'ruleTypeId', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::CodePipeline::RuleExecutionInput

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::CodePipeline::RuleExecutionInput object:

  $service_obj->Method(Att1 => { Configuration => $value, ..., RuleTypeId => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::CodePipeline::RuleExecutionInput object:

  $result = $service_obj->Method(...);
  $result->Att1->Configuration

=head1 DESCRIPTION

Input information used for a rule execution.

=head1 ATTRIBUTES


=head2 Configuration => L<Paws::CodePipeline::RuleConfigurationMap>

Configuration data for a rule execution, such as the resolved values
for that run.


=head2 InputArtifacts => ArrayRef[L<Paws::CodePipeline::ArtifactDetail>]

Details of input artifacts of the rule that correspond to the rule
execution.


=head2 Region => Str

The Amazon Web Services Region for the rule, such as us-east-1.


=head2 ResolvedConfiguration => L<Paws::CodePipeline::ResolvedRuleConfigurationMap>

Configuration data for a rule execution with all variable references
replaced with their real values for the execution.


=head2 RoleArn => Str

The ARN of the IAM service role that performs the declared rule. This
is assumed through the roleArn for the pipeline.


=head2 RuleTypeId => L<Paws::CodePipeline::RuleTypeId>

The ID for the rule type, which is made up of the combined values for
category, owner, provider, and version. For more information about
conditions, see Stage conditions
(https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html).
For more information about rules, see the CodePipeline rule reference
(https://docs.aws.amazon.com/codepipeline/latest/userguide/rule-reference.html).



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::CodePipeline>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

