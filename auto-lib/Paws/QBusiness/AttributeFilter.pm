# Generated by default/object.tt
package Paws::QBusiness::AttributeFilter;
  use Moose;
  has AndAllFilters => (is => 'ro', isa => 'ArrayRef[Paws::QBusiness::AttributeFilter]', request_name => 'andAllFilters', traits => ['NameInRequest']);
  has ContainsAll => (is => 'ro', isa => 'Paws::QBusiness::DocumentAttribute', request_name => 'containsAll', traits => ['NameInRequest']);
  has ContainsAny => (is => 'ro', isa => 'Paws::QBusiness::DocumentAttribute', request_name => 'containsAny', traits => ['NameInRequest']);
  has EqualsTo => (is => 'ro', isa => 'Paws::QBusiness::DocumentAttribute', request_name => 'equalsTo', traits => ['NameInRequest']);
  has GreaterThan => (is => 'ro', isa => 'Paws::QBusiness::DocumentAttribute', request_name => 'greaterThan', traits => ['NameInRequest']);
  has GreaterThanOrEquals => (is => 'ro', isa => 'Paws::QBusiness::DocumentAttribute', request_name => 'greaterThanOrEquals', traits => ['NameInRequest']);
  has LessThan => (is => 'ro', isa => 'Paws::QBusiness::DocumentAttribute', request_name => 'lessThan', traits => ['NameInRequest']);
  has LessThanOrEquals => (is => 'ro', isa => 'Paws::QBusiness::DocumentAttribute', request_name => 'lessThanOrEquals', traits => ['NameInRequest']);
  has NotFilter => (is => 'ro', isa => 'Paws::QBusiness::AttributeFilter', request_name => 'notFilter', traits => ['NameInRequest']);
  has OrAllFilters => (is => 'ro', isa => 'ArrayRef[Paws::QBusiness::AttributeFilter]', request_name => 'orAllFilters', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::QBusiness::AttributeFilter

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::QBusiness::AttributeFilter object:

  $service_obj->Method(Att1 => { AndAllFilters => $value, ..., OrAllFilters => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::QBusiness::AttributeFilter object:

  $result = $service_obj->Method(...);
  $result->Att1->AndAllFilters

=head1 DESCRIPTION

Enables filtering of responses based on document attributes or metadata
fields.

=head1 ATTRIBUTES


=head2 AndAllFilters => ArrayRef[L<Paws::QBusiness::AttributeFilter>]

Performs a logical C<AND> operation on all supplied filters.


=head2 ContainsAll => L<Paws::QBusiness::DocumentAttribute>

Returns C<true> when a document contains all the specified document
attributes or metadata fields. Supported for the following document
attribute value types
(https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html):
C<stringListValue>.


=head2 ContainsAny => L<Paws::QBusiness::DocumentAttribute>

Returns C<true> when a document contains any of the specified document
attributes or metadata fields. Supported for the following document
attribute value types
(https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html):
C<stringListValue>.


=head2 EqualsTo => L<Paws::QBusiness::DocumentAttribute>

Performs an equals operation on two document attributes or metadata
fields. Supported for the following document attribute value types
(https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html):
C<dateValue>, C<longValue>, C<stringListValue> and C<stringValue>.


=head2 GreaterThan => L<Paws::QBusiness::DocumentAttribute>

Performs a greater than operation on two document attributes or
metadata fields. Supported for the following document attribute value
types
(https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html):
C<dateValue> and C<longValue>.


=head2 GreaterThanOrEquals => L<Paws::QBusiness::DocumentAttribute>

Performs a greater or equals than operation on two document attributes
or metadata fields. Supported for the following document attribute
value types
(https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html):
C<dateValue> and C<longValue>.


=head2 LessThan => L<Paws::QBusiness::DocumentAttribute>

Performs a less than operation on two document attributes or metadata
fields. Supported for the following document attribute value types
(https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html):
C<dateValue> and C<longValue>.


=head2 LessThanOrEquals => L<Paws::QBusiness::DocumentAttribute>

Performs a less than or equals operation on two document attributes or
metadata fields.Supported for the following document attribute value
type
(https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html):
C<dateValue> and C<longValue>.


=head2 NotFilter => L<Paws::QBusiness::AttributeFilter>

Performs a logical C<NOT> operation on all supplied filters.


=head2 OrAllFilters => ArrayRef[L<Paws::QBusiness::AttributeFilter>]

Performs a logical C<OR> operation on all supplied filters.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::QBusiness>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

