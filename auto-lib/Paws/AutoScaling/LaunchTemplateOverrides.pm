# Generated by default/object.tt
package Paws::AutoScaling::LaunchTemplateOverrides;
  use Moose;
  has InstanceRequirements => (is => 'ro', isa => 'Paws::AutoScaling::InstanceRequirements');
  has InstanceType => (is => 'ro', isa => 'Str');
  has LaunchTemplateSpecification => (is => 'ro', isa => 'Paws::AutoScaling::LaunchTemplateSpecification');
  has WeightedCapacity => (is => 'ro', isa => 'Str');

1;

### main pod documentation begin ###

=head1 NAME

Paws::AutoScaling::LaunchTemplateOverrides

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::AutoScaling::LaunchTemplateOverrides object:

  $service_obj->Method(Att1 => { InstanceRequirements => $value, ..., WeightedCapacity => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::AutoScaling::LaunchTemplateOverrides object:

  $result = $service_obj->Method(...);
  $result->Att1->InstanceRequirements

=head1 DESCRIPTION

Use this structure to let Amazon EC2 Auto Scaling do the following when
the Auto Scaling group has a mixed instances policy:

=over

=item *

Override the instance type that is specified in the launch template.

=item *

Use multiple instance types.

=back

Specify the instance types that you want, or define your instance
requirements instead and let Amazon EC2 Auto Scaling provision the
available instance types that meet your requirements. This can provide
Amazon EC2 Auto Scaling with a larger selection of instance types to
choose from when fulfilling Spot and On-Demand capacities. You can view
which instance types are matched before you apply the instance
requirements to your Auto Scaling group.

After you define your instance requirements, you don't have to keep
updating these settings to get new EC2 instance types automatically.
Amazon EC2 Auto Scaling uses the instance requirements of the Auto
Scaling group to determine whether a new EC2 instance type can be used.

=head1 ATTRIBUTES


=head2 InstanceRequirements => L<Paws::AutoScaling::InstanceRequirements>

The instance requirements. Amazon EC2 Auto Scaling uses your specified
requirements to identify instance types. Then, it uses your On-Demand
and Spot allocation strategies to launch instances from these instance
types.

You can specify up to four separate sets of instance requirements per
Auto Scaling group. This is useful for provisioning instances from
different Amazon Machine Images (AMIs) in the same Auto Scaling group.
To do this, create the AMIs and create a new launch template for each
AMI. Then, create a compatible set of instance requirements for each
launch template.

If you specify C<InstanceRequirements>, you can't specify
C<InstanceType>.


=head2 InstanceType => Str

The instance type, such as C<m3.xlarge>. You must specify an instance
type that is supported in your requested Region and Availability Zones.
For more information, see Instance types
(https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
in the I<Amazon EC2 User Guide for Linux Instances>.

You can specify up to 40 instance types per Auto Scaling group.


=head2 LaunchTemplateSpecification => L<Paws::AutoScaling::LaunchTemplateSpecification>

Provides a launch template for the specified instance type or set of
instance requirements. For example, some instance types might require a
launch template with a different AMI. If not provided, Amazon EC2 Auto
Scaling uses the launch template that's specified in the
C<LaunchTemplate> definition. For more information, see Specifying a
different launch template for an instance type
(https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-template-overrides.html)
in the I<Amazon EC2 Auto Scaling User Guide>.

You can specify up to 20 launch templates per Auto Scaling group. The
launch templates specified in the overrides and in the
C<LaunchTemplate> definition count towards this limit.


=head2 WeightedCapacity => Str

If you provide a list of instance types to use, you can specify the
number of capacity units provided by each instance type in terms of
virtual CPUs, memory, storage, throughput, or other relative
performance characteristic. When a Spot or On-Demand Instance is
launched, the capacity units count toward the desired capacity. Amazon
EC2 Auto Scaling launches instances until the desired capacity is
totally fulfilled, even if this results in an overage. For example, if
there are two units remaining to fulfill capacity, and Amazon EC2 Auto
Scaling can only launch an instance with a C<WeightedCapacity> of five
units, the instance is launched, and the desired capacity is exceeded
by three units. For more information, see Configure an Auto Scaling
group to use instance weights
(https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html)
in the I<Amazon EC2 Auto Scaling User Guide>. Value must be in the
range of 1E<ndash>999.

If you specify a value for C<WeightedCapacity> for one instance type,
you must specify a value for C<WeightedCapacity> for all of them.

Every Auto Scaling group has three size parameters (C<DesiredCapacity>,
C<MaxSize>, and C<MinSize>). Usually, you set these sizes based on a
specific number of instances. However, if you configure a mixed
instances policy that defines weights for the instance types, you must
specify these sizes with the same units that you use for weighting
instances.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::AutoScaling>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

