
package Paws::SSOOidc::CreateTokenWithIAM;
  use Moose;
  has Assertion => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'assertion');
  has ClientId => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'clientId', required => 1);
  has Code => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'code');
  has CodeVerifier => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'codeVerifier');
  has GrantType => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'grantType', required => 1);
  has RedirectUri => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'redirectUri');
  has RefreshToken => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'refreshToken');
  has RequestedTokenType => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'requestedTokenType');
  has Scope => (is => 'ro', isa => 'ArrayRef[Str|Undef]', traits => ['NameInRequest'], request_name => 'scope');
  has SubjectToken => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'subjectToken');
  has SubjectTokenType => (is => 'ro', isa => 'Str', traits => ['NameInRequest'], request_name => 'subjectTokenType');

  use MooseX::ClassAttribute;

  class_has _api_call => (isa => 'Str', is => 'ro', default => 'CreateTokenWithIAM');
  class_has _api_uri  => (isa => 'Str', is => 'ro', default => '/token?aws_iam=t');
  class_has _api_method  => (isa => 'Str', is => 'ro', default => 'POST');
  class_has _returns => (isa => 'Str', is => 'ro', default => 'Paws::SSOOidc::CreateTokenWithIAMResponse');
1;

### main pod documentation begin ###

=head1 NAME

Paws::SSOOidc::CreateTokenWithIAM - Arguments for method CreateTokenWithIAM on L<Paws::SSOOidc>

=head1 DESCRIPTION

This class represents the parameters used for calling the method CreateTokenWithIAM on the
L<AWS SSO OIDC|Paws::SSOOidc> service. Use the attributes of this class
as arguments to method CreateTokenWithIAM.

You shouldn't make instances of this class. Each attribute should be used as a named argument in the call to CreateTokenWithIAM.

=head1 SYNOPSIS

    my $oidc = Paws->service('SSOOidc');
    my $CreateTokenWithIAMResponse = $oidc->CreateTokenWithIAM(
      ClientId           => 'MyClientId',
      GrantType          => 'MyGrantType',
      Assertion          => 'MyAssertion',         # OPTIONAL
      Code               => 'MyAuthCode',          # OPTIONAL
      CodeVerifier       => 'MyCodeVerifier',      # OPTIONAL
      RedirectUri        => 'MyURI',               # OPTIONAL
      RefreshToken       => 'MyRefreshToken',      # OPTIONAL
      RequestedTokenType => 'MyTokenTypeURI',      # OPTIONAL
      Scope              => [ 'MyScope', ... ],    # OPTIONAL
      SubjectToken       => 'MySubjectToken',      # OPTIONAL
      SubjectTokenType   => 'MyTokenTypeURI',      # OPTIONAL
    );

    # Results:
    my $AccessToken = $CreateTokenWithIAMResponse->AccessToken;
    my $AwsAdditionalDetails =
      $CreateTokenWithIAMResponse->AwsAdditionalDetails;
    my $ExpiresIn       = $CreateTokenWithIAMResponse->ExpiresIn;
    my $IdToken         = $CreateTokenWithIAMResponse->IdToken;
    my $IssuedTokenType = $CreateTokenWithIAMResponse->IssuedTokenType;
    my $RefreshToken    = $CreateTokenWithIAMResponse->RefreshToken;
    my $Scope           = $CreateTokenWithIAMResponse->Scope;
    my $TokenType       = $CreateTokenWithIAMResponse->TokenType;

    # Returns a L<Paws::SSOOidc::CreateTokenWithIAMResponse> object.

Values for attributes that are native types (Int, String, Float, etc) can passed as-is (scalar values). Values for complex Types (objects) can be passed as a HashRef. The keys and values of the hashref will be used to instance the underlying object.
For the AWS API documentation, see L<https://docs.aws.amazon.com/goto/WebAPI/oidc/CreateTokenWithIAM>

=head1 ATTRIBUTES


=head2 Assertion => Str

Used only when calling this API for the JWT Bearer grant type. This
value specifies the JSON Web Token (JWT) issued by a trusted token
issuer. To authorize a trusted token issuer, configure the JWT Bearer
GrantOptions for the application.



=head2 B<REQUIRED> ClientId => Str

The unique identifier string for the client or application. This value
is an application ARN that has OAuth grants configured.



=head2 Code => Str

Used only when calling this API for the Authorization Code grant type.
This short-lived code is used to identify this authorization request.
The code is obtained through a redirect from IAM Identity Center to a
redirect URI persisted in the Authorization Code GrantOptions for the
application.



=head2 CodeVerifier => Str

Used only when calling this API for the Authorization Code grant type.
This value is generated by the client and presented to validate the
original code challenge value the client passed at authorization time.



=head2 B<REQUIRED> GrantType => Str

Supports the following OAuth grant types: Authorization Code, Refresh
Token, JWT Bearer, and Token Exchange. Specify one of the following
values, depending on the grant type that you want:

* Authorization Code - C<authorization_code>

* Refresh Token - C<refresh_token>

* JWT Bearer - C<urn:ietf:params:oauth:grant-type:jwt-bearer>

* Token Exchange - C<urn:ietf:params:oauth:grant-type:token-exchange>



=head2 RedirectUri => Str

Used only when calling this API for the Authorization Code grant type.
This value specifies the location of the client or application that has
registered to receive the authorization code.



=head2 RefreshToken => Str

Used only when calling this API for the Refresh Token grant type. This
token is used to refresh short-lived tokens, such as the access token,
that might expire.

For more information about the features and limitations of the current
IAM Identity Center OIDC implementation, see I<Considerations for Using
this Guide> in the IAM Identity Center OIDC API Reference
(https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html).



=head2 RequestedTokenType => Str

Used only when calling this API for the Token Exchange grant type. This
value specifies the type of token that the requester can receive. The
following values are supported:

* Access Token - C<urn:ietf:params:oauth:token-type:access_token>

* Refresh Token - C<urn:ietf:params:oauth:token-type:refresh_token>



=head2 Scope => ArrayRef[Str|Undef]

The list of scopes for which authorization is requested. The access
token that is issued is limited to the scopes that are granted. If the
value is not specified, IAM Identity Center authorizes all scopes
configured for the application, including the following default scopes:
C<openid>, C<aws>, C<sts:identity_context>.



=head2 SubjectToken => Str

Used only when calling this API for the Token Exchange grant type. This
value specifies the subject of the exchange. The value of the subject
token must be an access token issued by IAM Identity Center to a
different client or application. The access token must have authorized
scopes that indicate the requested application as a target audience.



=head2 SubjectTokenType => Str

Used only when calling this API for the Token Exchange grant type. This
value specifies the type of token that is passed as the subject of the
exchange. The following value is supported:

* Access Token - C<urn:ietf:params:oauth:token-type:access_token>




=head1 SEE ALSO

This class forms part of L<Paws>, documenting arguments for method CreateTokenWithIAM in L<Paws::SSOOidc>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

