# Generated by default/object.tt
package Paws::ECS::Deployment;
  use Moose;
  has CapacityProviderStrategy => (is => 'ro', isa => 'ArrayRef[Paws::ECS::CapacityProviderStrategyItem]', request_name => 'capacityProviderStrategy', traits => ['NameInRequest']);
  has CreatedAt => (is => 'ro', isa => 'Str', request_name => 'createdAt', traits => ['NameInRequest']);
  has DesiredCount => (is => 'ro', isa => 'Int', request_name => 'desiredCount', traits => ['NameInRequest']);
  has FailedTasks => (is => 'ro', isa => 'Int', request_name => 'failedTasks', traits => ['NameInRequest']);
  has FargateEphemeralStorage => (is => 'ro', isa => 'Paws::ECS::DeploymentEphemeralStorage', request_name => 'fargateEphemeralStorage', traits => ['NameInRequest']);
  has Id => (is => 'ro', isa => 'Str', request_name => 'id', traits => ['NameInRequest']);
  has LaunchType => (is => 'ro', isa => 'Str', request_name => 'launchType', traits => ['NameInRequest']);
  has NetworkConfiguration => (is => 'ro', isa => 'Paws::ECS::NetworkConfiguration', request_name => 'networkConfiguration', traits => ['NameInRequest']);
  has PendingCount => (is => 'ro', isa => 'Int', request_name => 'pendingCount', traits => ['NameInRequest']);
  has PlatformFamily => (is => 'ro', isa => 'Str', request_name => 'platformFamily', traits => ['NameInRequest']);
  has PlatformVersion => (is => 'ro', isa => 'Str', request_name => 'platformVersion', traits => ['NameInRequest']);
  has RolloutState => (is => 'ro', isa => 'Str', request_name => 'rolloutState', traits => ['NameInRequest']);
  has RolloutStateReason => (is => 'ro', isa => 'Str', request_name => 'rolloutStateReason', traits => ['NameInRequest']);
  has RunningCount => (is => 'ro', isa => 'Int', request_name => 'runningCount', traits => ['NameInRequest']);
  has ServiceConnectConfiguration => (is => 'ro', isa => 'Paws::ECS::ServiceConnectConfiguration', request_name => 'serviceConnectConfiguration', traits => ['NameInRequest']);
  has ServiceConnectResources => (is => 'ro', isa => 'ArrayRef[Paws::ECS::ServiceConnectServiceResource]', request_name => 'serviceConnectResources', traits => ['NameInRequest']);
  has Status => (is => 'ro', isa => 'Str', request_name => 'status', traits => ['NameInRequest']);
  has TaskDefinition => (is => 'ro', isa => 'Str', request_name => 'taskDefinition', traits => ['NameInRequest']);
  has UpdatedAt => (is => 'ro', isa => 'Str', request_name => 'updatedAt', traits => ['NameInRequest']);
  has VolumeConfigurations => (is => 'ro', isa => 'ArrayRef[Paws::ECS::ServiceVolumeConfiguration]', request_name => 'volumeConfigurations', traits => ['NameInRequest']);
  has VpcLatticeConfigurations => (is => 'ro', isa => 'ArrayRef[Paws::ECS::VpcLatticeConfiguration]', request_name => 'vpcLatticeConfigurations', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::ECS::Deployment

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::ECS::Deployment object:

  $service_obj->Method(Att1 => { CapacityProviderStrategy => $value, ..., VpcLatticeConfigurations => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::ECS::Deployment object:

  $result = $service_obj->Method(...);
  $result->Att1->CapacityProviderStrategy

=head1 DESCRIPTION

The details of an Amazon ECS service deployment. This is used only when
a service uses the C<ECS> deployment controller type.

=head1 ATTRIBUTES


=head2 CapacityProviderStrategy => ArrayRef[L<Paws::ECS::CapacityProviderStrategyItem>]

The capacity provider strategy that the deployment is using.


=head2 CreatedAt => Str

The Unix timestamp for the time when the service deployment was
created.


=head2 DesiredCount => Int

The most recent desired count of tasks that was specified for the
service to deploy or maintain.


=head2 FailedTasks => Int

The number of consecutively failed tasks in the deployment. A task is
considered a failure if the service scheduler can't launch the task,
the task doesn't transition to a C<RUNNING> state, or if it fails any
of its defined health checks and is stopped.

Once a service deployment has one or more successfully running tasks,
the failed task count resets to zero and stops being evaluated.


=head2 FargateEphemeralStorage => L<Paws::ECS::DeploymentEphemeralStorage>

The Fargate ephemeral storage settings for the deployment.


=head2 Id => Str

The ID of the deployment.


=head2 LaunchType => Str

The launch type the tasks in the service are using. For more
information, see Amazon ECS Launch Types
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 NetworkConfiguration => L<Paws::ECS::NetworkConfiguration>

The VPC subnet and security group configuration for tasks that receive
their own elastic network interface by using the C<awsvpc> networking
mode.


=head2 PendingCount => Int

The number of tasks in the deployment that are in the C<PENDING>
status.


=head2 PlatformFamily => Str

The operating system that your tasks in the service, or tasks are
running on. A platform family is specified only for tasks using the
Fargate launch type.

All tasks that run as part of this service must use the same
C<platformFamily> value as the service, for example, C< LINUX.>.


=head2 PlatformVersion => Str

The platform version that your tasks in the service run on. A platform
version is only specified for tasks using the Fargate launch type. If
one isn't specified, the C<LATEST> platform version is used. For more
information, see Fargate Platform Versions
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 RolloutState => Str

The C<rolloutState> of a service is only returned for services that use
the rolling update (C<ECS>) deployment type that aren't behind a
Classic Load Balancer.

The rollout state of the deployment. When a service deployment is
started, it begins in an C<IN_PROGRESS> state. When the service reaches
a steady state, the deployment transitions to a C<COMPLETED> state. If
the service fails to reach a steady state and circuit breaker is turned
on, the deployment transitions to a C<FAILED> state. A deployment in
C<FAILED> state doesn't launch any new tasks. For more information, see
DeploymentCircuitBreaker
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentCircuitBreaker.html).


=head2 RolloutStateReason => Str

A description of the rollout state of a deployment.


=head2 RunningCount => Int

The number of tasks in the deployment that are in the C<RUNNING>
status.


=head2 ServiceConnectConfiguration => L<Paws::ECS::ServiceConnectConfiguration>

The details of the Service Connect configuration that's used by this
deployment. Compare the configuration between multiple deployments when
troubleshooting issues with new deployments.

The configuration for this service to discover and connect to services,
and be discovered by, and connected from, other services within a
namespace.

Tasks that run in a namespace can use short names to connect to
services in the namespace. Tasks can connect to services across all of
the clusters in the namespace. Tasks connect through a managed proxy
container that collects logs and metrics for increased visibility. Only
the tasks that Amazon ECS services create are supported with Service
Connect. For more information, see Service Connect
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 ServiceConnectResources => ArrayRef[L<Paws::ECS::ServiceConnectServiceResource>]

The list of Service Connect resources that are associated with this
deployment. Each list entry maps a discovery name to a Cloud Map
service name.


=head2 Status => Str

The status of the deployment. The following describes each state.

=over

=item PRIMARY

The most recent deployment of a service.

=item ACTIVE

A service deployment that still has running tasks, but are in the
process of being replaced with a new C<PRIMARY> deployment.

=item INACTIVE

A deployment that has been completely replaced.

=back



=head2 TaskDefinition => Str

The most recent task definition that was specified for the tasks in the
service to use.


=head2 UpdatedAt => Str

The Unix timestamp for the time when the service deployment was last
updated.


=head2 VolumeConfigurations => ArrayRef[L<Paws::ECS::ServiceVolumeConfiguration>]

The details of the volume that was C<configuredAtLaunch>. You can
configure different settings like the size, throughput, volumeType, and
ecryption in ServiceManagedEBSVolumeConfiguration
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ServiceManagedEBSVolumeConfiguration.html).
The C<name> of the volume must match the C<name> from the task
definition.


=head2 VpcLatticeConfigurations => ArrayRef[L<Paws::ECS::VpcLatticeConfiguration>]

The VPC Lattice configuration for the service deployment.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::ECS>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

