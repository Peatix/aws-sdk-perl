# Generated by default/object.tt
package Paws::ECS::DeploymentConfiguration;
  use Moose;
  has Alarms => (is => 'ro', isa => 'Paws::ECS::DeploymentAlarms', request_name => 'alarms', traits => ['NameInRequest']);
  has DeploymentCircuitBreaker => (is => 'ro', isa => 'Paws::ECS::DeploymentCircuitBreaker', request_name => 'deploymentCircuitBreaker', traits => ['NameInRequest']);
  has MaximumPercent => (is => 'ro', isa => 'Int', request_name => 'maximumPercent', traits => ['NameInRequest']);
  has MinimumHealthyPercent => (is => 'ro', isa => 'Int', request_name => 'minimumHealthyPercent', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::ECS::DeploymentConfiguration

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::ECS::DeploymentConfiguration object:

  $service_obj->Method(Att1 => { Alarms => $value, ..., MinimumHealthyPercent => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::ECS::DeploymentConfiguration object:

  $result = $service_obj->Method(...);
  $result->Att1->Alarms

=head1 DESCRIPTION

Optional deployment parameters that control how many tasks run during a
deployment and the ordering of stopping and starting tasks.

=head1 ATTRIBUTES


=head2 Alarms => L<Paws::ECS::DeploymentAlarms>

Information about the CloudWatch alarms.


=head2 DeploymentCircuitBreaker => L<Paws::ECS::DeploymentCircuitBreaker>

The deployment circuit breaker can only be used for services using the
rolling update (C<ECS>) deployment type.

The B<deployment circuit breaker> determines whether a service
deployment will fail if the service can't reach a steady state. If you
use the deployment circuit breaker, a service deployment will
transition to a failed state and stop launching new tasks. If you use
the rollback option, when a service deployment fails, the service is
rolled back to the last deployment that completed successfully. For
more information, see Rolling update
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
in the I<Amazon Elastic Container Service Developer Guide>


=head2 MaximumPercent => Int

If a service is using the rolling update (C<ECS>) deployment type, the
C<maximumPercent> parameter represents an upper limit on the number of
your service's tasks that are allowed in the C<RUNNING> or C<PENDING>
state during a deployment, as a percentage of the C<desiredCount>
(rounded down to the nearest integer). This parameter enables you to
define the deployment batch size. For example, if your service is using
the C<REPLICA> service scheduler and has a C<desiredCount> of four
tasks and a C<maximumPercent> value of 200%, the scheduler may start
four new tasks before stopping the four older tasks (provided that the
cluster resources required to do this are available). The default
C<maximumPercent> value for a service using the C<REPLICA> service
scheduler is 200%.

The Amazon ECS scheduler uses this parameter to replace unhealthy tasks
by starting replacement tasks first and then stopping the unhealthy
tasks, as long as cluster resources for starting replacement tasks are
available. For more information about how the scheduler replaces
unhealthy tasks, see Amazon ECS services
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).

If a service is using either the blue/green (C<CODE_DEPLOY>) or
C<EXTERNAL> deployment types, and tasks in the service use the EC2
launch type, the B<maximum percent> value is set to the default value.
The B<maximum percent> value is used to define the upper limit on the
number of the tasks in the service that remain in the C<RUNNING> state
while the container instances are in the C<DRAINING> state.

You can't specify a custom C<maximumPercent> value for a service that
uses either the blue/green (C<CODE_DEPLOY>) or C<EXTERNAL> deployment
types and has tasks that use the EC2 launch type.

If the service uses either the blue/green (C<CODE_DEPLOY>) or
C<EXTERNAL> deployment types, and the tasks in the service use the
Fargate launch type, the maximum percent value is not used. The value
is still returned when describing your service.


=head2 MinimumHealthyPercent => Int

If a service is using the rolling update (C<ECS>) deployment type, the
C<minimumHealthyPercent> represents a lower limit on the number of your
service's tasks that must remain in the C<RUNNING> state during a
deployment, as a percentage of the C<desiredCount> (rounded up to the
nearest integer). This parameter enables you to deploy without using
additional cluster capacity. For example, if your service has a
C<desiredCount> of four tasks and a C<minimumHealthyPercent> of 50%,
the service scheduler may stop two existing tasks to free up cluster
capacity before starting two new tasks.

If any tasks are unhealthy and if C<maximumPercent> doesn't allow the
Amazon ECS scheduler to start replacement tasks, the scheduler stops
the unhealthy tasks one-by-one E<mdash> using the
C<minimumHealthyPercent> as a constraint E<mdash> to clear up capacity
to launch replacement tasks. For more information about how the
scheduler replaces unhealthy tasks, see Amazon ECS services
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html)
.

For services that I<do not> use a load balancer, the following should
be noted:

=over

=item *

A service is considered healthy if all essential containers within the
tasks in the service pass their health checks.

=item *

If a task has no essential containers with a health check defined, the
service scheduler will wait for 40 seconds after a task reaches a
C<RUNNING> state before the task is counted towards the minimum healthy
percent total.

=item *

If a task has one or more essential containers with a health check
defined, the service scheduler will wait for the task to reach a
healthy status before counting it towards the minimum healthy percent
total. A task is considered healthy when all essential containers
within the task have passed their health checks. The amount of time the
service scheduler can wait for is determined by the container health
check settings.

=back

For services that I<do> use a load balancer, the following should be
noted:

=over

=item *

If a task has no essential containers with a health check defined, the
service scheduler will wait for the load balancer target group health
check to return a healthy status before counting the task towards the
minimum healthy percent total.

=item *

If a task has an essential container with a health check defined, the
service scheduler will wait for both the task to reach a healthy status
and the load balancer target group health check to return a healthy
status before counting the task towards the minimum healthy percent
total.

=back

The default value for a replica service for C<minimumHealthyPercent> is
100%. The default C<minimumHealthyPercent> value for a service using
the C<DAEMON> service schedule is 0% for the CLI, the Amazon Web
Services SDKs, and the APIs and 50% for the Amazon Web Services
Management Console.

The minimum number of healthy tasks during a deployment is the
C<desiredCount> multiplied by the C<minimumHealthyPercent>/100, rounded
up to the nearest integer value.

If a service is using either the blue/green (C<CODE_DEPLOY>) or
C<EXTERNAL> deployment types and is running tasks that use the EC2
launch type, the B<minimum healthy percent> value is set to the default
value. The B<minimum healthy percent> value is used to define the lower
limit on the number of the tasks in the service that remain in the
C<RUNNING> state while the container instances are in the C<DRAINING>
state.

You can't specify a custom C<minimumHealthyPercent> value for a service
that uses either the blue/green (C<CODE_DEPLOY>) or C<EXTERNAL>
deployment types and has tasks that use the EC2 launch type.

If a service is using either the blue/green (C<CODE_DEPLOY>) or
C<EXTERNAL> deployment types and is running tasks that use the Fargate
launch type, the minimum healthy percent value is not used, although it
is returned when describing your service.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::ECS>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

