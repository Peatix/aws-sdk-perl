# Generated by default/object.tt
package Paws::ECS::TaskDefinition;
  use Moose;
  has Compatibilities => (is => 'ro', isa => 'ArrayRef[Str|Undef]', request_name => 'compatibilities', traits => ['NameInRequest']);
  has ContainerDefinitions => (is => 'ro', isa => 'ArrayRef[Paws::ECS::ContainerDefinition]', request_name => 'containerDefinitions', traits => ['NameInRequest']);
  has Cpu => (is => 'ro', isa => 'Str', request_name => 'cpu', traits => ['NameInRequest']);
  has DeregisteredAt => (is => 'ro', isa => 'Str', request_name => 'deregisteredAt', traits => ['NameInRequest']);
  has EnableFaultInjection => (is => 'ro', isa => 'Bool', request_name => 'enableFaultInjection', traits => ['NameInRequest']);
  has EphemeralStorage => (is => 'ro', isa => 'Paws::ECS::EphemeralStorage', request_name => 'ephemeralStorage', traits => ['NameInRequest']);
  has ExecutionRoleArn => (is => 'ro', isa => 'Str', request_name => 'executionRoleArn', traits => ['NameInRequest']);
  has Family => (is => 'ro', isa => 'Str', request_name => 'family', traits => ['NameInRequest']);
  has InferenceAccelerators => (is => 'ro', isa => 'ArrayRef[Paws::ECS::InferenceAccelerator]', request_name => 'inferenceAccelerators', traits => ['NameInRequest']);
  has IpcMode => (is => 'ro', isa => 'Str', request_name => 'ipcMode', traits => ['NameInRequest']);
  has Memory => (is => 'ro', isa => 'Str', request_name => 'memory', traits => ['NameInRequest']);
  has NetworkMode => (is => 'ro', isa => 'Str', request_name => 'networkMode', traits => ['NameInRequest']);
  has PidMode => (is => 'ro', isa => 'Str', request_name => 'pidMode', traits => ['NameInRequest']);
  has PlacementConstraints => (is => 'ro', isa => 'ArrayRef[Paws::ECS::TaskDefinitionPlacementConstraint]', request_name => 'placementConstraints', traits => ['NameInRequest']);
  has ProxyConfiguration => (is => 'ro', isa => 'Paws::ECS::ProxyConfiguration', request_name => 'proxyConfiguration', traits => ['NameInRequest']);
  has RegisteredAt => (is => 'ro', isa => 'Str', request_name => 'registeredAt', traits => ['NameInRequest']);
  has RegisteredBy => (is => 'ro', isa => 'Str', request_name => 'registeredBy', traits => ['NameInRequest']);
  has RequiresAttributes => (is => 'ro', isa => 'ArrayRef[Paws::ECS::Attribute]', request_name => 'requiresAttributes', traits => ['NameInRequest']);
  has RequiresCompatibilities => (is => 'ro', isa => 'ArrayRef[Str|Undef]', request_name => 'requiresCompatibilities', traits => ['NameInRequest']);
  has Revision => (is => 'ro', isa => 'Int', request_name => 'revision', traits => ['NameInRequest']);
  has RuntimePlatform => (is => 'ro', isa => 'Paws::ECS::RuntimePlatform', request_name => 'runtimePlatform', traits => ['NameInRequest']);
  has Status => (is => 'ro', isa => 'Str', request_name => 'status', traits => ['NameInRequest']);
  has TaskDefinitionArn => (is => 'ro', isa => 'Str', request_name => 'taskDefinitionArn', traits => ['NameInRequest']);
  has TaskRoleArn => (is => 'ro', isa => 'Str', request_name => 'taskRoleArn', traits => ['NameInRequest']);
  has Volumes => (is => 'ro', isa => 'ArrayRef[Paws::ECS::Volume]', request_name => 'volumes', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::ECS::TaskDefinition

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::ECS::TaskDefinition object:

  $service_obj->Method(Att1 => { Compatibilities => $value, ..., Volumes => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::ECS::TaskDefinition object:

  $result = $service_obj->Method(...);
  $result->Att1->Compatibilities

=head1 DESCRIPTION

The details of a task definition which describes the container and
volume definitions of an Amazon Elastic Container Service task. You can
specify which Docker images to use, the required resources, and other
configurations related to launching the task definition through an
Amazon ECS service or task.

=head1 ATTRIBUTES


=head2 Compatibilities => ArrayRef[Str|Undef]

Amazon ECS validates the task definition parameters with those
supported by the launch type. For more information, see Amazon ECS
launch types
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 ContainerDefinitions => ArrayRef[L<Paws::ECS::ContainerDefinition>]

A list of container definitions in JSON format that describe the
different containers that make up your task. For more information about
container definition parameters and defaults, see Amazon ECS Task
Definitions
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 Cpu => Str

The number of C<cpu> units used by the task. If you use the EC2 launch
type, this field is optional. Any value can be used. If you use the
Fargate launch type, this field is required. You must use one of the
following values. The value that you choose determines your range of
valid values for the C<memory> parameter.

If you're using the EC2 launch type or the external launch type, this
field is optional. Supported values are between C<128> CPU units
(C<0.125> vCPUs) and C<196608> CPU units (C<192> vCPUs).

This field is required for Fargate. For information about the valid
values, see Task size
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 DeregisteredAt => Str

The Unix timestamp for the time when the task definition was
deregistered.


=head2 EnableFaultInjection => Bool

Enables fault injection and allows for fault injection requests to be
accepted from the task's containers. The default value is C<false>.


=head2 EphemeralStorage => L<Paws::ECS::EphemeralStorage>

The ephemeral storage settings to use for tasks run with the task
definition.


=head2 ExecutionRoleArn => Str

The Amazon Resource Name (ARN) of the task execution role that grants
the Amazon ECS container agent permission to make Amazon Web Services
API calls on your behalf. For informationabout the required IAM roles
for Amazon ECS, see IAM roles for Amazon ECS
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-ecs-iam-role-overview.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 Family => Str

The name of a family that this task definition is registered to. Up to
255 characters are allowed. Letters (both uppercase and lowercase
letters), numbers, hyphens (-), and underscores (_) are allowed.

A family groups multiple versions of a task definition. Amazon ECS
gives the first task definition that you registered to a family a
revision number of 1. Amazon ECS gives sequential revision numbers to
each task definition that you add.


=head2 InferenceAccelerators => ArrayRef[L<Paws::ECS::InferenceAccelerator>]

The Elastic Inference accelerator that's associated with the task.


=head2 IpcMode => Str

The IPC resource namespace to use for the containers in the task. The
valid values are C<host>, C<task>, or C<none>. If C<host> is specified,
then all containers within the tasks that specified the C<host> IPC
mode on the same container instance share the same IPC resources with
the host Amazon EC2 instance. If C<task> is specified, all containers
within the specified task share the same IPC resources. If C<none> is
specified, then IPC resources within the containers of a task are
private and not shared with other containers in a task or on the
container instance. If no value is specified, then the IPC resource
namespace sharing depends on the Docker daemon setting on the container
instance.

If the C<host> IPC mode is used, be aware that there is a heightened
risk of undesired IPC namespace expose.

If you are setting namespaced kernel parameters using C<systemControls>
for the containers in the task, the following will apply to your IPC
resource namespace. For more information, see System Controls
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html)
in the I<Amazon Elastic Container Service Developer Guide>.

=over

=item *

For tasks that use the C<host> IPC mode, IPC namespace related
C<systemControls> are not supported.

=item *

For tasks that use the C<task> IPC mode, IPC namespace related
C<systemControls> will apply to all containers within a task.

=back

This parameter is not supported for Windows containers or tasks run on
Fargate.


=head2 Memory => Str

The amount (in MiB) of memory used by the task.

If your tasks runs on Amazon EC2 instances, you must specify either a
task-level memory value or a container-level memory value. This field
is optional and any value can be used. If a task-level memory value is
specified, the container-level memory value is optional. For more
information regarding container-level memory and memory reservation,
see ContainerDefinition
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html).

If your tasks runs on Fargate, this field is required. You must use one
of the following values. The value you choose determines your range of
valid values for the C<cpu> parameter.

=over

=item *

512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available C<cpu> values: 256
(.25 vCPU)

=item *

1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available C<cpu>
values: 512 (.5 vCPU)

=item *

2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168
(7 GB), 8192 (8 GB) - Available C<cpu> values: 1024 (1 vCPU)

=item *

Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) -
Available C<cpu> values: 2048 (2 vCPU)

=item *

Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) -
Available C<cpu> values: 4096 (4 vCPU)

=item *

Between 16 GB and 60 GB in 4 GB increments - Available C<cpu> values:
8192 (8 vCPU)

This option requires Linux platform C<1.4.0> or later.

=item *

Between 32GB and 120 GB in 8 GB increments - Available C<cpu> values:
16384 (16 vCPU)

This option requires Linux platform C<1.4.0> or later.

=back



=head2 NetworkMode => Str

The Docker networking mode to use for the containers in the task. The
valid values are C<none>, C<bridge>, C<awsvpc>, and C<host>. If no
network mode is specified, the default is C<bridge>.

For Amazon ECS tasks on Fargate, the C<awsvpc> network mode is
required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
instances, C<E<lt>defaultE<gt>> or C<awsvpc> can be used. If the
network mode is set to C<none>, you cannot specify port mappings in
your container definitions, and the tasks containers do not have
external connectivity. The C<host> and C<awsvpc> network modes offer
the highest networking performance for containers because they use the
EC2 network stack instead of the virtualized network stack provided by
the C<bridge> mode.

With the C<host> and C<awsvpc> network modes, exposed container ports
are mapped directly to the corresponding host port (for the C<host>
network mode) or the attached elastic network interface port (for the
C<awsvpc> network mode), so you cannot take advantage of dynamic host
port mappings.

When using the C<host> network mode, you should not run containers
using the root user (UID 0). It is considered best practice to use a
non-root user.

If the network mode is C<awsvpc>, the task is allocated an elastic
network interface, and you must specify a NetworkConfiguration
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_NetworkConfiguration.html)
value when you create a service or run a task with the task definition.
For more information, see Task Networking
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
in the I<Amazon Elastic Container Service Developer Guide>.

If the network mode is C<host>, you cannot run multiple instantiations
of the same task on a single container instance when port mappings are
used.


=head2 PidMode => Str

The process namespace to use for the containers in the task. The valid
values are C<host> or C<task>. On Fargate for Linux containers, the
only valid value is C<task>. For example, monitoring sidecars might
need C<pidMode> to access information about other containers running in
the same task.

If C<host> is specified, all containers within the tasks that specified
the C<host> PID mode on the same container instance share the same
process namespace with the host Amazon EC2 instance.

If C<task> is specified, all containers within the specified task share
the same process namespace.

If no value is specified, the default is a private namespace for each
container.

If the C<host> PID mode is used, there's a heightened risk of undesired
process namespace exposure.

This parameter is not supported for Windows containers.

This parameter is only supported for tasks that are hosted on Fargate
if the tasks are using platform version C<1.4.0> or later (Linux). This
isn't supported for Windows containers on Fargate.


=head2 PlacementConstraints => ArrayRef[L<Paws::ECS::TaskDefinitionPlacementConstraint>]

An array of placement constraint objects to use for tasks.

This parameter isn't supported for tasks run on Fargate.


=head2 ProxyConfiguration => L<Paws::ECS::ProxyConfiguration>

The configuration details for the App Mesh proxy.

Your Amazon ECS container instances require at least version 1.26.0 of
the container agent and at least version 1.26.0-1 of the C<ecs-init>
package to use a proxy configuration. If your container instances are
launched from the Amazon ECS optimized AMI version C<20190301> or
later, they contain the required versions of the container agent and
C<ecs-init>. For more information, see Amazon ECS-optimized Linux AMI
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 RegisteredAt => Str

The Unix timestamp for the time when the task definition was
registered.


=head2 RegisteredBy => Str

The principal that registered the task definition.


=head2 RequiresAttributes => ArrayRef[L<Paws::ECS::Attribute>]

The container instance attributes required by your task. When an Amazon
EC2 instance is registered to your cluster, the Amazon ECS container
agent assigns some standard attributes to the instance. You can apply
custom attributes. These are specified as key-value pairs using the
Amazon ECS console or the PutAttributes
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAttributes.html)
API. These attributes are used when determining task placement for
tasks hosted on Amazon EC2 instances. For more information, see
Attributes
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes)
in the I<Amazon Elastic Container Service Developer Guide>.

This parameter isn't supported for tasks run on Fargate.


=head2 RequiresCompatibilities => ArrayRef[Str|Undef]

The task launch types the task definition was validated against. The
valid values are C<EC2>, C<FARGATE>, and C<EXTERNAL>. For more
information, see Amazon ECS launch types
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 Revision => Int

The revision of the task in a particular family. The revision is a
version number of a task definition in a family. When you register a
task definition for the first time, the revision is C<1>. Each time
that you register a new revision of a task definition in the same
family, the revision value always increases by one. This is even if you
deregistered previous revisions in this family.


=head2 RuntimePlatform => L<Paws::ECS::RuntimePlatform>

The operating system that your task definitions are running on. A
platform family is specified only for tasks using the Fargate launch
type.

When you specify a task in a service, this value must match the
C<runtimePlatform> value of the service.


=head2 Status => Str

The status of the task definition.


=head2 TaskDefinitionArn => Str

The full Amazon Resource Name (ARN) of the task definition.


=head2 TaskRoleArn => Str

The short name or full Amazon Resource Name (ARN) of the Identity and
Access Management role that grants containers in the task permission to
call Amazon Web Services APIs on your behalf. For informationabout the
required IAM roles for Amazon ECS, see IAM roles for Amazon ECS
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-ecs-iam-role-overview.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 Volumes => ArrayRef[L<Paws::ECS::Volume>]

The list of data volume definitions for the task. For more information,
see Using data volumes in tasks
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html)
in the I<Amazon Elastic Container Service Developer Guide>.

The C<host> and C<sourcePath> parameters aren't supported for tasks run
on Fargate.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::ECS>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

