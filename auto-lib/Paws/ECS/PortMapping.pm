# Generated by default/object.tt
package Paws::ECS::PortMapping;
  use Moose;
  has AppProtocol => (is => 'ro', isa => 'Str', request_name => 'appProtocol', traits => ['NameInRequest']);
  has ContainerPort => (is => 'ro', isa => 'Int', request_name => 'containerPort', traits => ['NameInRequest']);
  has ContainerPortRange => (is => 'ro', isa => 'Str', request_name => 'containerPortRange', traits => ['NameInRequest']);
  has HostPort => (is => 'ro', isa => 'Int', request_name => 'hostPort', traits => ['NameInRequest']);
  has Name => (is => 'ro', isa => 'Str', request_name => 'name', traits => ['NameInRequest']);
  has Protocol => (is => 'ro', isa => 'Str', request_name => 'protocol', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::ECS::PortMapping

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::ECS::PortMapping object:

  $service_obj->Method(Att1 => { AppProtocol => $value, ..., Protocol => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::ECS::PortMapping object:

  $result = $service_obj->Method(...);
  $result->Att1->AppProtocol

=head1 DESCRIPTION

Port mappings allow containers to access ports on the host container
instance to send or receive traffic. Port mappings are specified as
part of the container definition.

If you use containers in a task with the C<awsvpc> or C<host> network
mode, specify the exposed ports using C<containerPort>. The C<hostPort>
can be left blank or it must be the same value as the C<containerPort>.

Most fields of this parameter (C<containerPort>, C<hostPort>,
C<protocol>) maps to C<PortBindings> in the docker container create
command and the C<--publish> option to C<docker run>. If the network
mode of a task definition is set to C<host>, host ports must either be
undefined or match the container port in the port mapping.

You can't expose the same container port for multiple protocols. If you
attempt this, an error is returned.

After a task reaches the C<RUNNING> status, manual and automatic host
and container port assignments are visible in the C<networkBindings>
section of DescribeTasks
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html)
API responses.

=head1 ATTRIBUTES


=head2 AppProtocol => Str

The application protocol that's used for the port mapping. This
parameter only applies to Service Connect. We recommend that you set
this parameter to be consistent with the protocol that your application
uses. If you set this parameter, Amazon ECS adds protocol-specific
connection handling to the Service Connect proxy. If you set this
parameter, Amazon ECS adds protocol-specific telemetry in the Amazon
ECS console and CloudWatch.

If you don't set a value for this parameter, then TCP is used. However,
Amazon ECS doesn't add protocol-specific telemetry for TCP.

C<appProtocol> is immutable in a Service Connect service. Updating this
field requires a service deletion and redeployment.

Tasks that run in a namespace can use short names to connect to
services in the namespace. Tasks can connect to services across all of
the clusters in the namespace. Tasks connect through a managed proxy
container that collects logs and metrics for increased visibility. Only
the tasks that Amazon ECS services create are supported with Service
Connect. For more information, see Service Connect
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 ContainerPort => Int

The port number on the container that's bound to the user-specified or
automatically assigned host port.

If you use containers in a task with the C<awsvpc> or C<host> network
mode, specify the exposed ports using C<containerPort>.

If you use containers in a task with the C<bridge> network mode and you
specify a container port and not a host port, your container
automatically receives a host port in the ephemeral port range. For
more information, see C<hostPort>. Port mappings that are automatically
assigned in this way do not count toward the 100 reserved ports limit
of a container instance.


=head2 ContainerPortRange => Str

The port number range on the container that's bound to the dynamically
mapped host port range.

The following rules apply when you specify a C<containerPortRange>:

=over

=item *

You must use either the C<bridge> network mode or the C<awsvpc> network
mode.

=item *

This parameter is available for both the EC2 and Fargate launch types.

=item *

This parameter is available for both the Linux and Windows operating
systems.

=item *

The container instance must have at least version 1.67.0 of the
container agent and at least version 1.67.0-1 of the C<ecs-init>
package

=item *

You can specify a maximum of 100 port ranges per container.

=item *

You do not specify a C<hostPortRange>. The value of the
C<hostPortRange> is set as follows:

=over

=item *

For containers in a task with the C<awsvpc> network mode, the
C<hostPortRange> is set to the same value as the C<containerPortRange>.
This is a static mapping strategy.

=item *

For containers in a task with the C<bridge> network mode, the Amazon
ECS agent finds open host ports from the default ephemeral range and
passes it to docker to bind them to the container ports.

=back

=item *

The C<containerPortRange> valid values are between 1 and 65535.

=item *

A port can only be included in one port mapping per container.

=item *

You cannot specify overlapping port ranges.

=item *

The first port in the range must be less than last port in the range.

=item *

Docker recommends that you turn off the docker-proxy in the Docker
daemon config file when you have a large number of ports.

For more information, see Issue #11185
(https://github.com/moby/moby/issues/11185) on the Github website.

For information about how to turn off the docker-proxy in the Docker
daemon config file, see Docker daemon
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon)
in the I<Amazon ECS Developer Guide>.

=back

You can call C<DescribeTasks>
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html)
to view the C<hostPortRange> which are the host ports that are bound to
the container ports.


=head2 HostPort => Int

The port number on the container instance to reserve for your
container.

If you specify a C<containerPortRange>, leave this field empty and the
value of the C<hostPort> is set as follows:

=over

=item *

For containers in a task with the C<awsvpc> network mode, the
C<hostPort> is set to the same value as the C<containerPort>. This is a
static mapping strategy.

=item *

For containers in a task with the C<bridge> network mode, the Amazon
ECS agent finds open ports on the host and automatically binds them to
the container ports. This is a dynamic mapping strategy.

=back

If you use containers in a task with the C<awsvpc> or C<host> network
mode, the C<hostPort> can either be left blank or set to the same value
as the C<containerPort>.

If you use containers in a task with the C<bridge> network mode, you
can specify a non-reserved host port for your container port mapping,
or you can omit the C<hostPort> (or set it to C<0>) while specifying a
C<containerPort> and your container automatically receives a port in
the ephemeral port range for your container instance operating system
and Docker version.

The default ephemeral port range for Docker version 1.6.0 and later is
listed on the instance under C</proc/sys/net/ipv4/ip_local_port_range>.
If this kernel parameter is unavailable, the default ephemeral port
range from 49153 through 65535 (Linux) or 49152 through 65535 (Windows)
is used. Do not attempt to specify a host port in the ephemeral port
range as these are reserved for automatic assignment. In general, ports
below 32768 are outside of the ephemeral port range.

The default reserved ports are 22 for SSH, the Docker ports 2375 and
2376, and the Amazon ECS container agent ports 51678-51680. Any host
port that was previously specified in a running task is also reserved
while the task is running. That is, after a task stops, the host port
is released. The current reserved ports are displayed in the
C<remainingResources> of DescribeContainerInstances
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeContainerInstances.html)
output. A container instance can have up to 100 reserved ports at a
time. This number includes the default reserved ports. Automatically
assigned ports aren't included in the 100 reserved ports quota.


=head2 Name => Str

The name that's used for the port mapping. This parameter is the name
that you use in the C<serviceConnectConfiguration> and the
C<vpcLatticeConfigurations> of a service. The name can include up to 64
characters. The characters can include lowercase letters, numbers,
underscores (_), and hyphens (-). The name can't start with a hyphen.


=head2 Protocol => Str

The protocol used for the port mapping. Valid values are C<tcp> and
C<udp>. The default is C<tcp>. C<protocol> is immutable in a Service
Connect service. Updating this field requires a service deletion and
redeployment.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::ECS>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

