# Generated by default/object.tt
package Paws::ECS::Task;
  use Moose;
  has Attachments => (is => 'ro', isa => 'ArrayRef[Paws::ECS::Attachment]', request_name => 'attachments', traits => ['NameInRequest']);
  has Attributes => (is => 'ro', isa => 'ArrayRef[Paws::ECS::Attribute]', request_name => 'attributes', traits => ['NameInRequest']);
  has AvailabilityZone => (is => 'ro', isa => 'Str', request_name => 'availabilityZone', traits => ['NameInRequest']);
  has CapacityProviderName => (is => 'ro', isa => 'Str', request_name => 'capacityProviderName', traits => ['NameInRequest']);
  has ClusterArn => (is => 'ro', isa => 'Str', request_name => 'clusterArn', traits => ['NameInRequest']);
  has Connectivity => (is => 'ro', isa => 'Str', request_name => 'connectivity', traits => ['NameInRequest']);
  has ConnectivityAt => (is => 'ro', isa => 'Str', request_name => 'connectivityAt', traits => ['NameInRequest']);
  has ContainerInstanceArn => (is => 'ro', isa => 'Str', request_name => 'containerInstanceArn', traits => ['NameInRequest']);
  has Containers => (is => 'ro', isa => 'ArrayRef[Paws::ECS::Container]', request_name => 'containers', traits => ['NameInRequest']);
  has Cpu => (is => 'ro', isa => 'Str', request_name => 'cpu', traits => ['NameInRequest']);
  has CreatedAt => (is => 'ro', isa => 'Str', request_name => 'createdAt', traits => ['NameInRequest']);
  has DesiredStatus => (is => 'ro', isa => 'Str', request_name => 'desiredStatus', traits => ['NameInRequest']);
  has EnableExecuteCommand => (is => 'ro', isa => 'Bool', request_name => 'enableExecuteCommand', traits => ['NameInRequest']);
  has EphemeralStorage => (is => 'ro', isa => 'Paws::ECS::EphemeralStorage', request_name => 'ephemeralStorage', traits => ['NameInRequest']);
  has ExecutionStoppedAt => (is => 'ro', isa => 'Str', request_name => 'executionStoppedAt', traits => ['NameInRequest']);
  has FargateEphemeralStorage => (is => 'ro', isa => 'Paws::ECS::TaskEphemeralStorage', request_name => 'fargateEphemeralStorage', traits => ['NameInRequest']);
  has Group => (is => 'ro', isa => 'Str', request_name => 'group', traits => ['NameInRequest']);
  has HealthStatus => (is => 'ro', isa => 'Str', request_name => 'healthStatus', traits => ['NameInRequest']);
  has InferenceAccelerators => (is => 'ro', isa => 'ArrayRef[Paws::ECS::InferenceAccelerator]', request_name => 'inferenceAccelerators', traits => ['NameInRequest']);
  has LastStatus => (is => 'ro', isa => 'Str', request_name => 'lastStatus', traits => ['NameInRequest']);
  has LaunchType => (is => 'ro', isa => 'Str', request_name => 'launchType', traits => ['NameInRequest']);
  has Memory => (is => 'ro', isa => 'Str', request_name => 'memory', traits => ['NameInRequest']);
  has Overrides => (is => 'ro', isa => 'Paws::ECS::TaskOverride', request_name => 'overrides', traits => ['NameInRequest']);
  has PlatformFamily => (is => 'ro', isa => 'Str', request_name => 'platformFamily', traits => ['NameInRequest']);
  has PlatformVersion => (is => 'ro', isa => 'Str', request_name => 'platformVersion', traits => ['NameInRequest']);
  has PullStartedAt => (is => 'ro', isa => 'Str', request_name => 'pullStartedAt', traits => ['NameInRequest']);
  has PullStoppedAt => (is => 'ro', isa => 'Str', request_name => 'pullStoppedAt', traits => ['NameInRequest']);
  has StartedAt => (is => 'ro', isa => 'Str', request_name => 'startedAt', traits => ['NameInRequest']);
  has StartedBy => (is => 'ro', isa => 'Str', request_name => 'startedBy', traits => ['NameInRequest']);
  has StopCode => (is => 'ro', isa => 'Str', request_name => 'stopCode', traits => ['NameInRequest']);
  has StoppedAt => (is => 'ro', isa => 'Str', request_name => 'stoppedAt', traits => ['NameInRequest']);
  has StoppedReason => (is => 'ro', isa => 'Str', request_name => 'stoppedReason', traits => ['NameInRequest']);
  has StoppingAt => (is => 'ro', isa => 'Str', request_name => 'stoppingAt', traits => ['NameInRequest']);
  has Tags => (is => 'ro', isa => 'ArrayRef[Paws::ECS::Tag]', request_name => 'tags', traits => ['NameInRequest']);
  has TaskArn => (is => 'ro', isa => 'Str', request_name => 'taskArn', traits => ['NameInRequest']);
  has TaskDefinitionArn => (is => 'ro', isa => 'Str', request_name => 'taskDefinitionArn', traits => ['NameInRequest']);
  has Version => (is => 'ro', isa => 'Int', request_name => 'version', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::ECS::Task

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::ECS::Task object:

  $service_obj->Method(Att1 => { Attachments => $value, ..., Version => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::ECS::Task object:

  $result = $service_obj->Method(...);
  $result->Att1->Attachments

=head1 DESCRIPTION

Details on a task in a cluster.

=head1 ATTRIBUTES


=head2 Attachments => ArrayRef[L<Paws::ECS::Attachment>]

The Elastic Network Adapter that's associated with the task if the task
uses the C<awsvpc> network mode.


=head2 Attributes => ArrayRef[L<Paws::ECS::Attribute>]

The attributes of the task


=head2 AvailabilityZone => Str

The Availability Zone for the task.


=head2 CapacityProviderName => Str

The capacity provider that's associated with the task.


=head2 ClusterArn => Str

The ARN of the cluster that hosts the task.


=head2 Connectivity => Str

The connectivity status of a task.


=head2 ConnectivityAt => Str

The Unix timestamp for the time when the task last went into
C<CONNECTED> status.


=head2 ContainerInstanceArn => Str

The ARN of the container instances that host the task.


=head2 Containers => ArrayRef[L<Paws::ECS::Container>]

The containers that's associated with the task.


=head2 Cpu => Str

The number of CPU units used by the task as expressed in a task
definition. It can be expressed as an integer using CPU units (for
example, C<1024>). It can also be expressed as a string using vCPUs
(for example, C<1 vCPU> or C<1 vcpu>). String values are converted to
an integer that indicates the CPU units when the task definition is
registered.

If you're using the EC2 launch type or the external launch type, this
field is optional. Supported values are between C<128> CPU units
(C<0.125> vCPUs) and C<196608> CPU units (C<192> vCPUs). If you do not
specify a value, the parameter is ignored.

This field is required for Fargate. For information about the valid
values, see Task size
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 CreatedAt => Str

The Unix timestamp for the time when the task was created. More
specifically, it's for the time when the task entered the C<PENDING>
state.


=head2 DesiredStatus => Str

The desired status of the task. For more information, see Task
Lifecycle
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html).


=head2 EnableExecuteCommand => Bool

Determines whether execute command functionality is turned on for this
task. If C<true>, execute command functionality is turned on all the
containers in the task.


=head2 EphemeralStorage => L<Paws::ECS::EphemeralStorage>

The ephemeral storage settings for the task.


=head2 ExecutionStoppedAt => Str

The Unix timestamp for the time when the task execution stopped.


=head2 FargateEphemeralStorage => L<Paws::ECS::TaskEphemeralStorage>

The Fargate ephemeral storage settings for the task.


=head2 Group => Str

The name of the task group that's associated with the task.


=head2 HealthStatus => Str

The health status for the task. It's determined by the health of the
essential containers in the task. If all essential containers in the
task are reporting as C<HEALTHY>, the task status also reports as
C<HEALTHY>. If any essential containers in the task are reporting as
C<UNHEALTHY> or C<UNKNOWN>, the task status also reports as
C<UNHEALTHY> or C<UNKNOWN>.

The Amazon ECS container agent doesn't monitor or report on Docker
health checks that are embedded in a container image and not specified
in the container definition. For example, this includes those specified
in a parent image or from the image's Dockerfile. Health check
parameters that are specified in a container definition override any
Docker health checks that are found in the container image.


=head2 InferenceAccelerators => ArrayRef[L<Paws::ECS::InferenceAccelerator>]

The Elastic Inference accelerator that's associated with the task.


=head2 LastStatus => Str

The last known status for the task. For more information, see Task
Lifecycle
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html).


=head2 LaunchType => Str

The infrastructure where your task runs on. For more information, see
Amazon ECS launch types
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 Memory => Str

The amount of memory (in MiB) that the task uses as expressed in a task
definition. It can be expressed as an integer using MiB (for example,
C<1024>). If it's expressed as a string using GB (for example, C<1GB>
or C<1 GB>), it's converted to an integer indicating the MiB when the
task definition is registered.

If you use the EC2 launch type, this field is optional.

If you use the Fargate launch type, this field is required. You must
use one of the following values. The value that you choose determines
the range of supported values for the C<cpu> parameter.

=over

=item *

512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available C<cpu> values: 256
(.25 vCPU)

=item *

1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available C<cpu>
values: 512 (.5 vCPU)

=item *

2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168
(7 GB), 8192 (8 GB) - Available C<cpu> values: 1024 (1 vCPU)

=item *

Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) -
Available C<cpu> values: 2048 (2 vCPU)

=item *

Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) -
Available C<cpu> values: 4096 (4 vCPU)

=item *

Between 16 GB and 60 GB in 4 GB increments - Available C<cpu> values:
8192 (8 vCPU)

This option requires Linux platform C<1.4.0> or later.

=item *

Between 32GB and 120 GB in 8 GB increments - Available C<cpu> values:
16384 (16 vCPU)

This option requires Linux platform C<1.4.0> or later.

=back



=head2 Overrides => L<Paws::ECS::TaskOverride>

One or more container overrides.


=head2 PlatformFamily => Str

The operating system that your tasks are running on. A platform family
is specified only for tasks that use the Fargate launch type.

All tasks that run as part of this service must use the same
C<platformFamily> value as the service (for example, C<LINUX.>).


=head2 PlatformVersion => Str

The platform version where your task runs on. A platform version is
only specified for tasks that use the Fargate launch type. If you
didn't specify one, the C<LATEST> platform version is used. For more
information, see Fargate Platform Versions
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 PullStartedAt => Str

The Unix timestamp for the time when the container image pull began.


=head2 PullStoppedAt => Str

The Unix timestamp for the time when the container image pull
completed.


=head2 StartedAt => Str

The Unix timestamp for the time when the task started. More
specifically, it's for the time when the task transitioned from the
C<PENDING> state to the C<RUNNING> state.


=head2 StartedBy => Str

The tag specified when a task is started. If an Amazon ECS service
started the task, the C<startedBy> parameter contains the deployment ID
of that service.


=head2 StopCode => Str

The stop code indicating why a task was stopped. The C<stoppedReason>
might contain additional details.

For more information about stop code, see Stopped tasks error codes
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/stopped-task-error-codes.html)
in the I<Amazon ECS Developer Guide>.


=head2 StoppedAt => Str

The Unix timestamp for the time when the task was stopped. More
specifically, it's for the time when the task transitioned from the
C<RUNNING> state to the C<STOPPED> state.


=head2 StoppedReason => Str

The reason that the task was stopped.


=head2 StoppingAt => Str

The Unix timestamp for the time when the task stops. More specifically,
it's for the time when the task transitions from the C<RUNNING> state
to C<STOPPING>.


=head2 Tags => ArrayRef[L<Paws::ECS::Tag>]

The metadata that you apply to the task to help you categorize and
organize the task. Each tag consists of a key and an optional value.
You define both the key and value.

The following basic restrictions apply to tags:

=over

=item *

Maximum number of tags per resource - 50

=item *

For each resource, each tag key must be unique, and each tag key can
have only one value.

=item *

Maximum key length - 128 Unicode characters in UTF-8

=item *

Maximum value length - 256 Unicode characters in UTF-8

=item *

If your tagging schema is used across multiple services and resources,
remember that other services may have restrictions on allowed
characters. Generally allowed characters are: letters, numbers, and
spaces representable in UTF-8, and the following characters: + - = . _
: / @.

=item *

Tag keys and values are case-sensitive.

=item *

Do not use C<aws:>, C<AWS:>, or any upper or lowercase combination of
such as a prefix for either keys or values as it is reserved for Amazon
Web Services use. You cannot edit or delete tag keys or values with
this prefix. Tags with this prefix do not count against your tags per
resource limit.

=back



=head2 TaskArn => Str

The Amazon Resource Name (ARN) of the task.


=head2 TaskDefinitionArn => Str

The ARN of the task definition that creates the task.


=head2 Version => Int

The version counter for the task. Every time a task experiences a
change that starts a CloudWatch event, the version counter is
incremented. If you replicate your Amazon ECS task state with
CloudWatch Events, you can compare the version of a task reported by
the Amazon ECS API actions with the version reported in CloudWatch
Events for the task (inside the C<detail> object) to verify that the
version in your event stream is current.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::ECS>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

