# Generated by default/object.tt
package Paws::ECS::SystemControl;
  use Moose;
  has Namespace => (is => 'ro', isa => 'Str', request_name => 'namespace', traits => ['NameInRequest']);
  has Value => (is => 'ro', isa => 'Str', request_name => 'value', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::ECS::SystemControl

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::ECS::SystemControl object:

  $service_obj->Method(Att1 => { Namespace => $value, ..., Value => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::ECS::SystemControl object:

  $result = $service_obj->Method(...);
  $result->Att1->Namespace

=head1 DESCRIPTION

A list of namespaced kernel parameters to set in the container. This
parameter maps to C<Sysctls> in the docker container create command and
the C<--sysctl> option to docker run. For example, you can configure
C<net.ipv4.tcp_keepalive_time> setting to maintain longer lived
connections.

We don't recommend that you specify network-related C<systemControls>
parameters for multiple containers in a single task that also uses
either the C<awsvpc> or C<host> network mode. Doing this has the
following disadvantages:

=over

=item *

For tasks that use the C<awsvpc> network mode including Fargate, if you
set C<systemControls> for any container, it applies to all containers
in the task. If you set different C<systemControls> for multiple
containers in a single task, the container that's started last
determines which C<systemControls> take effect.

=item *

For tasks that use the C<host> network mode, the network namespace
C<systemControls> aren't supported.

=back

If you're setting an IPC resource namespace to use for the containers
in the task, the following conditions apply to your system controls.
For more information, see IPC mode
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ipcmode).

=over

=item *

For tasks that use the C<host> IPC mode, IPC namespace
C<systemControls> aren't supported.

=item *

For tasks that use the C<task> IPC mode, IPC namespace
C<systemControls> values apply to all containers within a task.

=back

This parameter is not supported for Windows containers.

This parameter is only supported for tasks that are hosted on Fargate
if the tasks are using platform version C<1.4.0> or later (Linux). This
isn't supported for Windows containers on Fargate.

=head1 ATTRIBUTES


=head2 Namespace => Str

The namespaced kernel parameter to set a C<value> for.


=head2 Value => Str

The namespaced kernel parameter to set a C<value> for.

Valid IPC namespace values: C<"kernel.msgmax" | "kernel.msgmnb" |
"kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" |
"kernel.shmmni" | "kernel.shm_rmid_forced">, and C<Sysctls> that start
with C<"fs.mqueue.*">

Valid network namespace values: C<Sysctls> that start with C<"net.*">.
Only namespaced C<Sysctls> that exist within the container starting
with "net.* are accepted.

All of these values are supported by Fargate.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::ECS>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

