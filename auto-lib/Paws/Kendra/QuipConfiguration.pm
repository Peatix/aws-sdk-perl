# Generated by default/object.tt
package Paws::Kendra::QuipConfiguration;
  use Moose;
  has AttachmentFieldMappings => (is => 'ro', isa => 'ArrayRef[Paws::Kendra::DataSourceToIndexFieldMapping]');
  has CrawlAttachments => (is => 'ro', isa => 'Bool');
  has CrawlChatRooms => (is => 'ro', isa => 'Bool');
  has CrawlFileComments => (is => 'ro', isa => 'Bool');
  has Domain => (is => 'ro', isa => 'Str', required => 1);
  has ExclusionPatterns => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has FolderIds => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has InclusionPatterns => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has MessageFieldMappings => (is => 'ro', isa => 'ArrayRef[Paws::Kendra::DataSourceToIndexFieldMapping]');
  has SecretArn => (is => 'ro', isa => 'Str', required => 1);
  has ThreadFieldMappings => (is => 'ro', isa => 'ArrayRef[Paws::Kendra::DataSourceToIndexFieldMapping]');
  has VpcConfiguration => (is => 'ro', isa => 'Paws::Kendra::DataSourceVpcConfiguration');

1;

### main pod documentation begin ###

=head1 NAME

Paws::Kendra::QuipConfiguration

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Kendra::QuipConfiguration object:

  $service_obj->Method(Att1 => { AttachmentFieldMappings => $value, ..., VpcConfiguration => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Kendra::QuipConfiguration object:

  $result = $service_obj->Method(...);
  $result->Att1->AttachmentFieldMappings

=head1 DESCRIPTION

Provides the configuration information to connect to Quip as your data
source.

=head1 ATTRIBUTES


=head2 AttachmentFieldMappings => ArrayRef[L<Paws::Kendra::DataSourceToIndexFieldMapping>]

A list of C<DataSourceToIndexFieldMapping> objects that map attributes
or field names of Quip attachments to Amazon Kendra index field names.
To create custom fields, use the C<UpdateIndex> API before you map to
Quip fields. For more information, see Mapping data source fields
(https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The
Quip field names must exist in your Quip custom metadata.


=head2 CrawlAttachments => Bool

C<TRUE> to index attachments.


=head2 CrawlChatRooms => Bool

C<TRUE> to index the contents of chat rooms.


=head2 CrawlFileComments => Bool

C<TRUE> to index file comments.


=head2 B<REQUIRED> Domain => Str

The Quip site domain. For example,
I<https://quip-company.quipdomain.com/browse>. The domain in this
example is "quipdomain".


=head2 ExclusionPatterns => ArrayRef[Str|Undef]

A list of regular expression patterns to exclude certain files in your
Quip file system. Files that match the patterns are excluded from the
index. Files that donE<rsquo>t match the patterns are included in the
index. If a file matches both an inclusion pattern and an exclusion
pattern, the exclusion pattern takes precedence, and the file isn't
included in the index.


=head2 FolderIds => ArrayRef[Str|Undef]

The identifiers of the Quip folders you want to index. You can find the
folder ID in your browser URL when you access your folder in Quip. For
example,
I<https://quip-company.quipdomain.com/zlLuOVNSarTL/folder-name>. The
folder ID in this example is "zlLuOVNSarTL".


=head2 InclusionPatterns => ArrayRef[Str|Undef]

A list of regular expression patterns to include certain files in your
Quip file system. Files that match the patterns are included in the
index. Files that don't match the patterns are excluded from the index.
If a file matches both an inclusion pattern and an exclusion pattern,
the exclusion pattern takes precedence, and the file isn't included in
the index.


=head2 MessageFieldMappings => ArrayRef[L<Paws::Kendra::DataSourceToIndexFieldMapping>]

A list of C<DataSourceToIndexFieldMapping> objects that map attributes
or field names of Quip messages to Amazon Kendra index field names. To
create custom fields, use the C<UpdateIndex> API before you map to Quip
fields. For more information, see Mapping data source fields
(https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The
Quip field names must exist in your Quip custom metadata.


=head2 B<REQUIRED> SecretArn => Str

The Amazon Resource Name (ARN) of an Secrets Manager secret that
contains the key-value pairs that are required to connect to your Quip.
The secret must contain a JSON structure with the following keys:

=over

=item *

accessTokenE<mdash>The token created in Quip. For more information, see
Using a Quip data source
(https://docs.aws.amazon.com/kendra/latest/dg/data-source-slack.html).

=back



=head2 ThreadFieldMappings => ArrayRef[L<Paws::Kendra::DataSourceToIndexFieldMapping>]

A list of C<DataSourceToIndexFieldMapping> objects that map attributes
or field names of Quip threads to Amazon Kendra index field names. To
create custom fields, use the C<UpdateIndex> API before you map to Quip
fields. For more information, see Mapping data source fields
(https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html). The
Quip field names must exist in your Quip custom metadata.


=head2 VpcConfiguration => L<Paws::Kendra::DataSourceVpcConfiguration>

Configuration information for an Amazon Virtual Private Cloud (VPC) to
connect to your Quip. For more information, see Configuring a VPC
(https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html).



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Kendra>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

