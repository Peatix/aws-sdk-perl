# Generated by default/object.tt
package Paws::SageMaker::S3ModelDataSource;
  use Moose;
  has CompressionType => (is => 'ro', isa => 'Str', required => 1);
  has ETag => (is => 'ro', isa => 'Str');
  has HubAccessConfig => (is => 'ro', isa => 'Paws::SageMaker::InferenceHubAccessConfig');
  has ManifestEtag => (is => 'ro', isa => 'Str');
  has ManifestS3Uri => (is => 'ro', isa => 'Str');
  has ModelAccessConfig => (is => 'ro', isa => 'Paws::SageMaker::ModelAccessConfig');
  has S3DataType => (is => 'ro', isa => 'Str', required => 1);
  has S3Uri => (is => 'ro', isa => 'Str', required => 1);

1;

### main pod documentation begin ###

=head1 NAME

Paws::SageMaker::S3ModelDataSource

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::SageMaker::S3ModelDataSource object:

  $service_obj->Method(Att1 => { CompressionType => $value, ..., S3Uri => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::SageMaker::S3ModelDataSource object:

  $result = $service_obj->Method(...);
  $result->Att1->CompressionType

=head1 DESCRIPTION

Specifies the S3 location of ML model data to deploy.

=head1 ATTRIBUTES


=head2 B<REQUIRED> CompressionType => Str

Specifies how the ML model data is prepared.

If you choose C<Gzip> and choose C<S3Object> as the value of
C<S3DataType>, C<S3Uri> identifies an object that is a gzip-compressed
TAR archive. SageMaker will attempt to decompress and untar the object
during model deployment.

If you choose C<None> and chooose C<S3Object> as the value of
C<S3DataType>, C<S3Uri> identifies an object that represents an
uncompressed ML model to deploy.

If you choose None and choose C<S3Prefix> as the value of
C<S3DataType>, C<S3Uri> identifies a key name prefix, under which all
objects represents the uncompressed ML model to deploy.

If you choose None, then SageMaker will follow rules below when
creating model data files under /opt/ml/model directory for use by your
inference code:

=over

=item *

If you choose C<S3Object> as the value of C<S3DataType>, then SageMaker
will split the key of the S3 object referenced by C<S3Uri> by slash
(/), and use the last part as the filename of the file holding the
content of the S3 object.

=item *

If you choose C<S3Prefix> as the value of C<S3DataType>, then for each
S3 object under the key name pefix referenced by C<S3Uri>, SageMaker
will trim its key by the prefix, and use the remainder as the path
(relative to C</opt/ml/model>) of the file holding the content of the
S3 object. SageMaker will split the remainder by slash (/), using
intermediate parts as directory names and the last part as filename of
the file holding the content of the S3 object.

=item *

Do not use any of the following as file names or directory names:

=over

=item *

An empty or blank string

=item *

A string which contains null bytes

=item *

A string longer than 255 bytes

=item *

A single dot (C<.>)

=item *

A double dot (C<..>)

=back

=item *

Ambiguous file names will result in model deployment failure. For
example, if your uncompressed ML model consists of two S3 objects
C<s3://mybucket/model/weights> and C<s3://mybucket/model/weights/part1>
and you specify C<s3://mybucket/model/> as the value of C<S3Uri> and
C<S3Prefix> as the value of C<S3DataType>, then it will result in name
clash between C</opt/ml/model/weights> (a regular file) and
C</opt/ml/model/weights/> (a directory).

=item *

Do not organize the model artifacts in S3 console using folders
(https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html).
When you create a folder in S3 console, S3 creates a 0-byte object with
a key set to the folder name you provide. They key of the 0-byte object
ends with a slash (/) which violates SageMaker restrictions on model
artifact file names, leading to model deployment failure.

=back



=head2 ETag => Str

The ETag associated with S3 URI.


=head2 HubAccessConfig => L<Paws::SageMaker::InferenceHubAccessConfig>

Configuration information for hub access.


=head2 ManifestEtag => Str

The ETag associated with Manifest S3 URI.


=head2 ManifestS3Uri => Str

The Amazon S3 URI of the manifest file. The manifest file is a CSV file
that stores the artifact locations.


=head2 ModelAccessConfig => L<Paws::SageMaker::ModelAccessConfig>

Specifies the access configuration file for the ML model. You can
explicitly accept the model end-user license agreement (EULA) within
the C<ModelAccessConfig>. You are responsible for reviewing and
complying with any applicable license terms and making sure they are
acceptable for your use case before downloading or using a model.


=head2 B<REQUIRED> S3DataType => Str

Specifies the type of ML model data to deploy.

If you choose C<S3Prefix>, C<S3Uri> identifies a key name prefix.
SageMaker uses all objects that match the specified key name prefix as
part of the ML model data to deploy. A valid key name prefix identified
by C<S3Uri> always ends with a forward slash (/).

If you choose C<S3Object>, C<S3Uri> identifies an object that is the ML
model data to deploy.


=head2 B<REQUIRED> S3Uri => Str

Specifies the S3 path of ML model data to deploy.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::SageMaker>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

