# Generated by default/object.tt
package Paws::EntityResolution::SchemaInputAttribute;
  use Moose;
  has FieldName => (is => 'ro', isa => 'Str', request_name => 'fieldName', traits => ['NameInRequest'], required => 1);
  has GroupName => (is => 'ro', isa => 'Str', request_name => 'groupName', traits => ['NameInRequest']);
  has Hashed => (is => 'ro', isa => 'Bool', request_name => 'hashed', traits => ['NameInRequest']);
  has MatchKey => (is => 'ro', isa => 'Str', request_name => 'matchKey', traits => ['NameInRequest']);
  has SubType => (is => 'ro', isa => 'Str', request_name => 'subType', traits => ['NameInRequest']);
  has Type => (is => 'ro', isa => 'Str', request_name => 'type', traits => ['NameInRequest'], required => 1);

1;

### main pod documentation begin ###

=head1 NAME

Paws::EntityResolution::SchemaInputAttribute

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::EntityResolution::SchemaInputAttribute object:

  $service_obj->Method(Att1 => { FieldName => $value, ..., Type => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::EntityResolution::SchemaInputAttribute object:

  $result = $service_obj->Method(...);
  $result->Att1->FieldName

=head1 DESCRIPTION

A configuration object for defining input data fields in Entity
Resolution. The C<SchemaInputAttribute> specifies how individual fields
in your input data should be processed and matched.

=head1 ATTRIBUTES


=head2 B<REQUIRED> FieldName => Str

A string containing the field name.


=head2 GroupName => Str

A string that instructs Entity Resolution to combine several columns
into a unified column with the identical attribute type.

For example, when working with columns such as C<NAME_FIRST>,
C<NAME_MIDDLE>, and C<NAME_LAST>, assigning them a common C<groupName>
will prompt Entity Resolution to concatenate them into a single value.


=head2 Hashed => Bool

Indicates if the column values are hashed in the schema input.

If the value is set to C<TRUE>, the column values are hashed.

If the value is set to C<FALSE>, the column values are cleartext.


=head2 MatchKey => Str

A key that allows grouping of multiple input attributes into a unified
matching group.

For example, consider a scenario where the source table contains
various addresses, such as C<business_address> and C<shipping_address>.
By assigning a C<matchKey> called C<address> to both attributes, Entity
Resolution will match records across these fields to create a
consolidated matching group.

If no C<matchKey> is specified for a column, it won't be utilized for
matching purposes but will still be included in the output table.


=head2 SubType => Str

The subtype of the attribute, selected from a list of values.


=head2 B<REQUIRED> Type => Str

The type of the attribute, selected from a list of values.

LiveRamp supports: C<NAME> | C<NAME_FIRST> | C<NAME_MIDDLE> |
C<NAME_LAST> | C<ADDRESS> | C<ADDRESS_STREET1> | C<ADDRESS_STREET2> |
C<ADDRESS_STREET3> | C<ADDRESS_CITY> | C<ADDRESS_STATE> |
C<ADDRESS_COUNTRY> | C<ADDRESS_POSTALCODE> | C<PHONE> | C<PHONE_NUMBER>
| C<EMAIL_ADDRESS> | C<UNIQUE_ID> | C<PROVIDER_ID>

TransUnion supports: C<NAME> | C<NAME_FIRST> | C<NAME_LAST> |
C<ADDRESS> | C<ADDRESS_CITY> | C<ADDRESS_STATE> | C<ADDRESS_COUNTRY> |
C<ADDRESS_POSTALCODE> | C<PHONE_NUMBER> | C<EMAIL_ADDRESS> |
C<UNIQUE_ID> | C<IPV4> | C<IPV6> | C<MAID>

Unified ID 2.0 supports: C<PHONE_NUMBER> | C<EMAIL_ADDRESS> |
C<UNIQUE_ID>

Normalization is only supported for C<NAME>, C<ADDRESS>, C<PHONE>, and
C<EMAIL_ADDRESS>.

If you want to normalize C<NAME_FIRST>, C<NAME_MIDDLE>, and
C<NAME_LAST>, you must group them by assigning them to the C<NAME>
C<groupName>.

If you want to normalize C<ADDRESS_STREET1>, C<ADDRESS_STREET2>,
C<ADDRESS_STREET3>, C<ADDRESS_CITY>, C<ADDRESS_STATE>,
C<ADDRESS_COUNTRY>, and C<ADDRESS_POSTALCODE>, you must group them by
assigning them to the C<ADDRESS> C<groupName>.

If you want to normalize C<PHONE_NUMBER> and C<PHONE_COUNTRYCODE>, you
must group them by assigning them to the C<PHONE> C<groupName>.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::EntityResolution>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

