# Generated by default/object.tt
package Paws::EntityResolution::NamespaceRuleBasedProperties;
  use Moose;
  has AttributeMatchingModel => (is => 'ro', isa => 'Str', request_name => 'attributeMatchingModel', traits => ['NameInRequest']);
  has RecordMatchingModels => (is => 'ro', isa => 'ArrayRef[Str|Undef]', request_name => 'recordMatchingModels', traits => ['NameInRequest']);
  has RuleDefinitionTypes => (is => 'ro', isa => 'ArrayRef[Str|Undef]', request_name => 'ruleDefinitionTypes', traits => ['NameInRequest']);
  has Rules => (is => 'ro', isa => 'ArrayRef[Paws::EntityResolution::Rule]', request_name => 'rules', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::EntityResolution::NamespaceRuleBasedProperties

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::EntityResolution::NamespaceRuleBasedProperties object:

  $service_obj->Method(Att1 => { AttributeMatchingModel => $value, ..., Rules => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::EntityResolution::NamespaceRuleBasedProperties object:

  $result = $service_obj->Method(...);
  $result->Att1->AttributeMatchingModel

=head1 DESCRIPTION

The rule-based properties of an ID namespace. These properties define
how the ID namespace can be used in an ID mapping workflow.

=head1 ATTRIBUTES


=head2 AttributeMatchingModel => Str

The comparison type. You can either choose C<ONE_TO_ONE> or
C<MANY_TO_MANY> as the C<attributeMatchingModel>.

If you choose C<MANY_TO_MANY>, the system can match attributes across
the sub-types of an attribute type. For example, if the value of the
C<Email> field of Profile A matches the value of C<BusinessEmail> field
of Profile B, the two profiles are matched on the C<Email> attribute
type.

If you choose C<ONE_TO_ONE>, the system can only match attributes if
the sub-types are an exact match. For example, for the C<Email>
attribute type, the system will only consider it a match if the value
of the C<Email> field of Profile A matches the value of the C<Email>
field of Profile B.


=head2 RecordMatchingModels => ArrayRef[Str|Undef]

The type of matching record that is allowed to be used in an ID mapping
workflow.

If the value is set to C<ONE_SOURCE_TO_ONE_TARGET>, only one record in
the source is matched to one record in the target.

If the value is set to C<MANY_SOURCE_TO_ONE_TARGET>, all matching
records in the source are matched to one record in the target.


=head2 RuleDefinitionTypes => ArrayRef[Str|Undef]

The sets of rules you can use in an ID mapping workflow. The
limitations specified for the source and target must be compatible.


=head2 Rules => ArrayRef[L<Paws::EntityResolution::Rule>]

The rules for the ID namespace.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::EntityResolution>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

