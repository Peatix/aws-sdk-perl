# Generated by default/object.tt
package Paws::Synthetics::CanaryCodeInput;
  use Moose;
  has Handler => (is => 'ro', isa => 'Str', required => 1);
  has S3Bucket => (is => 'ro', isa => 'Str');
  has S3Key => (is => 'ro', isa => 'Str');
  has S3Version => (is => 'ro', isa => 'Str');
  has ZipFile => (is => 'ro', isa => 'Str');

1;

### main pod documentation begin ###

=head1 NAME

Paws::Synthetics::CanaryCodeInput

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Synthetics::CanaryCodeInput object:

  $service_obj->Method(Att1 => { Handler => $value, ..., ZipFile => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Synthetics::CanaryCodeInput object:

  $result = $service_obj->Method(...);
  $result->Att1->Handler

=head1 DESCRIPTION

Use this structure to input your script code for the canary. This
structure contains the Lambda handler with the location where the
canary should start running the script. If the script is stored in an
S3 bucket, the bucket name, key, and version are also included. If the
script was passed into the canary directly, the script code is
contained in the value of C<Zipfile>.

If you are uploading your canary scripts with an Amazon S3 bucket, your
zip file should include your script in a certain folder structure.

=over

=item *

For Node.js canaries, the folder structure must be
C<nodejs/node_modules/I<myCanaryFilename.js> > For more information,
see Packaging your Node.js canary files
(https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_WritingCanary_Nodejs.html#CloudWatch_Synthetics_Canaries_package)

=item *

For Python canaries, the folder structure must be
C<python/I<myCanaryFilename.py> > or
C<python/I<myFolder/myCanaryFilename.py> > For more information, see
Packaging your Python canary files
(https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_WritingCanary_Python.html#CloudWatch_Synthetics_Canaries_WritingCanary_Python_package)

=back


=head1 ATTRIBUTES


=head2 B<REQUIRED> Handler => Str

The entry point to use for the source code when running the canary. For
canaries that use the C<syn-python-selenium-1.0> runtime or a
C<syn-nodejs.puppeteer> runtime earlier than
C<syn-nodejs.puppeteer-3.4>, the handler must be specified as C<
I<fileName>.handler>. For C<syn-python-selenium-1.1>,
C<syn-nodejs.puppeteer-3.4>, and later runtimes, the handler can be
specified as C< I<fileName>.I<functionName> >, or you can specify a
folder where canary scripts reside as C<
I<folder>/I<fileName>.I<functionName> >.


=head2 S3Bucket => Str

If your canary script is located in S3, specify the bucket name here.
Do not include C<s3://> as the start of the bucket name.


=head2 S3Key => Str

The S3 key of your script. For more information, see Working with
Amazon S3 Objects
(https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html).


=head2 S3Version => Str

The S3 version ID of your script.


=head2 ZipFile => Str

If you input your canary script directly into the canary instead of
referring to an S3 location, the value of this parameter is the
base64-encoded contents of the .zip file that contains the script. It
must be smaller than 225 Kb.

For large canary scripts, we recommend that you use an S3 location
instead of inputting it directly with this parameter.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Synthetics>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

