# Generated by default/object.tt
package Paws::CodeGuruReviewer::RepositoryAssociation;
  use Moose;
  has AssociationArn => (is => 'ro', isa => 'Str');
  has AssociationId => (is => 'ro', isa => 'Str');
  has ConnectionArn => (is => 'ro', isa => 'Str');
  has CreatedTimeStamp => (is => 'ro', isa => 'Str');
  has KMSKeyDetails => (is => 'ro', isa => 'Paws::CodeGuruReviewer::KMSKeyDetails');
  has LastUpdatedTimeStamp => (is => 'ro', isa => 'Str');
  has Name => (is => 'ro', isa => 'Str');
  has Owner => (is => 'ro', isa => 'Str');
  has ProviderType => (is => 'ro', isa => 'Str');
  has S3RepositoryDetails => (is => 'ro', isa => 'Paws::CodeGuruReviewer::S3RepositoryDetails');
  has State => (is => 'ro', isa => 'Str');
  has StateReason => (is => 'ro', isa => 'Str');

1;

### main pod documentation begin ###

=head1 NAME

Paws::CodeGuruReviewer::RepositoryAssociation

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::CodeGuruReviewer::RepositoryAssociation object:

  $service_obj->Method(Att1 => { AssociationArn => $value, ..., StateReason => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::CodeGuruReviewer::RepositoryAssociation object:

  $result = $service_obj->Method(...);
  $result->Att1->AssociationArn

=head1 DESCRIPTION

Information about a repository association. The
DescribeRepositoryAssociation
(https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_DescribeRepositoryAssociation.html)
operation returns a C<RepositoryAssociation> object.

=head1 ATTRIBUTES


=head2 AssociationArn => Str

The Amazon Resource Name (ARN) identifying the repository association.


=head2 AssociationId => Str

The ID of the repository association.


=head2 ConnectionArn => Str

The Amazon Resource Name (ARN) of an Amazon Web Services CodeStar
Connections connection. Its format is
C<arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id>.
For more information, see Connection
(https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html)
in the I<Amazon Web Services CodeStar Connections API Reference>.


=head2 CreatedTimeStamp => Str

The time, in milliseconds since the epoch, when the repository
association was created.


=head2 KMSKeyDetails => L<Paws::CodeGuruReviewer::KMSKeyDetails>

A C<KMSKeyDetails> object that contains:

=over

=item *

The encryption option for this repository association. It is either
owned by Amazon Web Services Key Management Service (KMS)
(C<AWS_OWNED_CMK>) or customer managed (C<CUSTOMER_MANAGED_CMK>).

=item *

The ID of the Amazon Web Services KMS key that is associated with this
repository association.

=back



=head2 LastUpdatedTimeStamp => Str

The time, in milliseconds since the epoch, when the repository
association was last updated.


=head2 Name => Str

The name of the repository.


=head2 Owner => Str

The owner of the repository. For an Amazon Web Services CodeCommit
repository, this is the Amazon Web Services account ID of the account
that owns the repository. For a GitHub, GitHub Enterprise Server, or
Bitbucket repository, this is the username for the account that owns
the repository. For an S3 repository, it can be the username or Amazon
Web Services account ID.


=head2 ProviderType => Str

The provider type of the repository association.


=head2 S3RepositoryDetails => L<Paws::CodeGuruReviewer::S3RepositoryDetails>




=head2 State => Str

The state of the repository association.

The valid repository association states are:

=over

=item *

B<Associated>: The repository association is complete.

=item *

B<Associating>: CodeGuru Reviewer is:

=over

=item *

Setting up pull request notifications. This is required for pull
requests to trigger a CodeGuru Reviewer review.

If your repository C<ProviderType> is C<GitHub>, C<GitHub Enterprise
Server>, or C<Bitbucket>, CodeGuru Reviewer creates webhooks in your
repository to trigger CodeGuru Reviewer reviews. If you delete these
webhooks, reviews of code in your repository cannot be triggered.

=item *

Setting up source code access. This is required for CodeGuru Reviewer
to securely clone code in your repository.

=back

=item *

B<Failed>: The repository failed to associate or disassociate.

=item *

B<Disassociating>: CodeGuru Reviewer is removing the repository's pull
request notifications and source code access.

=item *

B<Disassociated>: CodeGuru Reviewer successfully disassociated the
repository. You can create a new association with this repository if
you want to review source code in it later. You can control access to
code reviews created in anassociated repository with tags after it has
been disassociated. For more information, see Using tags to control
access to associated repositories
(https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html)
in the I<Amazon CodeGuru Reviewer User Guide>.

=back



=head2 StateReason => Str

A description of why the repository association is in the current
state.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::CodeGuruReviewer>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

