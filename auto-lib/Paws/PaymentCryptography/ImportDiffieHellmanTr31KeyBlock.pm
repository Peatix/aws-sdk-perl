# Generated by default/object.tt
package Paws::PaymentCryptography::ImportDiffieHellmanTr31KeyBlock;
  use Moose;
  has CertificateAuthorityPublicKeyIdentifier => (is => 'ro', isa => 'Str', required => 1);
  has DerivationData => (is => 'ro', isa => 'Paws::PaymentCryptography::DiffieHellmanDerivationData', required => 1);
  has DeriveKeyAlgorithm => (is => 'ro', isa => 'Str', required => 1);
  has KeyDerivationFunction => (is => 'ro', isa => 'Str', required => 1);
  has KeyDerivationHashAlgorithm => (is => 'ro', isa => 'Str', required => 1);
  has PrivateKeyIdentifier => (is => 'ro', isa => 'Str', required => 1);
  has PublicKeyCertificate => (is => 'ro', isa => 'Str', required => 1);
  has WrappedKeyBlock => (is => 'ro', isa => 'Str', required => 1);

1;

### main pod documentation begin ###

=head1 NAME

Paws::PaymentCryptography::ImportDiffieHellmanTr31KeyBlock

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::PaymentCryptography::ImportDiffieHellmanTr31KeyBlock object:

  $service_obj->Method(Att1 => { CertificateAuthorityPublicKeyIdentifier => $value, ..., WrappedKeyBlock => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::PaymentCryptography::ImportDiffieHellmanTr31KeyBlock object:

  $result = $service_obj->Method(...);
  $result->Att1->CertificateAuthorityPublicKeyIdentifier

=head1 DESCRIPTION

Parameter information for key material import using the asymmetric ECDH
key exchange method.

=head1 ATTRIBUTES


=head2 B<REQUIRED> CertificateAuthorityPublicKeyIdentifier => Str

The C<keyARN> of the certificate that signed the client's
C<PublicKeyCertificate>.


=head2 B<REQUIRED> DerivationData => L<Paws::PaymentCryptography::DiffieHellmanDerivationData>

Derivation data used to derive an ECDH key.


=head2 B<REQUIRED> DeriveKeyAlgorithm => Str

The key algorithm of the derived ECDH key.


=head2 B<REQUIRED> KeyDerivationFunction => Str

The key derivation function to use for deriving a key using ECDH.


=head2 B<REQUIRED> KeyDerivationHashAlgorithm => Str

The hash type to use for deriving a key using ECDH.


=head2 B<REQUIRED> PrivateKeyIdentifier => Str

The C<keyARN> of the asymmetric ECC key.


=head2 B<REQUIRED> PublicKeyCertificate => Str

The client's public key certificate in PEM format (base64 encoded) to
use for ECDH key derivation.


=head2 B<REQUIRED> WrappedKeyBlock => Str

The ECDH wrapped key block to import.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::PaymentCryptography>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

