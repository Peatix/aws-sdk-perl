# Generated by default/object.tt
package Paws::AppSync::EnhancedMetricsConfig;
  use Moose;
  has DataSourceLevelMetricsBehavior => (is => 'ro', isa => 'Str', request_name => 'dataSourceLevelMetricsBehavior', traits => ['NameInRequest'], required => 1);
  has OperationLevelMetricsConfig => (is => 'ro', isa => 'Str', request_name => 'operationLevelMetricsConfig', traits => ['NameInRequest'], required => 1);
  has ResolverLevelMetricsBehavior => (is => 'ro', isa => 'Str', request_name => 'resolverLevelMetricsBehavior', traits => ['NameInRequest'], required => 1);

1;

### main pod documentation begin ###

=head1 NAME

Paws::AppSync::EnhancedMetricsConfig

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::AppSync::EnhancedMetricsConfig object:

  $service_obj->Method(Att1 => { DataSourceLevelMetricsBehavior => $value, ..., ResolverLevelMetricsBehavior => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::AppSync::EnhancedMetricsConfig object:

  $result = $service_obj->Method(...);
  $result->Att1->DataSourceLevelMetricsBehavior

=head1 DESCRIPTION

Enables and controls the enhanced metrics feature. Enhanced metrics
emit granular data on API usage and performance such as AppSync request
and error counts, latency, and cache hits/misses. All enhanced metric
data is sent to your CloudWatch account, and you can configure the
types of data that will be sent.

Enhanced metrics can be configured at the resolver, data source, and
operation levels. C<EnhancedMetricsConfig> contains three required
parameters, each controlling one of these categories:

=over

=item 1.

C<resolverLevelMetricsBehavior>: Controls how resolver metrics will be
emitted to CloudWatch. Resolver metrics include:

=over

=item *

GraphQL errors: The number of GraphQL errors that occurred.

=item *

Requests: The number of invocations that occurred during a request.

=item *

Latency: The time to complete a resolver invocation.

=item *

Cache hits: The number of cache hits during a request.

=item *

Cache misses: The number of cache misses during a request.

=back

These metrics can be emitted to CloudWatch per resolver or for all
resolvers in the request. Metrics will be recorded by API ID and
resolver name. C<resolverLevelMetricsBehavior> accepts one of these
values at a time:

=over

=item *

C<FULL_REQUEST_RESOLVER_METRICS>: Records and emits metric data for all
resolvers in the request.

=item *

C<PER_RESOLVER_METRICS>: Records and emits metric data for resolvers
that have the C<metricsConfig> value set to C<ENABLED>.

=back

=item 2.

C<dataSourceLevelMetricsBehavior>: Controls how data source metrics
will be emitted to CloudWatch. Data source metrics include:

=over

=item *

Requests: The number of invocations that occured during a request.

=item *

Latency: The time to complete a data source invocation.

=item *

Errors: The number of errors that occurred during a data source
invocation.

=back

These metrics can be emitted to CloudWatch per data source or for all
data sources in the request. Metrics will be recorded by API ID and
data source name. C<dataSourceLevelMetricsBehavior> accepts one of
these values at a time:

=over

=item *

C<FULL_REQUEST_DATA_SOURCE_METRICS>: Records and emits metric data for
all data sources in the request.

=item *

C<PER_DATA_SOURCE_METRICS>: Records and emits metric data for data
sources that have the C<metricsConfig> value set to C<ENABLED>.

=back

=item 3.

C<operationLevelMetricsConfig>: Controls how operation metrics will be
emitted to CloudWatch. Operation metrics include:

=over

=item *

Requests: The number of times a specified GraphQL operation was called.

=item *

GraphQL errors: The number of GraphQL errors that occurred during a
specified GraphQL operation.

=back

Metrics will be recorded by API ID and operation name. You can set the
value to C<ENABLED> or C<DISABLED>.

=back


=head1 ATTRIBUTES


=head2 B<REQUIRED> DataSourceLevelMetricsBehavior => Str

Controls how data source metrics will be emitted to CloudWatch. Data
source metrics include:

=over

=item *

Requests: The number of invocations that occured during a request.

=item *

Latency: The time to complete a data source invocation.

=item *

Errors: The number of errors that occurred during a data source
invocation.

=back

These metrics can be emitted to CloudWatch per data source or for all
data sources in the request. Metrics will be recorded by API ID and
data source name. C<dataSourceLevelMetricsBehavior> accepts one of
these values at a time:

=over

=item *

C<FULL_REQUEST_DATA_SOURCE_METRICS>: Records and emits metric data for
all data sources in the request.

=item *

C<PER_DATA_SOURCE_METRICS>: Records and emits metric data for data
sources that have the C<metricsConfig> value set to C<ENABLED>.

=back



=head2 B<REQUIRED> OperationLevelMetricsConfig => Str

Controls how operation metrics will be emitted to CloudWatch. Operation
metrics include:

=over

=item *

Requests: The number of times a specified GraphQL operation was called.

=item *

GraphQL errors: The number of GraphQL errors that occurred during a
specified GraphQL operation.

=back

Metrics will be recorded by API ID and operation name. You can set the
value to C<ENABLED> or C<DISABLED>.


=head2 B<REQUIRED> ResolverLevelMetricsBehavior => Str

Controls how resolver metrics will be emitted to CloudWatch. Resolver
metrics include:

=over

=item *

GraphQL errors: The number of GraphQL errors that occurred.

=item *

Requests: The number of invocations that occurred during a request.

=item *

Latency: The time to complete a resolver invocation.

=item *

Cache hits: The number of cache hits during a request.

=item *

Cache misses: The number of cache misses during a request.

=back

These metrics can be emitted to CloudWatch per resolver or for all
resolvers in the request. Metrics will be recorded by API ID and
resolver name. C<resolverLevelMetricsBehavior> accepts one of these
values at a time:

=over

=item *

C<FULL_REQUEST_RESOLVER_METRICS>: Records and emits metric data for all
resolvers in the request.

=item *

C<PER_RESOLVER_METRICS>: Records and emits metric data for resolvers
that have the C<metricsConfig> value set to C<ENABLED>.

=back




=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::AppSync>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

