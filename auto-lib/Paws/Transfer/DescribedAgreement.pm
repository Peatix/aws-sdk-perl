# Generated by default/object.tt
package Paws::Transfer::DescribedAgreement;
  use Moose;
  has AccessRole => (is => 'ro', isa => 'Str');
  has AgreementId => (is => 'ro', isa => 'Str');
  has Arn => (is => 'ro', isa => 'Str', required => 1);
  has BaseDirectory => (is => 'ro', isa => 'Str');
  has CustomDirectories => (is => 'ro', isa => 'Paws::Transfer::CustomDirectoriesType');
  has Description => (is => 'ro', isa => 'Str');
  has EnforceMessageSigning => (is => 'ro', isa => 'Str');
  has LocalProfileId => (is => 'ro', isa => 'Str');
  has PartnerProfileId => (is => 'ro', isa => 'Str');
  has PreserveFilename => (is => 'ro', isa => 'Str');
  has ServerId => (is => 'ro', isa => 'Str');
  has Status => (is => 'ro', isa => 'Str');
  has Tags => (is => 'ro', isa => 'ArrayRef[Paws::Transfer::Tag]');

1;

### main pod documentation begin ###

=head1 NAME

Paws::Transfer::DescribedAgreement

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Transfer::DescribedAgreement object:

  $service_obj->Method(Att1 => { AccessRole => $value, ..., Tags => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Transfer::DescribedAgreement object:

  $result = $service_obj->Method(...);
  $result->Att1->AccessRole

=head1 DESCRIPTION

Describes the properties of an agreement.

=head1 ATTRIBUTES


=head2 AccessRole => Str

Connectors are used to send files using either the AS2 or SFTP
protocol. For the access role, provide the Amazon Resource Name (ARN)
of the Identity and Access Management role to use.

B<For AS2 connectors>

With AS2, you can send files by calling C<StartFileTransfer> and
specifying the file paths in the request parameter, C<SendFilePaths>.
We use the fileE<rsquo>s parent directory (for example, for
C<--send-file-paths /bucket/dir/file.txt>, parent directory is
C</bucket/dir/>) to temporarily store a processed AS2 message file,
store the MDN when we receive them from the partner, and write a final
JSON file containing relevant metadata of the transmission. So, the
C<AccessRole> needs to provide read and write access to the parent
directory of the file location used in the C<StartFileTransfer>
request. Additionally, you need to provide read and write access to the
parent directory of the files that you intend to send with
C<StartFileTransfer>.

If you are using Basic authentication for your AS2 connector, the
access role requires the C<secretsmanager:GetSecretValue> permission
for the secret. If the secret is encrypted using a customer-managed key
instead of the Amazon Web Services managed key in Secrets Manager, then
the role also needs the C<kms:Decrypt> permission for that key.

B<For SFTP connectors>

Make sure that the access role provides read and write access to the
parent directory of the file location that's used in the
C<StartFileTransfer> request. Additionally, make sure that the role
provides C<secretsmanager:GetSecretValue> permission to Secrets
Manager.


=head2 AgreementId => Str

A unique identifier for the agreement. This identifier is returned when
you create an agreement.


=head2 B<REQUIRED> Arn => Str

The unique Amazon Resource Name (ARN) for the agreement.


=head2 BaseDirectory => Str

The landing directory (folder) for files that are transferred by using
the AS2 protocol.


=head2 CustomDirectories => L<Paws::Transfer::CustomDirectoriesType>

A C<CustomDirectoriesType> structure. This structure specifies custom
directories for storing various AS2 message files. You can specify
directories for the following types of files.

=over

=item *

Failed files

=item *

MDN files

=item *

Payload files

=item *

Status files

=item *

Temporary files

=back



=head2 Description => Str

The name or short description that's used to identify the agreement.


=head2 EnforceMessageSigning => Str

Determines whether or not unsigned messages from your trading partners
will be accepted.

=over

=item *

C<ENABLED>: Transfer Family rejects unsigned messages from your trading
partner.

=item *

C<DISABLED> (default value): Transfer Family accepts unsigned messages
from your trading partner.

=back



=head2 LocalProfileId => Str

A unique identifier for the AS2 local profile.


=head2 PartnerProfileId => Str

A unique identifier for the partner profile used in the agreement.


=head2 PreserveFilename => Str

Determines whether or not Transfer Family appends a unique string of
characters to the end of the AS2 message payload filename when saving
it.

=over

=item *

C<ENABLED>: the filename provided by your trading parter is preserved
when the file is saved.

=item *

C<DISABLED> (default value): when Transfer Family saves the file, the
filename is adjusted, as described in File names and locations
(https://docs.aws.amazon.com/transfer/latest/userguide/send-as2-messages.html#file-names-as2).

=back



=head2 ServerId => Str

A system-assigned unique identifier for a server instance. This
identifier indicates the specific server that the agreement uses.


=head2 Status => Str

The current status of the agreement, either C<ACTIVE> or C<INACTIVE>.


=head2 Tags => ArrayRef[L<Paws::Transfer::Tag>]

Key-value pairs that can be used to group and search for agreements.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Transfer>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

