# Generated by default/object.tt
package Paws::VerifiedPermissions::ValidationSettings;
  use Moose;
  has Mode => (is => 'ro', isa => 'Str', request_name => 'mode', traits => ['NameInRequest'], required => 1);

1;

### main pod documentation begin ###

=head1 NAME

Paws::VerifiedPermissions::ValidationSettings

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::VerifiedPermissions::ValidationSettings object:

  $service_obj->Method(Att1 => { Mode => $value, ..., Mode => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::VerifiedPermissions::ValidationSettings object:

  $result = $service_obj->Method(...);
  $result->Att1->Mode

=head1 DESCRIPTION

A structure that contains Cedar policy validation settings for the
policy store. The validation mode determines which validation failures
that Cedar considers serious enough to block acceptance of a new or
edited static policy or policy template.

This data type is used as a request parameter in the CreatePolicyStore
(https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicyStore.html)
and UpdatePolicyStore
(https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore.html)
operations.

=head1 ATTRIBUTES


=head2 B<REQUIRED> Mode => Str

The validation mode currently configured for this policy store. The
valid values are:

=over

=item *

B<OFF> E<ndash> Neither Verified Permissions nor Cedar perform any
validation on policies. No validation errors are reported by either
service.

=item *

B<STRICT> E<ndash> Requires a schema to be present in the policy store.
Cedar performs validation on all submitted new or updated static
policies and policy templates. Any that fail validation are rejected
and Cedar doesn't store them in the policy store.

=back

If C<Mode=STRICT> and the policy store doesn't contain a schema,
Verified Permissions rejects all static policies and policy templates
because there is no schema to validate against.

To submit a static policy or policy template without a schema, you must
turn off validation.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::VerifiedPermissions>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

