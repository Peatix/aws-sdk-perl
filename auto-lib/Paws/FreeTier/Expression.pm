# Generated by default/object.tt
package Paws::FreeTier::Expression;
  use Moose;
  has And => (is => 'ro', isa => 'ArrayRef[Paws::FreeTier::Expression]');
  has Dimensions => (is => 'ro', isa => 'Paws::FreeTier::DimensionValues');
  has Not => (is => 'ro', isa => 'Paws::FreeTier::Expression');
  has Or => (is => 'ro', isa => 'ArrayRef[Paws::FreeTier::Expression]');

1;

### main pod documentation begin ###

=head1 NAME

Paws::FreeTier::Expression

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::FreeTier::Expression object:

  $service_obj->Method(Att1 => { And => $value, ..., Or => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::FreeTier::Expression object:

  $result = $service_obj->Method(...);
  $result->Att1->And

=head1 DESCRIPTION

Use C<Expression> to filter in the C<GetFreeTierUsage> API operation.

You can use the following patterns:

=over

=item *

Simple dimension values (C<Dimensions> root operator)

=item *

Complex expressions with logical operators (C<AND>, C<NOT>, and C<OR>
root operators).

=back

For I<simple dimension values>, you can set the dimension name, values,
and match type for the filters that you plan to use.

B<Example for simple dimension values>

You can filter to match exactly for C<REGION==us-east-1 OR
REGION==us-west-1>.

The corresponding C<Expression> appears like the following: C<{
"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1"
], "MatchOptions": ["EQUALS"] } }>

As shown in the previous example, lists of dimension values are
combined with C<OR> when you apply the filter.

For I<complex expressions with logical operators>, you can have nested
expressions to use the logical operators and specify advanced
filtering.

B<Example for complex expressions with logical operators>

You can filter by C<((REGION == us-east-1 OR REGION == us-west-1) OR
(SERVICE CONTAINS AWSLambda)) AND (USAGE_TYPE !CONTAINS DataTransfer)>.

The corresponding C<Expression> appears like the following: C<{ "And":
[ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1",
"us-west-1" ], "MatchOptions": ["EQUALS"] }}, {"Dimensions": { "Key":
"SERVICE", "Values": ["AWSLambda"], "MatchOptions": ["CONTAINS"] } }
]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values":
["DataTransfer"], "MatchOptions": ["CONTAINS"] }}} ] }>

In the following B<Contents>, you must specify exactly one of the
following root operators.

=head1 ATTRIBUTES


=head2 And => ArrayRef[L<Paws::FreeTier::Expression>]

Return results that match all C<Expressions> that you specified in the
array.


=head2 Dimensions => L<Paws::FreeTier::DimensionValues>

The specific dimension, values, and match type to filter objects with.


=head2 Not => L<Paws::FreeTier::Expression>

Return results that donE<rsquo>t match the C<Expression> that you
specified.


=head2 Or => ArrayRef[L<Paws::FreeTier::Expression>]

Return results that match any of the C<Expressions> that you specified.
in the array.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::FreeTier>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

