# Generated by default/object.tt
package Paws::PaymentCryptographyData::CardVerificationAttributes;
  use Moose;
  has AmexCardSecurityCodeVersion1 => (is => 'ro', isa => 'Paws::PaymentCryptographyData::AmexCardSecurityCodeVersion1');
  has AmexCardSecurityCodeVersion2 => (is => 'ro', isa => 'Paws::PaymentCryptographyData::AmexCardSecurityCodeVersion2');
  has CardHolderVerificationValue => (is => 'ro', isa => 'Paws::PaymentCryptographyData::CardHolderVerificationValue');
  has CardVerificationValue1 => (is => 'ro', isa => 'Paws::PaymentCryptographyData::CardVerificationValue1');
  has CardVerificationValue2 => (is => 'ro', isa => 'Paws::PaymentCryptographyData::CardVerificationValue2');
  has DiscoverDynamicCardVerificationCode => (is => 'ro', isa => 'Paws::PaymentCryptographyData::DiscoverDynamicCardVerificationCode');
  has DynamicCardVerificationCode => (is => 'ro', isa => 'Paws::PaymentCryptographyData::DynamicCardVerificationCode');
  has DynamicCardVerificationValue => (is => 'ro', isa => 'Paws::PaymentCryptographyData::DynamicCardVerificationValue');

1;

### main pod documentation begin ###

=head1 NAME

Paws::PaymentCryptographyData::CardVerificationAttributes

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::PaymentCryptographyData::CardVerificationAttributes object:

  $service_obj->Method(Att1 => { AmexCardSecurityCodeVersion1 => $value, ..., DynamicCardVerificationValue => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::PaymentCryptographyData::CardVerificationAttributes object:

  $result = $service_obj->Method(...);
  $result->Att1->AmexCardSecurityCodeVersion1

=head1 DESCRIPTION

Card data parameters that are requried to verify Card Verification
Values (CVV/CVV2), Dynamic Card Verification Values (dCVV/dCVV2), or
Card Security Codes (CSC).

=head1 ATTRIBUTES


=head2 AmexCardSecurityCodeVersion1 => L<Paws::PaymentCryptographyData::AmexCardSecurityCodeVersion1>




=head2 AmexCardSecurityCodeVersion2 => L<Paws::PaymentCryptographyData::AmexCardSecurityCodeVersion2>

Card data parameters that are required to verify a Card Security Code
(CSC2) for an AMEX payment card.


=head2 CardHolderVerificationValue => L<Paws::PaymentCryptographyData::CardHolderVerificationValue>

Card data parameters that are required to verify a cardholder
verification value for the payment card.


=head2 CardVerificationValue1 => L<Paws::PaymentCryptographyData::CardVerificationValue1>

Card data parameters that are required to verify Card Verification
Value (CVV) for the payment card.


=head2 CardVerificationValue2 => L<Paws::PaymentCryptographyData::CardVerificationValue2>

Card data parameters that are required to verify Card Verification
Value (CVV2) for the payment card.


=head2 DiscoverDynamicCardVerificationCode => L<Paws::PaymentCryptographyData::DiscoverDynamicCardVerificationCode>

Card data parameters that are required to verify CDynamic Card
Verification Code (dCVC) for the payment card.


=head2 DynamicCardVerificationCode => L<Paws::PaymentCryptographyData::DynamicCardVerificationCode>

Card data parameters that are required to verify CDynamic Card
Verification Code (dCVC) for the payment card.


=head2 DynamicCardVerificationValue => L<Paws::PaymentCryptographyData::DynamicCardVerificationValue>

Card data parameters that are required to verify CDynamic Card
Verification Value (dCVV) for the payment card.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::PaymentCryptographyData>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

