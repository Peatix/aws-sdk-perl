# Generated by default/object.tt
package Paws::PaymentCryptographyData::DerivationMethodAttributes;
  use Moose;
  has Amex => (is => 'ro', isa => 'Paws::PaymentCryptographyData::AmexAttributes');
  has Emv2000 => (is => 'ro', isa => 'Paws::PaymentCryptographyData::Emv2000Attributes');
  has EmvCommon => (is => 'ro', isa => 'Paws::PaymentCryptographyData::EmvCommonAttributes');
  has Mastercard => (is => 'ro', isa => 'Paws::PaymentCryptographyData::MasterCardAttributes');
  has Visa => (is => 'ro', isa => 'Paws::PaymentCryptographyData::VisaAttributes');

1;

### main pod documentation begin ###

=head1 NAME

Paws::PaymentCryptographyData::DerivationMethodAttributes

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::PaymentCryptographyData::DerivationMethodAttributes object:

  $service_obj->Method(Att1 => { Amex => $value, ..., Visa => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::PaymentCryptographyData::DerivationMethodAttributes object:

  $result = $service_obj->Method(...);
  $result->Att1->Amex

=head1 DESCRIPTION

Parameters to derive the payment card specific confidentiality and
integrity keys.

=head1 ATTRIBUTES


=head2 Amex => L<Paws::PaymentCryptographyData::AmexAttributes>

Parameters to derive the confidentiality and integrity keys for a
payment card using Amex derivation method.


=head2 Emv2000 => L<Paws::PaymentCryptographyData::Emv2000Attributes>

Parameters to derive the confidentiality and integrity keys for a
payment card using Emv2000 derivation method.


=head2 EmvCommon => L<Paws::PaymentCryptographyData::EmvCommonAttributes>

Parameters to derive the confidentiality and integrity keys for a
payment card using Emv common derivation method.


=head2 Mastercard => L<Paws::PaymentCryptographyData::MasterCardAttributes>

Parameters to derive the confidentiality and integrity keys for a
payment card using Mastercard derivation method.


=head2 Visa => L<Paws::PaymentCryptographyData::VisaAttributes>

Parameters to derive the confidentiality and integrity keys for a a
payment card using Visa derivation method.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::PaymentCryptographyData>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

