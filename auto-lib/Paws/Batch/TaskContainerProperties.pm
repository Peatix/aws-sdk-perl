# Generated by default/object.tt
package Paws::Batch::TaskContainerProperties;
  use Moose;
  has Command => (is => 'ro', isa => 'ArrayRef[Str|Undef]', request_name => 'command', traits => ['NameInRequest']);
  has DependsOn => (is => 'ro', isa => 'ArrayRef[Paws::Batch::TaskContainerDependency]', request_name => 'dependsOn', traits => ['NameInRequest']);
  has Environment => (is => 'ro', isa => 'ArrayRef[Paws::Batch::KeyValuePair]', request_name => 'environment', traits => ['NameInRequest']);
  has Essential => (is => 'ro', isa => 'Bool', request_name => 'essential', traits => ['NameInRequest']);
  has FirelensConfiguration => (is => 'ro', isa => 'Paws::Batch::FirelensConfiguration', request_name => 'firelensConfiguration', traits => ['NameInRequest']);
  has Image => (is => 'ro', isa => 'Str', request_name => 'image', traits => ['NameInRequest'], required => 1);
  has LinuxParameters => (is => 'ro', isa => 'Paws::Batch::LinuxParameters', request_name => 'linuxParameters', traits => ['NameInRequest']);
  has LogConfiguration => (is => 'ro', isa => 'Paws::Batch::LogConfiguration', request_name => 'logConfiguration', traits => ['NameInRequest']);
  has MountPoints => (is => 'ro', isa => 'ArrayRef[Paws::Batch::MountPoint]', request_name => 'mountPoints', traits => ['NameInRequest']);
  has Name => (is => 'ro', isa => 'Str', request_name => 'name', traits => ['NameInRequest']);
  has Privileged => (is => 'ro', isa => 'Bool', request_name => 'privileged', traits => ['NameInRequest']);
  has ReadonlyRootFilesystem => (is => 'ro', isa => 'Bool', request_name => 'readonlyRootFilesystem', traits => ['NameInRequest']);
  has RepositoryCredentials => (is => 'ro', isa => 'Paws::Batch::RepositoryCredentials', request_name => 'repositoryCredentials', traits => ['NameInRequest']);
  has ResourceRequirements => (is => 'ro', isa => 'ArrayRef[Paws::Batch::ResourceRequirement]', request_name => 'resourceRequirements', traits => ['NameInRequest']);
  has Secrets => (is => 'ro', isa => 'ArrayRef[Paws::Batch::Secret]', request_name => 'secrets', traits => ['NameInRequest']);
  has Ulimits => (is => 'ro', isa => 'ArrayRef[Paws::Batch::Ulimit]', request_name => 'ulimits', traits => ['NameInRequest']);
  has User => (is => 'ro', isa => 'Str', request_name => 'user', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::Batch::TaskContainerProperties

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Batch::TaskContainerProperties object:

  $service_obj->Method(Att1 => { Command => $value, ..., User => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Batch::TaskContainerProperties object:

  $result = $service_obj->Method(...);
  $result->Att1->Command

=head1 DESCRIPTION

Container properties are used for Amazon ECS-based job definitions.
These properties to describe the container that's launched as part of a
job.

=head1 ATTRIBUTES


=head2 Command => ArrayRef[Str|Undef]

The command that's passed to the container. This parameter maps to
C<Cmd> in the Create a container
(https://docs.docker.com/engine/api/v1.23/#create-a-container) section
of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/)
and the C<COMMAND> parameter to docker run
(https://docs.docker.com/engine/reference/run/). For more information,
see Dockerfile reference: CMD
(https://docs.docker.com/engine/reference/builder/#cmd).


=head2 DependsOn => ArrayRef[L<Paws::Batch::TaskContainerDependency>]

A list of containers that this container depends on.


=head2 Environment => ArrayRef[L<Paws::Batch::KeyValuePair>]

The environment variables to pass to a container. This parameter maps
to Env in the Create a container
(https://docs.docker.com/engine/api/v1.23/#create-a-container) section
of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/)
and the C<--env> parameter to docker run
(https://docs.docker.com/engine/reference/run/).

We don't recommend using plaintext environment variables for sensitive
information, such as credential data.

Environment variables cannot start with C<AWS_BATCH>. This naming
convention is reserved for variables that Batch sets.


=head2 Essential => Bool

If the essential parameter of a container is marked as C<true>, and
that container fails or stops for any reason, all other containers that
are part of the task are stopped. If the C<essential> parameter of a
container is marked as false, its failure doesn't affect the rest of
the containers in a task. If this parameter is omitted, a container is
assumed to be essential.

All jobs must have at least one essential container. If you have an
application that's composed of multiple containers, group containers
that are used for a common purpose into components, and separate the
different components into multiple task definitions. For more
information, see Application Architecture
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 FirelensConfiguration => L<Paws::Batch::FirelensConfiguration>

The FireLens configuration for the container. This is used to specify
and configure a log router for container logs. For more information,
see Custom log
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
routing in the I<Amazon Elastic Container Service Developer Guide>.


=head2 B<REQUIRED> Image => Str

The image used to start a container. This string is passed directly to
the Docker daemon. By default, images in the Docker Hub registry are
available. Other repositories are specified with either
C<repository-url/image:tag> or C<repository-url/image@digest>. Up to
255 letters (uppercase and lowercase), numbers, hyphens, underscores,
colons, periods, forward slashes, and number signs are allowed. This
parameter maps to C<Image> in the Create a container
(https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
section of the Docker Remote API
(https://docs.docker.com/engine/api/v1.35/) and the C<IMAGE> parameter
of the I<docker run>
(https://docs.docker.com/engine/reference/run/#security-configuration).


=head2 LinuxParameters => L<Paws::Batch::LinuxParameters>

Linux-specific modifications that are applied to the container, such as
Linux kernel capabilities. For more information, see KernelCapabilities
(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).


=head2 LogConfiguration => L<Paws::Batch::LogConfiguration>

The log configuration specification for the container.

This parameter maps to C<LogConfig> in the Create a container
(https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
section of the Docker Remote API
(https://docs.docker.com/engine/api/v1.35/) and the C<--log-driver>
option to docker run
(https://docs.docker.com/engine/reference/run/#security-configuration).

By default, containers use the same logging driver that the Docker
daemon uses. However the container can use a different logging driver
than the Docker daemon by specifying a log driver with this parameter
in the container definition. To use a different logging driver for a
container, the log system must be configured properly on the container
instance (or on a different log server for remote logging options). For
more information about the options for different supported log drivers,
see Configure logging drivers
(https://docs.docker.com/engine/admin/logging/overview/) in the
I<Docker documentation>.

Amazon ECS currently supports a subset of the logging drivers available
to the Docker daemon (shown in the C<LogConfiguration> data type).
Additional log drivers may be available in future releases of the
Amazon ECS container agent.

This parameter requires version 1.18 of the Docker Remote API or
greater on your container instance. To check the Docker Remote API
version on your container instance, log in to your container instance
and run the following command: sudo docker version C<--format
'{{.Server.APIVersion}}'>

The Amazon ECS container agent running on a container instance must
register the logging drivers available on that instance with the
C<ECS_AVAILABLE_LOGGING_DRIVERS> environment variable before containers
placed on that instance can use these log configuration options. For
more information, see Amazon ECS container agent configuration
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
in the I<Amazon Elastic Container Service Developer Guide>.


=head2 MountPoints => ArrayRef[L<Paws::Batch::MountPoint>]

The mount points for data volumes in your container.

This parameter maps to C<Volumes> in the Create a container
(https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
section of the Docker Remote API
(https://docs.docker.com/engine/api/v1.35/) and the --volume option to
docker run
(https://docs.docker.com/engine/reference/run/#security-configuration).

Windows containers can mount whole directories on the same drive as
C<$env:ProgramData>. Windows containers can't mount directories on a
different drive, and mount point can't be across drives.


=head2 Name => Str

The name of a container. The name can be used as a unique identifier to
target your C<dependsOn> and C<Overrides> objects.


=head2 Privileged => Bool

When this parameter is C<true>, the container is given elevated
privileges on the host container instance (similar to the C<root>
user). This parameter maps to C<Privileged> in the Create a container
(https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
section of the Docker Remote API
(https://docs.docker.com/engine/api/v1.35/) and the C<--privileged>
option to docker run
(https://docs.docker.com/engine/reference/run/#security-configuration).

This parameter is not supported for Windows containers or tasks run on
Fargate.


=head2 ReadonlyRootFilesystem => Bool

When this parameter is true, the container is given read-only access to
its root file system. This parameter maps to C<ReadonlyRootfs> in the
Create a container
(https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
section of the Docker Remote API
(https://docs.docker.com/engine/api/v1.35/) and the C<--read-only>
option to docker run
(https://docs.docker.com/engine/reference/run/#security-configuration).

This parameter is not supported for Windows containers.


=head2 RepositoryCredentials => L<Paws::Batch::RepositoryCredentials>

The private repository authentication credentials to use.


=head2 ResourceRequirements => ArrayRef[L<Paws::Batch::ResourceRequirement>]

The type and amount of a resource to assign to a container. The only
supported resource is a GPU.


=head2 Secrets => ArrayRef[L<Paws::Batch::Secret>]

The secrets to pass to the container. For more information, see
Specifying Sensitive Data
(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
in the Amazon Elastic Container Service Developer Guide.


=head2 Ulimits => ArrayRef[L<Paws::Batch::Ulimit>]

A list of C<ulimits> to set in the container. If a C<ulimit> value is
specified in a task definition, it overrides the default values set by
Docker. This parameter maps to C<Ulimits> in the Create a container
(https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
section of the Docker Remote API
(https://docs.docker.com/engine/api/v1.35/) and the C<--ulimit> option
to docker run
(https://docs.docker.com/engine/reference/run/#security-configuration).

Amazon ECS tasks hosted on Fargate use the default resource limit
values set by the operating system with the exception of the nofile
resource limit parameter which Fargate overrides. The C<nofile>
resource limit sets a restriction on the number of open files that a
container can use. The default C<nofile> soft limit is C<1024> and the
default hard limit is C<65535>.

This parameter requires version 1.18 of the Docker Remote API or
greater on your container instance. To check the Docker Remote API
version on your container instance, log in to your container instance
and run the following command: sudo docker version C<--format
'{{.Server.APIVersion}}'>

This parameter is not supported for Windows containers.


=head2 User => Str

The user to use inside the container. This parameter maps to User in
the Create a container section of the Docker Remote API and the --user
option to docker run.

When running tasks using the C<host> network mode, don't run containers
using the C<root user (UID 0)>. We recommend using a non-root user for
better security.

You can specify the C<user> using the following formats. If specifying
a UID or GID, you must specify it as a positive integer.

=over

=item *

C<user>

=item *

C<user:group>

=item *

C<uid>

=item *

C<uid:gid>

=item *

C<user:gi>

=item *

C<uid:group>

=back

This parameter is not supported for Windows containers.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Batch>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

