# Generated by default/object.tt
package Paws::Batch::EksContainerOverride;
  use Moose;
  has Args => (is => 'ro', isa => 'ArrayRef[Str|Undef]', request_name => 'args', traits => ['NameInRequest']);
  has Command => (is => 'ro', isa => 'ArrayRef[Str|Undef]', request_name => 'command', traits => ['NameInRequest']);
  has Env => (is => 'ro', isa => 'ArrayRef[Paws::Batch::EksContainerEnvironmentVariable]', request_name => 'env', traits => ['NameInRequest']);
  has Image => (is => 'ro', isa => 'Str', request_name => 'image', traits => ['NameInRequest']);
  has Name => (is => 'ro', isa => 'Str', request_name => 'name', traits => ['NameInRequest']);
  has Resources => (is => 'ro', isa => 'Paws::Batch::EksContainerResourceRequirements', request_name => 'resources', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::Batch::EksContainerOverride

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Batch::EksContainerOverride object:

  $service_obj->Method(Att1 => { Args => $value, ..., Resources => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Batch::EksContainerOverride object:

  $result = $service_obj->Method(...);
  $result->Att1->Args

=head1 DESCRIPTION

Object representing any Kubernetes overrides to a job definition that's
used in a SubmitJob
(https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html)
API operation.

=head1 ATTRIBUTES


=head2 Args => ArrayRef[Str|Undef]

The arguments to the entrypoint to send to the container that overrides
the default arguments from the Docker image or the job definition. For
more information, see Dockerfile reference: CMD
(https://docs.docker.com/engine/reference/builder/#cmd) and Define a
command an arguments for a pod
(https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
in the I<Kubernetes documentation>.


=head2 Command => ArrayRef[Str|Undef]

The command to send to the container that overrides the default command
from the Docker image or the job definition.


=head2 Env => ArrayRef[L<Paws::Batch::EksContainerEnvironmentVariable>]

The environment variables to send to the container. You can add new
environment variables, which are added to the container at launch. Or,
you can override the existing environment variables from the Docker
image or the job definition.

Environment variables cannot start with "C<AWS_BATCH>". This naming
convention is reserved for variables that Batch sets.


=head2 Image => Str

The override of the Docker image that's used to start the container.


=head2 Name => Str

A pointer to the container that you want to override. The name must
match a unique container name that you wish to override.


=head2 Resources => L<Paws::Batch::EksContainerResourceRequirements>

The type and amount of resources to assign to a container. These
override the settings in the job definition. The supported resources
include C<memory>, C<cpu>, and C<nvidia.com/gpu>. For more information,
see Resource management for pods and containers
(https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
in the I<Kubernetes documentation>.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Batch>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

