# Generated by default/object.tt
package Paws::Batch::RuntimePlatform;
  use Moose;
  has CpuArchitecture => (is => 'ro', isa => 'Str', request_name => 'cpuArchitecture', traits => ['NameInRequest']);
  has OperatingSystemFamily => (is => 'ro', isa => 'Str', request_name => 'operatingSystemFamily', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::Batch::RuntimePlatform

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Batch::RuntimePlatform object:

  $service_obj->Method(Att1 => { CpuArchitecture => $value, ..., OperatingSystemFamily => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Batch::RuntimePlatform object:

  $result = $service_obj->Method(...);
  $result->Att1->CpuArchitecture

=head1 DESCRIPTION

An object that represents the compute environment architecture for
Batch jobs on Fargate.

=head1 ATTRIBUTES


=head2 CpuArchitecture => Str

The vCPU architecture. The default value is C<X86_64>. Valid values are
C<X86_64> and C<ARM64>.

This parameter must be set to C<X86_64> for Windows containers.

Fargate Spot is not supported for C<ARM64> and Windows-based containers
on Fargate. A job queue will be blocked if a Fargate C<ARM64> or
Windows job is submitted to a job queue with only Fargate Spot compute
environments. However, you can attach both C<FARGATE> and
C<FARGATE_SPOT> compute environments to the same job queue.


=head2 OperatingSystemFamily => Str

The operating system for the compute environment. Valid values are:
C<LINUX> (default), C<WINDOWS_SERVER_2019_CORE>,
C<WINDOWS_SERVER_2019_FULL>, C<WINDOWS_SERVER_2022_CORE>, and
C<WINDOWS_SERVER_2022_FULL>.

The following parameters canE<rsquo>t be set for Windows containers:
C<linuxParameters>, C<privileged>, C<user>, C<ulimits>,
C<readonlyRootFilesystem>, and C<efsVolumeConfiguration>.

The Batch Scheduler checks the compute environments that are attached
to the job queue before registering a task definition with Fargate. In
this scenario, the job queue is where the job is submitted. If the job
requires a Windows container and the first compute environment is
C<LINUX>, the compute environment is skipped and the next compute
environment is checked until a Windows-based compute environment is
found.

Fargate Spot is not supported for C<ARM64> and Windows-based containers
on Fargate. A job queue will be blocked if a Fargate C<ARM64> or
Windows job is submitted to a job queue with only Fargate Spot compute
environments. However, you can attach both C<FARGATE> and
C<FARGATE_SPOT> compute environments to the same job queue.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Batch>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

