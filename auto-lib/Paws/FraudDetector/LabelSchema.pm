# Generated by default/object.tt
package Paws::FraudDetector::LabelSchema;
  use Moose;
  has LabelMapper => (is => 'ro', isa => 'Paws::FraudDetector::LabelMapper', request_name => 'labelMapper', traits => ['NameInRequest']);
  has UnlabeledEventsTreatment => (is => 'ro', isa => 'Str', request_name => 'unlabeledEventsTreatment', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::FraudDetector::LabelSchema

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::FraudDetector::LabelSchema object:

  $service_obj->Method(Att1 => { LabelMapper => $value, ..., UnlabeledEventsTreatment => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::FraudDetector::LabelSchema object:

  $result = $service_obj->Method(...);
  $result->Att1->LabelMapper

=head1 DESCRIPTION

The label schema.

=head1 ATTRIBUTES


=head2 LabelMapper => L<Paws::FraudDetector::LabelMapper>

The label mapper maps the Amazon Fraud Detector supported model
classification labels (C<FRAUD>, C<LEGIT>) to the appropriate event
type labels. For example, if "C<FRAUD>" and "C<LEGIT>" are Amazon Fraud
Detector supported labels, this mapper could be: C<{"FRAUD" =E<gt>
["0"]>, C<"LEGIT" =E<gt> ["1"]}> or C<{"FRAUD" =E<gt> ["false"]>,
C<"LEGIT" =E<gt> ["true"]}> or C<{"FRAUD" =E<gt> ["fraud", "abuse"]>,
C<"LEGIT" =E<gt> ["legit", "safe"]}>. The value part of the mapper is a
list, because you may have multiple label variants from your event type
for a single Amazon Fraud Detector label.


=head2 UnlabeledEventsTreatment => Str

The action to take for unlabeled events.

=over

=item *

Use C<IGNORE> if you want the unlabeled events to be ignored. This is
recommended when the majority of the events in the dataset are labeled.

=item *

Use C<FRAUD> if you want to categorize all unlabeled events as
E<ldquo>FraudE<rdquo>. This is recommended when most of the events in
your dataset are fraudulent.

=item *

Use C<LEGIT> if you want to categorize all unlabeled events as
E<ldquo>LegitE<rdquo>. This is recommended when most of the events in
your dataset are legitimate.

=item *

Use C<AUTO> if you want Amazon Fraud Detector to decide how to use the
unlabeled data. This is recommended when there is significant unlabeled
events in the dataset.

=back

By default, Amazon Fraud Detector ignores the unlabeled data.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::FraudDetector>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

