# Generated by default/object.tt
package Paws::BedrockAgentRuntime::RetrievalFilter;
  use Moose;
  has AndAll => (is => 'ro', isa => 'ArrayRef[Paws::BedrockAgentRuntime::RetrievalFilter]', request_name => 'andAll', traits => ['NameInRequest']);
  has Equals => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'equals', traits => ['NameInRequest']);
  has GreaterThan => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'greaterThan', traits => ['NameInRequest']);
  has GreaterThanOrEquals => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'greaterThanOrEquals', traits => ['NameInRequest']);
  has In => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'in', traits => ['NameInRequest']);
  has LessThan => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'lessThan', traits => ['NameInRequest']);
  has LessThanOrEquals => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'lessThanOrEquals', traits => ['NameInRequest']);
  has ListContains => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'listContains', traits => ['NameInRequest']);
  has NotEquals => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'notEquals', traits => ['NameInRequest']);
  has NotIn => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'notIn', traits => ['NameInRequest']);
  has OrAll => (is => 'ro', isa => 'ArrayRef[Paws::BedrockAgentRuntime::RetrievalFilter]', request_name => 'orAll', traits => ['NameInRequest']);
  has StartsWith => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'startsWith', traits => ['NameInRequest']);
  has StringContains => (is => 'ro', isa => 'Paws::BedrockAgentRuntime::FilterAttribute', request_name => 'stringContains', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::BedrockAgentRuntime::RetrievalFilter

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::BedrockAgentRuntime::RetrievalFilter object:

  $service_obj->Method(Att1 => { AndAll => $value, ..., StringContains => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::BedrockAgentRuntime::RetrievalFilter object:

  $result = $service_obj->Method(...);
  $result->Att1->AndAll

=head1 DESCRIPTION

Specifies the filters to use on the metadata attributes in the
knowledge base data sources before returning results. For more
information, see Query configurations
(https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html).
See the examples below to see how to use these filters.

This data type is used in the following API operations:

=over

=item *

Retrieve request
(https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Retrieve.html#API_agent-runtime_Retrieve_RequestSyntax)
E<ndash> in the C<filter> field

=item *

RetrieveAndGenerate request
(https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html#API_agent-runtime_RetrieveAndGenerate_RequestSyntax)
E<ndash> in the C<filter> field

=back


=head1 ATTRIBUTES


=head2 AndAll => ArrayRef[L<Paws::BedrockAgentRuntime::RetrievalFilter>]

Knowledge base data sources are returned if their metadata attributes
fulfill all the filter conditions inside this list.


=head2 Equals => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value matches the
C<value> in this object.

The following example would return data sources with an C<animal>
attribute whose value is C<cat>:

C<"equals": { "key": "animal", "value": "cat" }>


=head2 GreaterThan => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value is greater than
the C<value> in this object.

The following example would return data sources with an C<year>
attribute whose value is greater than C<1989>:

C<"greaterThan": { "key": "year", "value": 1989 }>


=head2 GreaterThanOrEquals => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value is greater than
or equal to the C<value> in this object.

The following example would return data sources with an C<year>
attribute whose value is greater than or equal to C<1989>:

C<"greaterThanOrEquals": { "key": "year", "value": 1989 }>


=head2 In => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value is in the list
specified in the C<value> in this object.

The following example would return data sources with an C<animal>
attribute that is either C<cat> or C<dog>:

C<"in": { "key": "animal", "value": ["cat", "dog"] }>


=head2 LessThan => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value is less than
the C<value> in this object.

The following example would return data sources with an C<year>
attribute whose value is less than to C<1989>.

C<"lessThan": { "key": "year", "value": 1989 }>


=head2 LessThanOrEquals => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value is less than or
equal to the C<value> in this object.

The following example would return data sources with an C<year>
attribute whose value is less than or equal to C<1989>.

C<"lessThanOrEquals": { "key": "year", "value": 1989 }>


=head2 ListContains => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value is a list that
contains the C<value> as one of its members.

The following example would return data sources with an C<animals>
attribute that is a list containing a C<cat> member (for example
C<["dog", "cat"]>).

C<"listContains": { "key": "animals", "value": "cat" }>


=head2 NotEquals => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned when:

=over

=item *

It contains a metadata attribute whose name matches the C<key> and
whose value doesn't match the C<value> in this object.

=item *

The key is not present in the document.

=back

The following example would return data sources that don't contain an
C<animal> attribute whose value is C<cat>.

C<"notEquals": { "key": "animal", "value": "cat" }>


=head2 NotIn => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value isn't in the
list specified in the C<value> in this object.

The following example would return data sources whose C<animal>
attribute is neither C<cat> nor C<dog>.

C<"notIn": { "key": "animal", "value": ["cat", "dog"] }>


=head2 OrAll => ArrayRef[L<Paws::BedrockAgentRuntime::RetrievalFilter>]

Knowledge base data sources are returned if their metadata attributes
fulfill at least one of the filter conditions inside this list.


=head2 StartsWith => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value starts with the
C<value> in this object. This filter is currently only supported for
Amazon OpenSearch Serverless vector stores.

The following example would return data sources with an C<animal>
attribute starts with C<ca> (for example, C<cat> or C<camel>).

C<"startsWith": { "key": "animal", "value": "ca" }>


=head2 StringContains => L<Paws::BedrockAgentRuntime::FilterAttribute>

Knowledge base data sources are returned if they contain a metadata
attribute whose name matches the C<key> and whose value is one of the
following:

=over

=item *

A string that contains the C<value> as a substring. The following
example would return data sources with an C<animal> attribute that
contains the substring C<at> (for example C<cat>).

C<"stringContains": { "key": "animal", "value": "at" }>

=item *

A list with a member that contains the C<value> as a substring. The
following example would return data sources with an C<animals>
attribute that is a list containing a member that contains the
substring C<at> (for example C<["dog", "cat"]>).

C<"stringContains": { "key": "animals", "value": "at" }>

=back




=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::BedrockAgentRuntime>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

