# Generated by default/object.tt
package Paws::SecurityHub::Vulnerability;
  use Moose;
  has CodeVulnerabilities => (is => 'ro', isa => 'ArrayRef[Paws::SecurityHub::VulnerabilityCodeVulnerabilities]');
  has Cvss => (is => 'ro', isa => 'ArrayRef[Paws::SecurityHub::Cvss]');
  has EpssScore => (is => 'ro', isa => 'Num');
  has ExploitAvailable => (is => 'ro', isa => 'Str');
  has FixAvailable => (is => 'ro', isa => 'Str');
  has Id => (is => 'ro', isa => 'Str', required => 1);
  has LastKnownExploitAt => (is => 'ro', isa => 'Str');
  has ReferenceUrls => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has RelatedVulnerabilities => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has Vendor => (is => 'ro', isa => 'Paws::SecurityHub::VulnerabilityVendor');
  has VulnerablePackages => (is => 'ro', isa => 'ArrayRef[Paws::SecurityHub::SoftwarePackage]');

1;

### main pod documentation begin ###

=head1 NAME

Paws::SecurityHub::Vulnerability

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::SecurityHub::Vulnerability object:

  $service_obj->Method(Att1 => { CodeVulnerabilities => $value, ..., VulnerablePackages => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::SecurityHub::Vulnerability object:

  $result = $service_obj->Method(...);
  $result->Att1->CodeVulnerabilities

=head1 DESCRIPTION

A vulnerability associated with a finding.

=head1 ATTRIBUTES


=head2 CodeVulnerabilities => ArrayRef[L<Paws::SecurityHub::VulnerabilityCodeVulnerabilities>]

The vulnerabilities found in your Lambda function code. This field
pertains to findings that Security Hub receives from Amazon Inspector.


=head2 Cvss => ArrayRef[L<Paws::SecurityHub::Cvss>]

CVSS scores from the advisory related to the vulnerability.


=head2 EpssScore => Num

The Exploit Prediction Scoring System (EPSS) score for a finding.


=head2 ExploitAvailable => Str

Whether an exploit is available for a finding.


=head2 FixAvailable => Str

Specifies if all vulnerable packages in a finding have a value for
C<FixedInVersion> and C<Remediation>. This field is evaluated for each
vulnerability C<Id> based on the number of vulnerable packages that
have a value for both C<FixedInVersion> and C<Remediation>. Valid
values are as follows:

=over

=item *

C<YES> if all vulnerable packages have a value for both
C<FixedInVersion> and C<Remediation>

=item *

C<NO> if no vulnerable packages have a value for C<FixedInVersion> and
C<Remediation>

=item *

C<PARTIAL> otherwise

=back



=head2 B<REQUIRED> Id => Str

The identifier of the vulnerability.


=head2 LastKnownExploitAt => Str

The date and time of the last exploit associated with a finding
discovered in your environment.


=head2 ReferenceUrls => ArrayRef[Str|Undef]

A list of URLs that provide additional information about the
vulnerability.


=head2 RelatedVulnerabilities => ArrayRef[Str|Undef]

List of vulnerabilities that are related to this vulnerability.


=head2 Vendor => L<Paws::SecurityHub::VulnerabilityVendor>

Information about the vendor that generates the vulnerability report.


=head2 VulnerablePackages => ArrayRef[L<Paws::SecurityHub::SoftwarePackage>]

List of software packages that have the vulnerability.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::SecurityHub>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

