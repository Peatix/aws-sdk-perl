# Generated by default/object.tt
package Paws::WAFV2::WebACL;
  use Moose;
  has ARN => (is => 'ro', isa => 'Str', required => 1);
  has AssociationConfig => (is => 'ro', isa => 'Paws::WAFV2::AssociationConfig');
  has Capacity => (is => 'ro', isa => 'Int');
  has CaptchaConfig => (is => 'ro', isa => 'Paws::WAFV2::CaptchaConfig');
  has ChallengeConfig => (is => 'ro', isa => 'Paws::WAFV2::ChallengeConfig');
  has CustomResponseBodies => (is => 'ro', isa => 'Paws::WAFV2::CustomResponseBodies');
  has DataProtectionConfig => (is => 'ro', isa => 'Paws::WAFV2::DataProtectionConfig');
  has DefaultAction => (is => 'ro', isa => 'Paws::WAFV2::DefaultAction', required => 1);
  has Description => (is => 'ro', isa => 'Str');
  has Id => (is => 'ro', isa => 'Str', required => 1);
  has LabelNamespace => (is => 'ro', isa => 'Str');
  has ManagedByFirewallManager => (is => 'ro', isa => 'Bool');
  has Name => (is => 'ro', isa => 'Str', required => 1);
  has PostProcessFirewallManagerRuleGroups => (is => 'ro', isa => 'ArrayRef[Paws::WAFV2::FirewallManagerRuleGroup]');
  has PreProcessFirewallManagerRuleGroups => (is => 'ro', isa => 'ArrayRef[Paws::WAFV2::FirewallManagerRuleGroup]');
  has RetrofittedByFirewallManager => (is => 'ro', isa => 'Bool');
  has Rules => (is => 'ro', isa => 'ArrayRef[Paws::WAFV2::Rule]');
  has TokenDomains => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has VisibilityConfig => (is => 'ro', isa => 'Paws::WAFV2::VisibilityConfig', required => 1);

1;

### main pod documentation begin ###

=head1 NAME

Paws::WAFV2::WebACL

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::WAFV2::WebACL object:

  $service_obj->Method(Att1 => { ARN => $value, ..., VisibilityConfig => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::WAFV2::WebACL object:

  $result = $service_obj->Method(...);
  $result->Att1->ARN

=head1 DESCRIPTION

A web ACL defines a collection of rules to use to inspect and control
web requests. Each rule has a statement that defines what to look for
in web requests and an action that WAF applies to requests that match
the statement. In the web ACL, you assign a default action to take
(allow, block) for any request that does not match any of the rules.
The rules in a web ACL can be a combination of the types Rule,
RuleGroup, and managed rule group. You can associate a web ACL with one
or more Amazon Web Services resources to protect. The resource types
include Amazon CloudFront distribution, Amazon API Gateway REST API,
Application Load Balancer, AppSync GraphQL API, Amazon Cognito user
pool, App Runner service, Amplify application, and Amazon Web Services
Verified Access instance.

=head1 ATTRIBUTES


=head2 B<REQUIRED> ARN => Str

The Amazon Resource Name (ARN) of the web ACL that you want to
associate with the resource.


=head2 AssociationConfig => L<Paws::WAFV2::AssociationConfig>

Specifies custom configurations for the associations between the web
ACL and protected resources.

Use this to customize the maximum size of the request body that your
protected resources forward to WAF for inspection. You can customize
this setting for CloudFront, API Gateway, Amazon Cognito, App Runner,
or Verified Access resources. The default setting is 16 KB (16,384
bytes).

You are charged additional fees when your protected resources forward
body sizes that are larger than the default. For more information, see
WAF Pricing (http://aws.amazon.com/waf/pricing/).

For Application Load Balancer and AppSync, the limit is fixed at 8 KB
(8,192 bytes).


=head2 Capacity => Int

The web ACL capacity units (WCUs) currently being used by this web ACL.

WAF uses WCUs to calculate and control the operating resources that are
used to run your rules, rule groups, and web ACLs. WAF calculates
capacity differently for each rule type, to reflect the relative cost
of each rule. Simple rules that cost little to run use fewer WCUs than
more complex rules that use more processing power. Rule group capacity
is fixed at creation, which helps users plan their web ACL WCU usage
when they use a rule group. For more information, see WAF web ACL
capacity units (WCU)
(https://docs.aws.amazon.com/waf/latest/developerguide/aws-waf-capacity-units.html)
in the I<WAF Developer Guide>.


=head2 CaptchaConfig => L<Paws::WAFV2::CaptchaConfig>

Specifies how WAF should handle C<CAPTCHA> evaluations for rules that
don't have their own C<CaptchaConfig> settings. If you don't specify
this, WAF uses its default settings for C<CaptchaConfig>.


=head2 ChallengeConfig => L<Paws::WAFV2::ChallengeConfig>

Specifies how WAF should handle challenge evaluations for rules that
don't have their own C<ChallengeConfig> settings. If you don't specify
this, WAF uses its default settings for C<ChallengeConfig>.


=head2 CustomResponseBodies => L<Paws::WAFV2::CustomResponseBodies>

A map of custom response keys and content bodies. When you create a
rule with a block action, you can send a custom response to the web
request. You define these for the web ACL, and then use them in the
rules and default actions that you define in the web ACL.

For information about customizing web requests and responses, see
Customizing web requests and responses in WAF
(https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html)
in the I<WAF Developer Guide>.

For information about the limits on count and size for custom request
and response settings, see WAF quotas
(https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in
the I<WAF Developer Guide>.


=head2 DataProtectionConfig => L<Paws::WAFV2::DataProtectionConfig>

Specifies data protection to apply to the web request data for the web
ACL. This is a web ACL level data protection option.

The data protection that you configure for the web ACL alters the data
that's available for any other data collection activity, including your
WAF logging destinations, web ACL request sampling, and Amazon Security
Lake data collection and management. Your other option for data
protection is in the logging configuration, which only affects logging.


=head2 B<REQUIRED> DefaultAction => L<Paws::WAFV2::DefaultAction>

The action to perform if none of the C<Rules> contained in the
C<WebACL> match.


=head2 Description => Str

A description of the web ACL that helps with identification.


=head2 B<REQUIRED> Id => Str

A unique identifier for the C<WebACL>. This ID is returned in the
responses to create and list commands. You use this ID to do things
like get, update, and delete a C<WebACL>.


=head2 LabelNamespace => Str

The label namespace prefix for this web ACL. All labels added by rules
in this web ACL have this prefix.

=over

=item *

The syntax for the label namespace prefix for a web ACL is the
following:

C<awswaf:E<lt>account IDE<gt>:webacl:E<lt>web ACL nameE<gt>:>

=item *

When a rule with a label matches a web request, WAF adds the fully
qualified label to the request. A fully qualified label is made up of
the label namespace from the rule group or web ACL where the rule is
defined and the label from the rule, separated by a colon:

C<E<lt>label namespaceE<gt>:E<lt>label from ruleE<gt>>

=back



=head2 ManagedByFirewallManager => Bool

Indicates whether this web ACL was created by Firewall Manager and is
being managed by Firewall Manager. If true, then only Firewall Manager
can delete the web ACL or any Firewall Manager rule groups in the web
ACL. See also the properties C<RetrofittedByFirewallManager>,
C<PreProcessFirewallManagerRuleGroups>, and
C<PostProcessFirewallManagerRuleGroups>.


=head2 B<REQUIRED> Name => Str

The name of the web ACL. You cannot change the name of a web ACL after
you create it.


=head2 PostProcessFirewallManagerRuleGroups => ArrayRef[L<Paws::WAFV2::FirewallManagerRuleGroup>]

The last set of rules for WAF to process in the web ACL. This is
defined in an Firewall Manager WAF policy and contains only rule group
references. You can't alter these. Any rules and rule groups that you
define for the web ACL are prioritized before these.

In the Firewall Manager WAF policy, the Firewall Manager administrator
can define a set of rule groups to run first in the web ACL and a set
of rule groups to run last. Within each set, the administrator
prioritizes the rule groups, to determine their relative processing
order.


=head2 PreProcessFirewallManagerRuleGroups => ArrayRef[L<Paws::WAFV2::FirewallManagerRuleGroup>]

The first set of rules for WAF to process in the web ACL. This is
defined in an Firewall Manager WAF policy and contains only rule group
references. You can't alter these. Any rules and rule groups that you
define for the web ACL are prioritized after these.

In the Firewall Manager WAF policy, the Firewall Manager administrator
can define a set of rule groups to run first in the web ACL and a set
of rule groups to run last. Within each set, the administrator
prioritizes the rule groups, to determine their relative processing
order.


=head2 RetrofittedByFirewallManager => Bool

Indicates whether this web ACL was created by a customer account and
then retrofitted by Firewall Manager. If true, then the web ACL is
currently being managed by a Firewall Manager WAF policy, and only
Firewall Manager can manage any Firewall Manager rule groups in the web
ACL. See also the properties C<ManagedByFirewallManager>,
C<PreProcessFirewallManagerRuleGroups>, and
C<PostProcessFirewallManagerRuleGroups>.


=head2 Rules => ArrayRef[L<Paws::WAFV2::Rule>]

The Rule statements used to identify the web requests that you want to
manage. Each rule includes one top-level statement that WAF uses to
identify matching web requests, and parameters that govern how WAF
handles them.


=head2 TokenDomains => ArrayRef[Str|Undef]

Specifies the domains that WAF should accept in a web request token.
This enables the use of tokens across multiple protected websites. When
WAF provides a token, it uses the domain of the Amazon Web Services
resource that the web ACL is protecting. If you don't specify a list of
token domains, WAF accepts tokens only for the domain of the protected
resource. With a token domain list, WAF accepts the resource's host
domain plus all domains in the token domain list, including their
prefixed subdomains.


=head2 B<REQUIRED> VisibilityConfig => L<Paws::WAFV2::VisibilityConfig>

Defines and enables Amazon CloudWatch metrics and web request sample
collection.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::WAFV2>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

