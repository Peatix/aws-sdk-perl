# Generated by default/object.tt
package Paws::WAFV2::FieldToMatch;
  use Moose;
  has AllQueryArguments => (is => 'ro', isa => 'Paws::WAFV2::AllQueryArguments');
  has Body => (is => 'ro', isa => 'Paws::WAFV2::Body');
  has Cookies => (is => 'ro', isa => 'Paws::WAFV2::Cookies');
  has HeaderOrder => (is => 'ro', isa => 'Paws::WAFV2::HeaderOrder');
  has Headers => (is => 'ro', isa => 'Paws::WAFV2::Headers');
  has JA3Fingerprint => (is => 'ro', isa => 'Paws::WAFV2::JA3Fingerprint');
  has JA4Fingerprint => (is => 'ro', isa => 'Paws::WAFV2::JA4Fingerprint');
  has JsonBody => (is => 'ro', isa => 'Paws::WAFV2::JsonBody');
  has Method => (is => 'ro', isa => 'Paws::WAFV2::Method');
  has QueryString => (is => 'ro', isa => 'Paws::WAFV2::QueryString');
  has SingleHeader => (is => 'ro', isa => 'Paws::WAFV2::SingleHeader');
  has SingleQueryArgument => (is => 'ro', isa => 'Paws::WAFV2::SingleQueryArgument');
  has UriFragment => (is => 'ro', isa => 'Paws::WAFV2::UriFragment');
  has UriPath => (is => 'ro', isa => 'Paws::WAFV2::UriPath');

1;

### main pod documentation begin ###

=head1 NAME

Paws::WAFV2::FieldToMatch

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::WAFV2::FieldToMatch object:

  $service_obj->Method(Att1 => { AllQueryArguments => $value, ..., UriPath => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::WAFV2::FieldToMatch object:

  $result = $service_obj->Method(...);
  $result->Att1->AllQueryArguments

=head1 DESCRIPTION

Specifies a web request component to be used in a rule match statement
or in a logging configuration.

=over

=item *

In a rule statement, this is the part of the web request that you want
WAF to inspect. Include the single C<FieldToMatch> type that you want
to inspect, with additional specifications as needed, according to the
type. You specify a single request component in C<FieldToMatch> for
each rule statement that requires it. To inspect more than one
component of the web request, create a separate rule statement for each
component.

Example JSON for a C<QueryString> field to match:

C<"FieldToMatch": { "QueryString": {} }>

Example JSON for a C<Method> field to match specification:

C<"FieldToMatch": { "Method": { "Name": "DELETE" } }>

=item *

In a logging configuration, this is used in the C<RedactedFields>
property to specify a field to redact from the logging records. For
this use case, note the following:

=over

=item *

Even though all C<FieldToMatch> settings are available, the only valid
settings for field redaction are C<UriPath>, C<QueryString>,
C<SingleHeader>, and C<Method>.

=item *

In this documentation, the descriptions of the individual fields talk
about specifying the web request component to inspect, but for field
redaction, you are specifying the component type to redact from the
logs.

=item *

If you have request sampling enabled, the redacted fields configuration
for logging has no impact on sampling. You can only exclude fields from
request sampling by disabling sampling in the web ACL visibility
configuration or by configuring data protection for the web ACL.

=back

=back


=head1 ATTRIBUTES


=head2 AllQueryArguments => L<Paws::WAFV2::AllQueryArguments>

Inspect all query arguments.


=head2 Body => L<Paws::WAFV2::Body>

Inspect the request body as plain text. The request body immediately
follows the request headers. This is the part of a request that
contains any additional data that you want to send to your web server
as the HTTP request body, such as data from a form.

WAF does not support inspecting the entire contents of the web request
body if the body exceeds the limit for the resource type. When a web
request body is larger than the limit, the underlying host service only
forwards the contents that are within the limit to WAF for inspection.

=over

=item *

For Application Load Balancer and AppSync, the limit is fixed at 8 KB
(8,192 bytes).

=item *

For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified
Access, the default limit is 16 KB (16,384 bytes), and you can increase
the limit for each resource type in the web ACL C<AssociationConfig>,
for additional processing fees.

=item *

For Amplify, use the CloudFront limit.

=back

For information about how to handle oversized request bodies, see the
C<Body> object configuration.


=head2 Cookies => L<Paws::WAFV2::Cookies>

Inspect the request cookies. You must configure scope and pattern
matching filters in the C<Cookies> object, to define the set of cookies
and the parts of the cookies that WAF inspects.

Only the first 8 KB (8192 bytes) of a request's cookies and only the
first 200 cookies are forwarded to WAF for inspection by the underlying
host service. You must configure how to handle any oversize cookie
content in the C<Cookies> object. WAF applies the pattern matching
filters to the cookies that it receives from the underlying host
service.


=head2 HeaderOrder => L<Paws::WAFV2::HeaderOrder>

Inspect a string containing the list of the request's header names,
ordered as they appear in the web request that WAF receives for
inspection. WAF generates the string and then uses that as the field to
match component in its inspection. WAF separates the header names in
the string using colons and no added spaces, for example
C<host:user-agent:accept:authorization:referer>.


=head2 Headers => L<Paws::WAFV2::Headers>

Inspect the request headers. You must configure scope and pattern
matching filters in the C<Headers> object, to define the set of headers
to and the parts of the headers that WAF inspects.

Only the first 8 KB (8192 bytes) of a request's headers and only the
first 200 headers are forwarded to WAF for inspection by the underlying
host service. You must configure how to handle any oversize header
content in the C<Headers> object. WAF applies the pattern matching
filters to the headers that it receives from the underlying host
service.


=head2 JA3Fingerprint => L<Paws::WAFV2::JA3Fingerprint>

Available for use with Amazon CloudFront distributions and Application
Load Balancers. Match against the request's JA3 fingerprint. The JA3
fingerprint is a 32-character hash derived from the TLS Client Hello of
an incoming request. This fingerprint serves as a unique identifier for
the client's TLS configuration. WAF calculates and logs this
fingerprint for each request that has enough TLS Client Hello
information for the calculation. Almost all web requests include this
information.

You can use this choice only with a string match C<ByteMatchStatement>
with the C<PositionalConstraint> set to C<EXACTLY>.

You can obtain the JA3 fingerprint for client requests from the web ACL
logs. If WAF is able to calculate the fingerprint, it includes it in
the logs. For information about the logging fields, see Log fields
(https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html)
in the I<WAF Developer Guide>.

Provide the JA3 fingerprint string from the logs in your string match
statement specification, to match with any future requests that have
the same TLS configuration.


=head2 JA4Fingerprint => L<Paws::WAFV2::JA4Fingerprint>

Available for use with Amazon CloudFront distributions and Application
Load Balancers. Match against the request's JA4 fingerprint. The JA4
fingerprint is a 36-character hash derived from the TLS Client Hello of
an incoming request. This fingerprint serves as a unique identifier for
the client's TLS configuration. WAF calculates and logs this
fingerprint for each request that has enough TLS Client Hello
information for the calculation. Almost all web requests include this
information.

You can use this choice only with a string match C<ByteMatchStatement>
with the C<PositionalConstraint> set to C<EXACTLY>.

You can obtain the JA4 fingerprint for client requests from the web ACL
logs. If WAF is able to calculate the fingerprint, it includes it in
the logs. For information about the logging fields, see Log fields
(https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html)
in the I<WAF Developer Guide>.

Provide the JA4 fingerprint string from the logs in your string match
statement specification, to match with any future requests that have
the same TLS configuration.


=head2 JsonBody => L<Paws::WAFV2::JsonBody>

Inspect the request body as JSON. The request body immediately follows
the request headers. This is the part of a request that contains any
additional data that you want to send to your web server as the HTTP
request body, such as data from a form.

WAF does not support inspecting the entire contents of the web request
body if the body exceeds the limit for the resource type. When a web
request body is larger than the limit, the underlying host service only
forwards the contents that are within the limit to WAF for inspection.

=over

=item *

For Application Load Balancer and AppSync, the limit is fixed at 8 KB
(8,192 bytes).

=item *

For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified
Access, the default limit is 16 KB (16,384 bytes), and you can increase
the limit for each resource type in the web ACL C<AssociationConfig>,
for additional processing fees.

=item *

For Amplify, use the CloudFront limit.

=back

For information about how to handle oversized request bodies, see the
C<JsonBody> object configuration.


=head2 Method => L<Paws::WAFV2::Method>

Inspect the HTTP method. The method indicates the type of operation
that the request is asking the origin to perform.


=head2 QueryString => L<Paws::WAFV2::QueryString>

Inspect the query string. This is the part of a URL that appears after
a C<?> character, if any.


=head2 SingleHeader => L<Paws::WAFV2::SingleHeader>

Inspect a single header. Provide the name of the header to inspect, for
example, C<User-Agent> or C<Referer>. This setting isn't case
sensitive.

Example JSON: C<"SingleHeader": { "Name": "haystack" }>

Alternately, you can filter and inspect all headers with the C<Headers>
C<FieldToMatch> setting.


=head2 SingleQueryArgument => L<Paws::WAFV2::SingleQueryArgument>

Inspect a single query argument. Provide the name of the query argument
to inspect, such as I<UserName> or I<SalesRegion>. The name can be up
to 30 characters long and isn't case sensitive.

Example JSON: C<"SingleQueryArgument": { "Name": "myArgument" }>


=head2 UriFragment => L<Paws::WAFV2::UriFragment>

Inspect fragments of the request URI. You must configure scope and
pattern matching filters in the C<UriFragment> object, to define the
fragment of a URI that WAF inspects.

Only the first 8 KB (8192 bytes) of a request's URI fragments and only
the first 200 URI fragments are forwarded to WAF for inspection by the
underlying host service. You must configure how to handle any oversize
URI fragment content in the C<UriFragment> object. WAF applies the
pattern matching filters to the cookies that it receives from the
underlying host service.


=head2 UriPath => L<Paws::WAFV2::UriPath>

Inspect the request URI path. This is the part of the web request that
identifies a resource, for example, C</images/daily-ad.jpg>.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::WAFV2>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

