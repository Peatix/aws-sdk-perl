# Generated by default/object.tt
package Paws::M2::DataSet;
  use Moose;
  has DatasetName => (is => 'ro', isa => 'Str', request_name => 'datasetName', traits => ['NameInRequest'], required => 1);
  has DatasetOrg => (is => 'ro', isa => 'Paws::M2::DatasetOrgAttributes', request_name => 'datasetOrg', traits => ['NameInRequest'], required => 1);
  has RecordLength => (is => 'ro', isa => 'Paws::M2::RecordLength', request_name => 'recordLength', traits => ['NameInRequest'], required => 1);
  has RelativePath => (is => 'ro', isa => 'Str', request_name => 'relativePath', traits => ['NameInRequest']);
  has StorageType => (is => 'ro', isa => 'Str', request_name => 'storageType', traits => ['NameInRequest']);

1;

### main pod documentation begin ###

=head1 NAME

Paws::M2::DataSet

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::M2::DataSet object:

  $service_obj->Method(Att1 => { DatasetName => $value, ..., StorageType => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::M2::DataSet object:

  $result = $service_obj->Method(...);
  $result->Att1->DatasetName

=head1 DESCRIPTION

Defines a data set.

=head1 ATTRIBUTES


=head2 B<REQUIRED> DatasetName => Str

The logical identifier for a specific data set (in mainframe format).


=head2 B<REQUIRED> DatasetOrg => L<Paws::M2::DatasetOrgAttributes>

The type of dataset. The only supported value is VSAM.


=head2 B<REQUIRED> RecordLength => L<Paws::M2::RecordLength>

The length of a record.


=head2 RelativePath => Str

The relative location of the data set in the database or file system.


=head2 StorageType => Str

The storage type of the data set: database or file system. For Micro
Focus, database corresponds to datastore and file system corresponds to
EFS/FSX. For Blu Age, there is no support of file system and database
corresponds to Blusam.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::M2>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

