# Generated by default/object.tt
package Paws::Glue::CodeGenConfigurationNode;
  use Moose;
  has Aggregate => (is => 'ro', isa => 'Paws::Glue::Aggregate');
  has AmazonRedshiftSource => (is => 'ro', isa => 'Paws::Glue::AmazonRedshiftSource');
  has AmazonRedshiftTarget => (is => 'ro', isa => 'Paws::Glue::AmazonRedshiftTarget');
  has ApplyMapping => (is => 'ro', isa => 'Paws::Glue::ApplyMapping');
  has AthenaConnectorSource => (is => 'ro', isa => 'Paws::Glue::AthenaConnectorSource');
  has CatalogDeltaSource => (is => 'ro', isa => 'Paws::Glue::CatalogDeltaSource');
  has CatalogHudiSource => (is => 'ro', isa => 'Paws::Glue::CatalogHudiSource');
  has CatalogKafkaSource => (is => 'ro', isa => 'Paws::Glue::CatalogKafkaSource');
  has CatalogKinesisSource => (is => 'ro', isa => 'Paws::Glue::CatalogKinesisSource');
  has CatalogSource => (is => 'ro', isa => 'Paws::Glue::CatalogSource');
  has CatalogTarget => (is => 'ro', isa => 'Paws::Glue::BasicCatalogTarget');
  has ConnectorDataSource => (is => 'ro', isa => 'Paws::Glue::ConnectorDataSource');
  has ConnectorDataTarget => (is => 'ro', isa => 'Paws::Glue::ConnectorDataTarget');
  has CustomCode => (is => 'ro', isa => 'Paws::Glue::CustomCode');
  has DirectJDBCSource => (is => 'ro', isa => 'Paws::Glue::DirectJDBCSource');
  has DirectKafkaSource => (is => 'ro', isa => 'Paws::Glue::DirectKafkaSource');
  has DirectKinesisSource => (is => 'ro', isa => 'Paws::Glue::DirectKinesisSource');
  has DropDuplicates => (is => 'ro', isa => 'Paws::Glue::DropDuplicates');
  has DropFields => (is => 'ro', isa => 'Paws::Glue::DropFields');
  has DropNullFields => (is => 'ro', isa => 'Paws::Glue::DropNullFields');
  has DynamicTransform => (is => 'ro', isa => 'Paws::Glue::DynamicTransform');
  has DynamoDBCatalogSource => (is => 'ro', isa => 'Paws::Glue::DynamoDBCatalogSource');
  has EvaluateDataQuality => (is => 'ro', isa => 'Paws::Glue::EvaluateDataQuality');
  has EvaluateDataQualityMultiFrame => (is => 'ro', isa => 'Paws::Glue::EvaluateDataQualityMultiFrame');
  has FillMissingValues => (is => 'ro', isa => 'Paws::Glue::FillMissingValues');
  has Filter => (is => 'ro', isa => 'Paws::Glue::Filter');
  has GovernedCatalogSource => (is => 'ro', isa => 'Paws::Glue::GovernedCatalogSource');
  has GovernedCatalogTarget => (is => 'ro', isa => 'Paws::Glue::GovernedCatalogTarget');
  has JDBCConnectorSource => (is => 'ro', isa => 'Paws::Glue::JDBCConnectorSource');
  has JDBCConnectorTarget => (is => 'ro', isa => 'Paws::Glue::JDBCConnectorTarget');
  has Join => (is => 'ro', isa => 'Paws::Glue::Join');
  has Merge => (is => 'ro', isa => 'Paws::Glue::Merge');
  has MicrosoftSQLServerCatalogSource => (is => 'ro', isa => 'Paws::Glue::MicrosoftSQLServerCatalogSource');
  has MicrosoftSQLServerCatalogTarget => (is => 'ro', isa => 'Paws::Glue::MicrosoftSQLServerCatalogTarget');
  has MySQLCatalogSource => (is => 'ro', isa => 'Paws::Glue::MySQLCatalogSource');
  has MySQLCatalogTarget => (is => 'ro', isa => 'Paws::Glue::MySQLCatalogTarget');
  has OracleSQLCatalogSource => (is => 'ro', isa => 'Paws::Glue::OracleSQLCatalogSource');
  has OracleSQLCatalogTarget => (is => 'ro', isa => 'Paws::Glue::OracleSQLCatalogTarget');
  has PIIDetection => (is => 'ro', isa => 'Paws::Glue::PIIDetection');
  has PostgreSQLCatalogSource => (is => 'ro', isa => 'Paws::Glue::PostgreSQLCatalogSource');
  has PostgreSQLCatalogTarget => (is => 'ro', isa => 'Paws::Glue::PostgreSQLCatalogTarget');
  has Recipe => (is => 'ro', isa => 'Paws::Glue::Recipe');
  has RedshiftSource => (is => 'ro', isa => 'Paws::Glue::RedshiftSource');
  has RedshiftTarget => (is => 'ro', isa => 'Paws::Glue::RedshiftTarget');
  has RelationalCatalogSource => (is => 'ro', isa => 'Paws::Glue::RelationalCatalogSource');
  has RenameField => (is => 'ro', isa => 'Paws::Glue::RenameField');
  has S3CatalogDeltaSource => (is => 'ro', isa => 'Paws::Glue::S3CatalogDeltaSource');
  has S3CatalogHudiSource => (is => 'ro', isa => 'Paws::Glue::S3CatalogHudiSource');
  has S3CatalogSource => (is => 'ro', isa => 'Paws::Glue::S3CatalogSource');
  has S3CatalogTarget => (is => 'ro', isa => 'Paws::Glue::S3CatalogTarget');
  has S3CsvSource => (is => 'ro', isa => 'Paws::Glue::S3CsvSource');
  has S3DeltaCatalogTarget => (is => 'ro', isa => 'Paws::Glue::S3DeltaCatalogTarget');
  has S3DeltaDirectTarget => (is => 'ro', isa => 'Paws::Glue::S3DeltaDirectTarget');
  has S3DeltaSource => (is => 'ro', isa => 'Paws::Glue::S3DeltaSource');
  has S3DirectTarget => (is => 'ro', isa => 'Paws::Glue::S3DirectTarget');
  has S3ExcelSource => (is => 'ro', isa => 'Paws::Glue::S3ExcelSource');
  has S3GlueParquetTarget => (is => 'ro', isa => 'Paws::Glue::S3GlueParquetTarget');
  has S3HudiCatalogTarget => (is => 'ro', isa => 'Paws::Glue::S3HudiCatalogTarget');
  has S3HudiDirectTarget => (is => 'ro', isa => 'Paws::Glue::S3HudiDirectTarget');
  has S3HudiSource => (is => 'ro', isa => 'Paws::Glue::S3HudiSource');
  has S3HyperDirectTarget => (is => 'ro', isa => 'Paws::Glue::S3HyperDirectTarget');
  has S3IcebergDirectTarget => (is => 'ro', isa => 'Paws::Glue::S3IcebergDirectTarget');
  has S3JsonSource => (is => 'ro', isa => 'Paws::Glue::S3JsonSource');
  has S3ParquetSource => (is => 'ro', isa => 'Paws::Glue::S3ParquetSource');
  has SelectFields => (is => 'ro', isa => 'Paws::Glue::SelectFields');
  has SelectFromCollection => (is => 'ro', isa => 'Paws::Glue::SelectFromCollection');
  has SnowflakeSource => (is => 'ro', isa => 'Paws::Glue::SnowflakeSource');
  has SnowflakeTarget => (is => 'ro', isa => 'Paws::Glue::SnowflakeTarget');
  has SparkConnectorSource => (is => 'ro', isa => 'Paws::Glue::SparkConnectorSource');
  has SparkConnectorTarget => (is => 'ro', isa => 'Paws::Glue::SparkConnectorTarget');
  has SparkSQL => (is => 'ro', isa => 'Paws::Glue::SparkSQL');
  has Spigot => (is => 'ro', isa => 'Paws::Glue::Spigot');
  has SplitFields => (is => 'ro', isa => 'Paws::Glue::SplitFields');
  has Union => (is => 'ro', isa => 'Paws::Glue::Union');

1;

### main pod documentation begin ###

=head1 NAME

Paws::Glue::CodeGenConfigurationNode

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Glue::CodeGenConfigurationNode object:

  $service_obj->Method(Att1 => { Aggregate => $value, ..., Union => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Glue::CodeGenConfigurationNode object:

  $result = $service_obj->Method(...);
  $result->Att1->Aggregate

=head1 DESCRIPTION

C<CodeGenConfigurationNode> enumerates all valid Node types. One and
only one of its member variables can be populated.

=head1 ATTRIBUTES


=head2 Aggregate => L<Paws::Glue::Aggregate>

Specifies a transform that groups rows by chosen fields and computes
the aggregated value by specified function.


=head2 AmazonRedshiftSource => L<Paws::Glue::AmazonRedshiftSource>

Specifies a target that writes to a data source in Amazon Redshift.


=head2 AmazonRedshiftTarget => L<Paws::Glue::AmazonRedshiftTarget>

Specifies a target that writes to a data target in Amazon Redshift.


=head2 ApplyMapping => L<Paws::Glue::ApplyMapping>

Specifies a transform that maps data property keys in the data source
to data property keys in the data target. You can rename keys, modify
the data types for keys, and choose which keys to drop from the
dataset.


=head2 AthenaConnectorSource => L<Paws::Glue::AthenaConnectorSource>

Specifies a connector to an Amazon Athena data source.


=head2 CatalogDeltaSource => L<Paws::Glue::CatalogDeltaSource>

Specifies a Delta Lake data source that is registered in the Glue Data
Catalog.


=head2 CatalogHudiSource => L<Paws::Glue::CatalogHudiSource>

Specifies a Hudi data source that is registered in the Glue Data
Catalog.


=head2 CatalogKafkaSource => L<Paws::Glue::CatalogKafkaSource>

Specifies an Apache Kafka data store in the Data Catalog.


=head2 CatalogKinesisSource => L<Paws::Glue::CatalogKinesisSource>

Specifies a Kinesis data source in the Glue Data Catalog.


=head2 CatalogSource => L<Paws::Glue::CatalogSource>

Specifies a data store in the Glue Data Catalog.


=head2 CatalogTarget => L<Paws::Glue::BasicCatalogTarget>

Specifies a target that uses a Glue Data Catalog table.


=head2 ConnectorDataSource => L<Paws::Glue::ConnectorDataSource>

Specifies a source generated with standard connection options.


=head2 ConnectorDataTarget => L<Paws::Glue::ConnectorDataTarget>

Specifies a target generated with standard connection options.


=head2 CustomCode => L<Paws::Glue::CustomCode>

Specifies a transform that uses custom code you provide to perform the
data transformation. The output is a collection of DynamicFrames.


=head2 DirectJDBCSource => L<Paws::Glue::DirectJDBCSource>




=head2 DirectKafkaSource => L<Paws::Glue::DirectKafkaSource>

Specifies an Apache Kafka data store.


=head2 DirectKinesisSource => L<Paws::Glue::DirectKinesisSource>

Specifies a direct Amazon Kinesis data source.


=head2 DropDuplicates => L<Paws::Glue::DropDuplicates>

Specifies a transform that removes rows of repeating data from a data
set.


=head2 DropFields => L<Paws::Glue::DropFields>

Specifies a transform that chooses the data property keys that you want
to drop.


=head2 DropNullFields => L<Paws::Glue::DropNullFields>

Specifies a transform that removes columns from the dataset if all
values in the column are 'null'. By default, Glue Studio will recognize
null objects, but some values such as empty strings, strings that are
"null", -1 integers or other placeholders such as zeros, are not
automatically recognized as nulls.


=head2 DynamicTransform => L<Paws::Glue::DynamicTransform>

Specifies a custom visual transform created by a user.


=head2 DynamoDBCatalogSource => L<Paws::Glue::DynamoDBCatalogSource>

Specifies a DynamoDBC Catalog data store in the Glue Data Catalog.


=head2 EvaluateDataQuality => L<Paws::Glue::EvaluateDataQuality>

Specifies your data quality evaluation criteria.


=head2 EvaluateDataQualityMultiFrame => L<Paws::Glue::EvaluateDataQualityMultiFrame>

Specifies your data quality evaluation criteria. Allows multiple input
data and returns a collection of Dynamic Frames.


=head2 FillMissingValues => L<Paws::Glue::FillMissingValues>

Specifies a transform that locates records in the dataset that have
missing values and adds a new field with a value determined by
imputation. The input data set is used to train the machine learning
model that determines what the missing value should be.


=head2 Filter => L<Paws::Glue::Filter>

Specifies a transform that splits a dataset into two, based on a filter
condition.


=head2 GovernedCatalogSource => L<Paws::Glue::GovernedCatalogSource>

Specifies a data source in a goverened Data Catalog.


=head2 GovernedCatalogTarget => L<Paws::Glue::GovernedCatalogTarget>

Specifies a data target that writes to a goverened catalog.


=head2 JDBCConnectorSource => L<Paws::Glue::JDBCConnectorSource>

Specifies a connector to a JDBC data source.


=head2 JDBCConnectorTarget => L<Paws::Glue::JDBCConnectorTarget>

Specifies a data target that writes to Amazon S3 in Apache Parquet
columnar storage.


=head2 Join => L<Paws::Glue::Join>

Specifies a transform that joins two datasets into one dataset using a
comparison phrase on the specified data property keys. You can use
inner, outer, left, right, left semi, and left anti joins.


=head2 Merge => L<Paws::Glue::Merge>

Specifies a transform that merges a C<DynamicFrame> with a staging
C<DynamicFrame> based on the specified primary keys to identify
records. Duplicate records (records with the same primary keys) are not
de-duplicated.


=head2 MicrosoftSQLServerCatalogSource => L<Paws::Glue::MicrosoftSQLServerCatalogSource>

Specifies a Microsoft SQL server data source in the Glue Data Catalog.


=head2 MicrosoftSQLServerCatalogTarget => L<Paws::Glue::MicrosoftSQLServerCatalogTarget>

Specifies a target that uses Microsoft SQL.


=head2 MySQLCatalogSource => L<Paws::Glue::MySQLCatalogSource>

Specifies a MySQL data source in the Glue Data Catalog.


=head2 MySQLCatalogTarget => L<Paws::Glue::MySQLCatalogTarget>

Specifies a target that uses MySQL.


=head2 OracleSQLCatalogSource => L<Paws::Glue::OracleSQLCatalogSource>

Specifies an Oracle data source in the Glue Data Catalog.


=head2 OracleSQLCatalogTarget => L<Paws::Glue::OracleSQLCatalogTarget>

Specifies a target that uses Oracle SQL.


=head2 PIIDetection => L<Paws::Glue::PIIDetection>

Specifies a transform that identifies, removes or masks PII data.


=head2 PostgreSQLCatalogSource => L<Paws::Glue::PostgreSQLCatalogSource>

Specifies a PostgresSQL data source in the Glue Data Catalog.


=head2 PostgreSQLCatalogTarget => L<Paws::Glue::PostgreSQLCatalogTarget>

Specifies a target that uses Postgres SQL.


=head2 Recipe => L<Paws::Glue::Recipe>

Specifies a Glue DataBrew recipe node.


=head2 RedshiftSource => L<Paws::Glue::RedshiftSource>

Specifies an Amazon Redshift data store.


=head2 RedshiftTarget => L<Paws::Glue::RedshiftTarget>

Specifies a target that uses Amazon Redshift.


=head2 RelationalCatalogSource => L<Paws::Glue::RelationalCatalogSource>

Specifies a relational catalog data store in the Glue Data Catalog.


=head2 RenameField => L<Paws::Glue::RenameField>

Specifies a transform that renames a single data property key.


=head2 S3CatalogDeltaSource => L<Paws::Glue::S3CatalogDeltaSource>

Specifies a Delta Lake data source that is registered in the Glue Data
Catalog. The data source must be stored in Amazon S3.


=head2 S3CatalogHudiSource => L<Paws::Glue::S3CatalogHudiSource>

Specifies a Hudi data source that is registered in the Glue Data
Catalog. The data source must be stored in Amazon S3.


=head2 S3CatalogSource => L<Paws::Glue::S3CatalogSource>

Specifies an Amazon S3 data store in the Glue Data Catalog.


=head2 S3CatalogTarget => L<Paws::Glue::S3CatalogTarget>

Specifies a data target that writes to Amazon S3 using the Glue Data
Catalog.


=head2 S3CsvSource => L<Paws::Glue::S3CsvSource>

Specifies a command-separated value (CSV) data store stored in Amazon
S3.


=head2 S3DeltaCatalogTarget => L<Paws::Glue::S3DeltaCatalogTarget>

Specifies a target that writes to a Delta Lake data source in the Glue
Data Catalog.


=head2 S3DeltaDirectTarget => L<Paws::Glue::S3DeltaDirectTarget>

Specifies a target that writes to a Delta Lake data source in Amazon
S3.


=head2 S3DeltaSource => L<Paws::Glue::S3DeltaSource>

Specifies a Delta Lake data source stored in Amazon S3.


=head2 S3DirectTarget => L<Paws::Glue::S3DirectTarget>

Specifies a data target that writes to Amazon S3.


=head2 S3ExcelSource => L<Paws::Glue::S3ExcelSource>

Defines configuration parameters for reading Excel files from Amazon
S3.


=head2 S3GlueParquetTarget => L<Paws::Glue::S3GlueParquetTarget>

Specifies a data target that writes to Amazon S3 in Apache Parquet
columnar storage.


=head2 S3HudiCatalogTarget => L<Paws::Glue::S3HudiCatalogTarget>

Specifies a target that writes to a Hudi data source in the Glue Data
Catalog.


=head2 S3HudiDirectTarget => L<Paws::Glue::S3HudiDirectTarget>

Specifies a target that writes to a Hudi data source in Amazon S3.


=head2 S3HudiSource => L<Paws::Glue::S3HudiSource>

Specifies a Hudi data source stored in Amazon S3.


=head2 S3HyperDirectTarget => L<Paws::Glue::S3HyperDirectTarget>

Defines configuration parameters for writing data to Amazon S3 using
HyperDirect optimization.


=head2 S3IcebergDirectTarget => L<Paws::Glue::S3IcebergDirectTarget>

Defines configuration parameters for writing data to Amazon S3 as an
Apache Iceberg table.


=head2 S3JsonSource => L<Paws::Glue::S3JsonSource>

Specifies a JSON data store stored in Amazon S3.


=head2 S3ParquetSource => L<Paws::Glue::S3ParquetSource>

Specifies an Apache Parquet data store stored in Amazon S3.


=head2 SelectFields => L<Paws::Glue::SelectFields>

Specifies a transform that chooses the data property keys that you want
to keep.


=head2 SelectFromCollection => L<Paws::Glue::SelectFromCollection>

Specifies a transform that chooses one C<DynamicFrame> from a
collection of C<DynamicFrames>. The output is the selected
C<DynamicFrame>


=head2 SnowflakeSource => L<Paws::Glue::SnowflakeSource>

Specifies a Snowflake data source.


=head2 SnowflakeTarget => L<Paws::Glue::SnowflakeTarget>

Specifies a target that writes to a Snowflake data source.


=head2 SparkConnectorSource => L<Paws::Glue::SparkConnectorSource>

Specifies a connector to an Apache Spark data source.


=head2 SparkConnectorTarget => L<Paws::Glue::SparkConnectorTarget>

Specifies a target that uses an Apache Spark connector.


=head2 SparkSQL => L<Paws::Glue::SparkSQL>

Specifies a transform where you enter a SQL query using Spark SQL
syntax to transform the data. The output is a single C<DynamicFrame>.


=head2 Spigot => L<Paws::Glue::Spigot>

Specifies a transform that writes samples of the data to an Amazon S3
bucket.


=head2 SplitFields => L<Paws::Glue::SplitFields>

Specifies a transform that splits data property keys into two
C<DynamicFrames>. The output is a collection of C<DynamicFrames>: one
with selected data property keys, and one with the remaining data
property keys.


=head2 Union => L<Paws::Glue::Union>

Specifies a transform that combines the rows from two or more datasets
into a single result.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Glue>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

