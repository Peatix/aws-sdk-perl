
package Paws::Glue::GetUnfilteredTableMetadataResponse;
  use Moose;
  has AuthorizedColumns => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has CellFilters => (is => 'ro', isa => 'ArrayRef[Paws::Glue::ColumnRowFilter]');
  has IsMultiDialectView => (is => 'ro', isa => 'Bool');
  has IsProtected => (is => 'ro', isa => 'Bool');
  has IsRegisteredWithLakeFormation => (is => 'ro', isa => 'Bool');
  has Permissions => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has QueryAuthorizationId => (is => 'ro', isa => 'Str');
  has ResourceArn => (is => 'ro', isa => 'Str');
  has RowFilter => (is => 'ro', isa => 'Str');
  has Table => (is => 'ro', isa => 'Paws::Glue::Table');

  has _request_id => (is => 'ro', isa => 'Str');

### main pod documentation begin ###

=head1 NAME

Paws::Glue::GetUnfilteredTableMetadataResponse

=head1 ATTRIBUTES


=head2 AuthorizedColumns => ArrayRef[Str|Undef]

A list of column names that the user has been granted access to.


=head2 CellFilters => ArrayRef[L<Paws::Glue::ColumnRowFilter>]

A list of column row filters.


=head2 IsMultiDialectView => Bool

Specifies whether the view supports the SQL dialects of one or more
different query engines and can therefore be read by those engines.


=head2 IsProtected => Bool

A flag that instructs the engine not to push user-provided operations
into the logical plan of the view during query planning. However, if
set this flag does not guarantee that the engine will comply. Refer to
the engine's documentation to understand the guarantees provided, if
any.


=head2 IsRegisteredWithLakeFormation => Bool

A Boolean value that indicates whether the partition location is
registered with Lake Formation.


=head2 Permissions => ArrayRef[Str|Undef]

The Lake Formation data permissions of the caller on the table. Used to
authorize the call when no view context is found.


=head2 QueryAuthorizationId => Str

A cryptographically generated query identifier generated by Glue or
Lake Formation.


=head2 ResourceArn => Str

The resource ARN of the parent resource extracted from the request.


=head2 RowFilter => Str

The filter that applies to the table. For example when applying the
filter in SQL, it would go in the C<WHERE> clause and can be evaluated
by using an C<AND> operator with any other predicates applied by the
user querying the table.


=head2 Table => L<Paws::Glue::Table>

A Table object containing the table metadata.


=head2 _request_id => Str


=cut

1;