# Generated by default/object.tt
package Paws::Glue::SparkSQL;
  use Moose;
  has Inputs => (is => 'ro', isa => 'ArrayRef[Str|Undef]', required => 1);
  has Name => (is => 'ro', isa => 'Str', required => 1);
  has OutputSchemas => (is => 'ro', isa => 'ArrayRef[Paws::Glue::GlueSchema]');
  has SqlAliases => (is => 'ro', isa => 'ArrayRef[Paws::Glue::SqlAlias]', required => 1);
  has SqlQuery => (is => 'ro', isa => 'Str', required => 1);

1;

### main pod documentation begin ###

=head1 NAME

Paws::Glue::SparkSQL

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Glue::SparkSQL object:

  $service_obj->Method(Att1 => { Inputs => $value, ..., SqlQuery => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Glue::SparkSQL object:

  $result = $service_obj->Method(...);
  $result->Att1->Inputs

=head1 DESCRIPTION

Specifies a transform where you enter a SQL query using Spark SQL
syntax to transform the data. The output is a single C<DynamicFrame>.

=head1 ATTRIBUTES


=head2 B<REQUIRED> Inputs => ArrayRef[Str|Undef]

The data inputs identified by their node names. You can associate a
table name with each input node to use in the SQL query. The name you
choose must meet the Spark SQL naming restrictions.


=head2 B<REQUIRED> Name => Str

The name of the transform node.


=head2 OutputSchemas => ArrayRef[L<Paws::Glue::GlueSchema>]

Specifies the data schema for the SparkSQL transform.


=head2 B<REQUIRED> SqlAliases => ArrayRef[L<Paws::Glue::SqlAlias>]

A list of aliases. An alias allows you to specify what name to use in
the SQL for a given input. For example, you have a datasource named
"MyDataSource". If you specify C<From> as MyDataSource, and C<Alias> as
SqlName, then in your SQL you can do:

C<select * from SqlName>

and that gets data from MyDataSource.


=head2 B<REQUIRED> SqlQuery => Str

A SQL query that must use Spark SQL syntax and return a single data
set.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Glue>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

