# Generated by default/object.tt
package Paws::Glue::JDBCConnectorOptions;
  use Moose;
  has DataTypeMapping => (is => 'ro', isa => 'Paws::Glue::JDBCDataTypeMapping');
  has FilterPredicate => (is => 'ro', isa => 'Str');
  has JobBookmarkKeys => (is => 'ro', isa => 'ArrayRef[Str|Undef]');
  has JobBookmarkKeysSortOrder => (is => 'ro', isa => 'Str');
  has LowerBound => (is => 'ro', isa => 'Int');
  has NumPartitions => (is => 'ro', isa => 'Int');
  has PartitionColumn => (is => 'ro', isa => 'Str');
  has UpperBound => (is => 'ro', isa => 'Int');

1;

### main pod documentation begin ###

=head1 NAME

Paws::Glue::JDBCConnectorOptions

=head1 USAGE

This class represents one of two things:

=head3 Arguments in a call to a service

Use the attributes of this class as arguments to methods. You shouldn't make instances of this class. 
Each attribute should be used as a named argument in the calls that expect this type of object.

As an example, if Att1 is expected to be a Paws::Glue::JDBCConnectorOptions object:

  $service_obj->Method(Att1 => { DataTypeMapping => $value, ..., UpperBound => $value  });

=head3 Results returned from an API call

Use accessors for each attribute. If Att1 is expected to be an Paws::Glue::JDBCConnectorOptions object:

  $result = $service_obj->Method(...);
  $result->Att1->DataTypeMapping

=head1 DESCRIPTION

Additional connection options for the connector.

=head1 ATTRIBUTES


=head2 DataTypeMapping => L<Paws::Glue::JDBCDataTypeMapping>

Custom data type mapping that builds a mapping from a JDBC data type to
an Glue data type. For example, the option
C<"dataTypeMapping":{"FLOAT":"STRING"}> maps data fields of JDBC type
C<FLOAT> into the Java C<String> type by calling the
C<ResultSet.getString()> method of the driver, and uses it to build the
Glue record. The C<ResultSet> object is implemented by each driver, so
the behavior is specific to the driver you use. Refer to the
documentation for your JDBC driver to understand how the driver
performs the conversions.


=head2 FilterPredicate => Str

Extra condition clause to filter data from source. For example:

C<BillingCity='Mountain View'>

When using a query instead of a table name, you should validate that
the query works with the specified C<filterPredicate>.


=head2 JobBookmarkKeys => ArrayRef[Str|Undef]

The name of the job bookmark keys on which to sort.


=head2 JobBookmarkKeysSortOrder => Str

Specifies an ascending or descending sort order.


=head2 LowerBound => Int

The minimum value of C<partitionColumn> that is used to decide
partition stride.


=head2 NumPartitions => Int

The number of partitions. This value, along with C<lowerBound>
(inclusive) and C<upperBound> (exclusive), form partition strides for
generated C<WHERE> clause expressions that are used to split the
C<partitionColumn>.


=head2 PartitionColumn => Str

The name of an integer column that is used for partitioning. This
option works only when it's included with C<lowerBound>, C<upperBound>,
and C<numPartitions>. This option works the same way as in the Spark
SQL JDBC reader.


=head2 UpperBound => Int

The maximum value of C<partitionColumn> that is used to decide
partition stride.



=head1 SEE ALSO

This class forms part of L<Paws>, describing an object used in L<Paws::Glue>

=head1 BUGS and CONTRIBUTIONS

The source code is located here: L<https://github.com/pplu/aws-sdk-perl>

Please report bugs to: L<https://github.com/pplu/aws-sdk-perl/issues>

=cut

